<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TVA.Services</name>
    </assembly>
    <members>
        <member name="T:TVA.Services.ServiceModel.Messaging.MessageProcessingMode">
            <summary>
            Indicates how the distribution of <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s is processed by the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.MessageProcessingMode.Parallel">
            <summary>
            <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> distribution is processed in parallel for increased distribution performance.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.MessageProcessingMode.Sequential">
            <summary>
            <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> distribution is processed sequentially to preserve <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> ordering.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.MessageBusService">
            <summary>
            A message bus for event-based messaging between disjoint systems.
            </summary>
            <example>
            This example shows how to host <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> inside a console application:
            <code>
            using System;
            using System.ServiceModel;
            using System.ServiceModel.Description;
            using System.Threading;
            using TVA;
            using TVA.Services.ServiceModel.Messaging;
            
            class Program
            {
                static void Main(string[] args)
                {
                    // Prompt for security option.
                    Console.Write("Enable security (Y/N): ");
                    bool enableSecurity = Console.ReadLine().ParseBoolean();
            
                    // Initialize message bus service.
                    MessageBusService service = new MessageBusService();
                    service.Singleton = true;
                    service.PublishMetadata = true;
                    service.PersistSettings = false;
                    service.Endpoints = "http.duplex://localhost:4501; net.tcp://locahost:4502";
                    if (enableSecurity)
                        service.SecurityPolicy = typeof(MessageBusSecurityPolicy).FullName;
                    service.Initialize();
            
                    // Show message bus service status.
                    if (service.ServiceHost.State == CommunicationState.Opened)
                    {
                        Console.WriteLine("\r\n{0} is running:", service.GetType().Name);
                        foreach (ServiceEndpoint endpoint in service.ServiceHost.Description.Endpoints)
                        {
                            Console.WriteLine("- {0} ({1})", endpoint.Address, endpoint.Binding.GetType().Name);
                        }
            
                        new Thread(delegate() 
                            {
                                while (service.ServiceHost.State == CommunicationState.Opened)
                                {
                                    Console.WriteLine();
                                    Console.WriteLine();
                                    Console.WriteLine("Status of {0}:", service.Name);
                                    Console.WriteLine(service.Status);
                                    Console.Write("Press Enter key to stop...");
            
                                    Thread.Sleep(5000);
                                }
                            }).Start();
                    }
                    else
                    {
                        Console.WriteLine("\r\n{0} could not be started", service.GetType().Name);
                    }
            
                    // Shutdown.
                    Console.ReadLine();
                    service.Dispose();
                }
            }
            </code>
            This example shows how to host <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> inside a web application:
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <configuration>
              <configSections>
                <section name="categorizedSettings" type="TVA.Configuration.CategorizedSettingsSection, TVA.Core" />
              </configSections>
              <categorizedSettings>
                <messageBusService>
                  <add name="Endpoints" value="" description="Semicolon delimited list of URIs where the web service can be accessed."
                    encrypted="false" />
                  <add name="Contract" value="TVA.Services.ServiceModel.Messaging.IMessageBusService, TVA.Services"
                    description="Assembly qualified name of the contract interface implemented by the web service."
                    encrypted="false" />
                  <add name="Singleton" value="True" description="True if the web service is singleton; otherwise False."
                    encrypted="false" />
                  <add name="SecurityPolicy" value="" description="Assembly qualified name of the authorization policy to be used for securing the web service."
                    encrypted="false" />
                  <add name="PublishMetadata" value="True" description="True if the web service metadata is to be published at all the endpoints; otherwise False."
                    encrypted="false" />
                  <add name="BufferThreshold" value="-1" description="Maximum number of messages that can be queued for distribution before the oldest ones are discarded."
                    encrypted="false" />
                  <add name="ProcessingMode" value="Sequential" description="Processing mode (Parallel; Sequential) to be used for the distribution of messages."
                    encrypted="false" />
                </messageBusService>
              </categorizedSettings>
              <system.serviceModel>
                <services>
                  <service name="TVA.Services.ServiceModel.Messaging.MessageBusService">
                    <endpoint address="" contract="TVA.Services.ServiceModel.Messaging.IMessageBusService" binding="wsDualHttpBinding" />
                  </service>
                </services>
                <behaviors>
                  <serviceBehaviors>
                    <behavior>
                      <serviceMetadata httpGetEnabled="true" />
                      <serviceDebug includeExceptionDetailInFaults="false" />
                    </behavior>
                  </serviceBehaviors>
                </behaviors>
                <serviceHostingEnvironment multipleSiteBindingsEnabled="true">
                  <serviceActivations>
                    <add relativeAddress="MessageBusService.svc" service="TVA.Services.ServiceModel.Messaging.MessageBusService, TVA.Services" />
                  </serviceActivations>
                </serviceHostingEnvironment>
              </system.serviceModel>
            </configuration>
            ]]>
            </code>
            This example shows how to publish <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s to <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>:
            <code>
            using System;
            using System.ServiceModel;
            using System.Threading;
            
            class Program : IMessageBusServiceCallback
            {
                static void Main(string[] args)
                {
                    // NOTE: Service reference to the message bus service must be added to generate the service proxy.
            
                    // Initialize auto-generated message bus service proxy.
                    InstanceContext callbackContext = new InstanceContext(new Program());
                    MessageBusServiceClient messageBusService = new MessageBusServiceClient(callbackContext, "NetTcpBinding_IMessageBusService");
            
                    // Create registration request for publishing messages.
                    RegistrationRequest registration = new RegistrationRequest();
                    registration.MessageType = MessageType.Topic;
                    registration.MessageName = "Topic.Frequency";
                    registration.RegistrationType = RegistrationType.Produce;
                    messageBusService.Register(registration);
            
                    // Start publishing messages to the bus asynchronously.
                    new Thread(delegate() 
                        {
                            Message message = new Message();
                            message.Type = registration.MessageType;
                            message.Name = registration.MessageName;
                            message.Format = "application/octet-stream";
            
                            Random random = new Random(59);
                            while (messageBusService.State == CommunicationState.Opened)
                            {
                                message.Time = DateTime.UtcNow;
                                message.Content = BitConverter.GetBytes(random.Next(61));
                                messageBusService.Publish(message);
            
                                Thread.Sleep(5000);
                            }
                        }).Start();
            
                    // Shutdown.
                    Console.Write("Press Enter key to stop...");
                    Console.ReadLine();
                    messageBusService.Close();
                }
            
                public void ProcessMessage(Message message)
                {
                    // This method will not be invoked since we are not consuming messages.
                    throw new NotSupportedException();
                }
            }
            </code>
            This example shows how to subscribe to <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> for receiving <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s:
            <code>
            using System;
            using System.ServiceModel;
            
            class Program : IMessageBusServiceCallback
            {
                static void Main(string[] args)
                {
                    // NOTE: Service reference to the message bus service must be added to generate the service proxy.
            
                    // Initialize auto-generated message bus service proxy.
                    InstanceContext callbackContext = new InstanceContext(new Program());
                    MessageBusServiceClient messageBusService = new MessageBusServiceClient(callbackContext, "NetTcpBinding_IMessageBusService");
            
                    // Subscribe with message bus service to receive messages.
                    RegistrationRequest registration = new RegistrationRequest();
                    registration.MessageType = MessageType.Topic;
                    registration.MessageName = "Topic.Frequency";
                    registration.RegistrationType = RegistrationType.Consume;
                    messageBusService.Register(registration);
            
                    // Shutdown.
                    Console.WriteLine("Press Enter key to stop...");
                    Console.WriteLine();
                    Console.ReadLine();
                    messageBusService.Close();
                }
            
                public void ProcessMessage(Message message)
                {
                    if (message.Format != "application/octet-stream")
                        Console.WriteLine("Message format '{0}' is not supported", message.Format);
                    else
                        Console.WriteLine("Message received: {0} Hz", BitConverter.ToInt32(message.Content, 0));
                }
            }
            </code>
            This example shows how to monitor <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> remotely:
            <code>
            using System;
            using System.ServiceModel;
            using System.Threading;
            using TVA;
            
            class Program : IMessageBusServiceCallback
            {
                static void Main(string[] args)
                {
                    // NOTE: Service reference to the message bus service must be added to generate the service proxy.
            
                    // Initialize auto-generated message bus service proxy.
                    InstanceContext callbackContext = new InstanceContext(new Program());
                    MessageBusServiceClient messageBusService = new MessageBusServiceClient(callbackContext, "NetTcpBinding_IMessageBusService");
                    messageBusService.ChannelFactory.Open();
            
                    // Start querying messages bus service status asynchronously.
                    new Thread(delegate()
                    {
                        while (messageBusService.State == CommunicationState.Opened)
                        {
                            Console.Clear();
                            Console.WriteLine(new string('-', 79));
                            Console.WriteLine("|" + "Message Bus Status".CenterText(77) + "|");
                            Console.WriteLine(new string('-', 79));
                            Console.WriteLine();
            
                            // Show clients.
                            Console.Write("Client ID".PadRight(25));
                            Console.Write(" ");
                            Console.Write("Connected".PadRight(21));
                            Console.Write(" ");
                            Console.Write("Msg. Produced".PadRight(15));
                            Console.Write(" ");
                            Console.Write("Msg. Consumed".PadRight(15));
                            Console.WriteLine();
                            Console.Write(new string('-', 25));
                            Console.Write(" ");
                            Console.Write(new string('-', 21));
                            Console.Write(" ");
                            Console.Write(new string('-', 15));
                            Console.Write(" ");
                            Console.Write(new string('-', 15));
                            Console.WriteLine();
                            foreach (ClientInfo client in messageBusService.GetClients())
                            {
                                Console.Write(client.SessionId.TruncateRight(25).PadRight(25));
                                Console.Write(" ");
                                Console.Write(client.ConnectedAt.ToString("MM/dd/yy hh:mm:ss tt").PadRight(21));
                                Console.Write(" ");
                                Console.Write(client.MessagesProduced.ToString().PadRight(15));
                                Console.Write(" ");
                                Console.Write(client.MessagesConsumed.ToString().PadRight(15));
                                Console.WriteLine();
                            }
                            Console.WriteLine();
            
                            // Show queues.
                            Console.Write("Queue Name".PadRight(25));
                            Console.Write(" ");
                            Console.Write("Producers".PadRight(10));
                            Console.Write(" ");
                            Console.Write("Consumers".PadRight(10));
                            Console.Write(" ");
                            Console.Write("Msg. Received".PadRight(15));
                            Console.Write(" ");
                            Console.Write("Msg. Processed".PadRight(15));
                            Console.WriteLine();
                            Console.Write(new string('-', 25));
                            Console.Write(" ");
                            Console.Write(new string('-', 10));
                            Console.Write(" ");
                            Console.Write(new string('-', 10));
                            Console.Write(" ");
                            Console.Write(new string('-', 15));
                            Console.Write(" ");
                            Console.Write(new string('-', 15));
                            Console.WriteLine();
                            foreach (RegistrationInfo queue in messageBusService.GetQueues())
                            {
                                Console.Write(queue.MessageName.PadRight(25));
                                Console.Write(" ");
                                Console.Write(queue.Producers.Length.ToString().PadRight(15));
                                Console.Write(" ");
                                Console.Write(queue.Consumers.Length.ToString().PadRight(15));
                                Console.Write(" ");
                                Console.Write(queue.MessagesReceived.ToString().PadRight(15));
                                Console.Write(" ");
                                Console.Write(queue.MessagesProcessed.ToString().PadRight(15));
                                Console.WriteLine();
                            }
                            Console.WriteLine();
            
                            // Show topics.
                            Console.Write("Topic Name".PadRight(25));
                            Console.Write(" ");
                            Console.Write("Producers".PadRight(10));
                            Console.Write(" ");
                            Console.Write("Consumers".PadRight(10));
                            Console.Write(" ");
                            Console.Write("Msg. Received".PadRight(15));
                            Console.Write(" ");
                            Console.Write("Msg. Processed".PadRight(15));
                            Console.WriteLine();
                            Console.Write(new string('-', 25));
                            Console.Write(" ");
                            Console.Write(new string('-', 10));
                            Console.Write(" ");
                            Console.Write(new string('-', 10));
                            Console.Write(" ");
                            Console.Write(new string('-', 15));
                            Console.Write(" ");
                            Console.Write(new string('-', 15));
                            Console.WriteLine();
                            foreach (RegistrationInfo topic in messageBusService.GetTopics())
                            {
                                Console.Write(topic.MessageName.PadRight(25));
                                Console.Write(" ");
                                Console.Write(topic.Producers.Length.ToString().PadRight(15));
                                Console.Write(" ");
                                Console.Write(topic.Consumers.Length.ToString().PadRight(15));
                                Console.Write(" ");
                                Console.Write(topic.MessagesReceived.ToString().PadRight(15));
                                Console.Write(" ");
                                Console.Write(topic.MessagesProcessed.ToString().PadRight(15));
                                Console.WriteLine();
                            }
                            Console.WriteLine();
                            Console.Write("Press Enter key to stop...");
            
                            Thread.Sleep(5000);
                        }
                    }).Start();
            
                    // Shutdown.
                    Console.ReadLine();
                    messageBusService.Close();
                }
            
                public void ProcessMessage(Message message)
                {
                    // This method will not be invoked since we are not consuming messages.
                    throw new NotSupportedException();
                }
            }
            </code>
            </example>
            <seealso cref="T:TVA.Services.ServiceModel.Messaging.Message"/>
            <seealso cref="T:TVA.Services.ServiceModel.Messaging.ClientInfo"/>
            <seealso cref="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo"/>
            <seealso cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/>
            <seealso cref="T:TVA.Services.ServiceModel.Messaging.MessageBusSecurityPolicy"/>
        </member>
        <member name="T:TVA.Services.ServiceModel.SelfHostingService">
            <summary>
            A base class for web service that can send and receive data over REST (Representational State Transfer) interface.
            </summary>
            <example>
            This example shows how to create a WCF service derived from <see cref="T:TVA.Services.ServiceModel.SelfHostingService"/> that is capable of hosting itself:
            <code>
            using System.ServiceModel;
            using System.ServiceModel.Web;
            using TVA.Services.ServiceModel;
            
            namespace Services
            {
                [ServiceContract()]
                public interface IService : ISelfHostingService
                {
                    [OperationContract(), WebGet(UriTemplate = "/hello/{name}")]
                    string Hello(string name);
                }
            
                public class Service : SelfHostingService, IService
                {
                    public string Hello(string name)
                    {
                        return string.Format("Hello {0}!", name);
                    }
                }
            }
            </code>
            This example shows how to activate a WCF service derived from <see cref="T:TVA.Services.ServiceModel.SelfHostingService"/> that is capable of hosting itself:
            <code>
            using System;
            using System.ServiceModel;
            using System.ServiceModel.Description;
            using System.ServiceModel.Web;
            using Services;
            using TVA.Services.ServiceModel;
            
            class Program
            {
                static void Main(string[] args)
                {
                    // Initialize web service.
                    Service service = new Service();
                    service.PublishMetadata = true;
                    service.Endpoints = "http.soap11://localhost:4500/soap; http.rest://localhost:4500/rest";
                    service.Initialize();
            
                    // Show web service status.
                    if (service.ServiceHost.State == CommunicationState.Opened)
                    {
                        Console.WriteLine("\r\n{0} is running:", service.GetType().Name);
                        foreach (ServiceEndpoint endpoint in service.ServiceHost.Description.Endpoints)
                        {
                            Console.WriteLine("- {0} ({1})", endpoint.Address, endpoint.Binding.GetType().Name);
                        }
                        Console.Write("\r\nPress Enter key to stop...");
                    }
                    else
                    {
                        Console.WriteLine("\r\n{0} could not be started", service.GetType().Name);
                    }
            
                    // Shutdown.
                    Console.ReadLine();
                    service.Dispose();
                }
            }
            </code>
            This example shows how to host a WCF service derived from <see cref="T:TVA.Services.ServiceModel.SelfHostingService"/> inside ASP.NET:
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <configuration>
              <system.serviceModel>
                <services>
                  <service name="Services.Service">
                    <endpoint address="soap" contract="Services.IService" binding="basicHttpBinding"/>
                    <endpoint address="rest" contract="Services.IService" binding="webHttpBinding" behaviorConfiguration="restBehavior"/>
                  </service>
                </services>
                <behaviors>
                  <serviceBehaviors>
                    <behavior>
                      <serviceMetadata httpGetEnabled="true"/>
                    </behavior>
                  </serviceBehaviors>
                  <endpointBehaviors>
                    <behavior name="restBehavior">
                      <webHttp helpEnabled="true"/>
                    </behavior>
                  </endpointBehaviors>
                </behaviors>
                <serviceHostingEnvironment multipleSiteBindingsEnabled="true">
                  <serviceActivations>
                    <add relativeAddress="Service.svc" service="Services.Service, Services"/>
                  </serviceActivations>
                </serviceHostingEnvironment>
              </system.serviceModel>
            </configuration>
            ]]>
            </code>
            </example>
        </member>
        <member name="T:TVA.Services.ServiceModel.ISelfHostingService">
            <summary>
            Defines a web service that can send and receive data over REST (Representational State Transfer) interface.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceModel.ISelfHostingService.ServiceHostCreated">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceModel.ISelfHostingService.ServiceHost"/> has been created with the specified <see cref="P:TVA.Services.ServiceModel.ISelfHostingService.Endpoints"/>.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceModel.ISelfHostingService.ServiceHostStarted">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceModel.ISelfHostingService.ServiceHost"/> can process requests via all of its endpoints.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceModel.ISelfHostingService.ServiceProcessException">
            <summary>
            Occurs when an <see cref="T:System.Exception"/> is encountered when processing a request.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.ISelfHostingService.Endpoints">
            <summary>
            Gets or sets a semicolon delimited list of URIs where the web service can be accessed.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.ISelfHostingService.Contract">
            <summary>
            Gets or sets the <see cref="P:System.Type.FullName"/> of the contract interface implemented by the web service.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.ISelfHostingService.Singleton">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="P:TVA.Services.ServiceModel.ISelfHostingService.ServiceHost"/> will use the current instance of the web service for processing 
            requests or base the web service instance creation on <see cref="T:System.ServiceModel.InstanceContextMode"/> specified in its <see cref="T:System.ServiceModel.ServiceBehaviorAttribute"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.ISelfHostingService.SecurityPolicy">
            <summary>
            Gets or sets the <see cref="P:System.Type.FullName"/> of <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy"/> to be used for securing all web service <see cref="P:TVA.Services.ServiceModel.ISelfHostingService.Endpoints"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.ISelfHostingService.PublishMetadata">
            <summary>
            Gets or sets a boolean value that indicates whether web service metadata is to made available at all web service <see cref="P:TVA.Services.ServiceModel.ISelfHostingService.Endpoints"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.ISelfHostingService.ServiceHost">
            <summary>
            Gets the <see cref="P:TVA.Services.ServiceModel.ISelfHostingService.ServiceHost"/> hosting the web service.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.#ctor">
            <summary>
            Initializes a new instance of the web service.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.Finalize">
            <summary>
            Releases the unmanaged resources before the web service is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.Initialize">
            <summary>
            Initializes the web service.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.SaveSettings">
            <summary>
            Saves web service settings to the config file if the <see cref="P:TVA.Adapters.Adapter.PersistSettings"/> property is set to true.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.LoadSettings">
            <summary>
            Loads saved web service settings from the config file if the <see cref="P:TVA.Adapters.Adapter.PersistSettings"/> property is set to true.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.GetUnusedPort">
            <summary>
            Get an unused port number.
            </summary>
            <returns>An <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.InitializeServiceHost">
            <summary>
            Initializes the <see cref="P:TVA.Services.ServiceModel.SelfHostingService.ServiceHost"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the web service and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.OnServiceHostCreated">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceModel.SelfHostingService.ServiceHostCreated"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.OnServiceHostStarted">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceModel.SelfHostingService.ServiceHostStarted"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.OnServiceProcessException(System.Exception)">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceModel.SelfHostingService.ServiceProcessException"/> event.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> to sent to <see cref="E:TVA.Services.ServiceModel.SelfHostingService.ServiceProcessException"/> event.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.SelfHostingService.CreateServiceBinding(System.String@,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.ServiceModel.Channels.Binding"/> based on the specified <paramref name="address"/>.
            </summary>
            <param name="address">The URI that is used to determine the type of <see cref="T:System.ServiceModel.Channels.Binding"/> to be created.</param>
            <param name="enableSecurity">A boolean value that indicated whether security is to be enabled on the <see cref="T:System.ServiceModel.Channels.Binding"/>.</param>
            <returns>An <see cref="T:System.ServiceModel.Channels.Binding"/> object if a valid <paramref name="address"/> is specified; otherwise null.</returns>
            <remarks>
            This list shows all valid address schemes that can be specified in the <paramref name="address"/>:
            <list type="table">
                <listheader>
                    <term>Address Scheme</term>
                    <description>Usage</description>
                </listheader>
                <item>
                    <term><b>http://</b> or <b>http.soap11://</b></term>
                    <description>An <paramref name="address"/> of <b>http.soap11://localhost:2929</b> will create an <see cref="T:System.ServiceModel.BasicHttpBinding"/> and update the <paramref name="address"/> to <b>http://localhost:2929</b>.</description>
                </item>
                <item>
                    <term><b>http.soap12://</b></term>
                    <description>An <paramref name="address"/> of <b>http.soap12://localhost:2929</b> will create an <see cref="T:System.ServiceModel.WSHttpBinding"/> and update the <paramref name="address"/> to <b>http://localhost:2929</b>.</description>
                </item>
                <item>
                    <term><b>http.duplex://</b></term>
                    <description>An <paramref name="address"/> of <b>http.duplex://localhost:2929</b> will create an <see cref="T:System.ServiceModel.WSDualHttpBinding"/> and update the <paramref name="address"/> to <b>http://localhost:2929</b>.</description>
                </item>
                <item>
                    <term><b>http.rest://</b></term>
                    <description>An <paramref name="address"/> of <b>http.rest://localhost:2929</b> will create an <see cref="T:System.ServiceModel.WebHttpBinding"/> and update the <paramref name="address"/> to <b>http://localhost:2929</b>.</description>
                </item>
                <item>
                    <term><b>net.tcp://</b></term>
                    <description>An <paramref name="address"/> of <b>net.tcp://localhost:2929</b> will create an <see cref="T:System.ServiceModel.NetTcpBinding"/> and leave the <paramref name="address"/> unchanged.</description>
                </item>
                <item>
                    <term><b>net.p2p://</b></term>
                    <description>An <paramref name="address"/> of <b>net.p2p://localhost:2929</b> will create an <see cref="T:System.ServiceModel.NetPeerTcpBinding"/> and leave the <paramref name="address"/> unchanged.</description>
                </item>
                <item>
                    <term><b>net.pipe://</b></term>
                    <description>An <paramref name="address"/> of <b>net.pipe://localhost:2929</b> will create an <see cref="T:System.ServiceModel.NetNamedPipeBinding"/> and leave the <paramref name="address"/> unchanged.</description>
                </item>
                <item>
                    <term><b>net.msmq://</b></term>
                    <description>An <paramref name="address"/> of <b>net.msmq://localhost:2929</b> will create an <see cref="T:System.ServiceModel.NetMsmqBinding"/> and leave the <paramref name="address"/> unchanged.</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="E:TVA.Services.ServiceModel.SelfHostingService.ServiceHostCreated">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceModel.SelfHostingService.ServiceHost"/> has been created with the specified <see cref="P:TVA.Services.ServiceModel.SelfHostingService.Endpoints"/>.
            </summary>
            <remarks>
            When <see cref="E:TVA.Services.ServiceModel.SelfHostingService.ServiceHostCreated"/> event is fired, changes like adding new endpoints can be made to the <see cref="P:TVA.Services.ServiceModel.SelfHostingService.ServiceHost"/>.
            </remarks>
        </member>
        <member name="E:TVA.Services.ServiceModel.SelfHostingService.ServiceHostStarted">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceModel.SelfHostingService.ServiceHost"/> has can process requests via all of its endpoints.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceModel.SelfHostingService.ServiceProcessException">
            <summary>
            Occurs when an <see cref="T:System.Exception"/> is encountered when processing a request.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the exception encountered when processing a request.
            </remarks>
        </member>
        <member name="P:TVA.Services.ServiceModel.SelfHostingService.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the web service is currently enabled.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.SelfHostingService.Endpoints">
            <summary>
            Gets or sets a semicolon delimited list of URIs where the web service can be accessed.
            </summary>
            <remarks>
            Set <see cref="P:TVA.Services.ServiceModel.SelfHostingService.Endpoints"/> to a null or empty string to disable web service hosting. Refer to <see cref="M:TVA.Services.ServiceModel.SelfHostingService.CreateServiceBinding(System.String@,System.Boolean)"/> 
            for a list of supported URI formats.
            </remarks>
        </member>
        <member name="P:TVA.Services.ServiceModel.SelfHostingService.Contract">
            <summary>
            Gets or sets the <see cref="P:System.Type.FullName"/> of the contract interface implemented by the web service.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.Services.ServiceModel.SelfHostingService.Singleton">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="P:TVA.Services.ServiceModel.SelfHostingService.ServiceHost"/> will use the current instance of the web service for processing 
            requests or base the web service instance creation on <see cref="T:System.ServiceModel.InstanceContextMode"/> specified in its <see cref="T:System.ServiceModel.ServiceBehaviorAttribute"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.SelfHostingService.SecurityPolicy">
            <summary>
            Gets or sets the <see cref="P:System.Type.FullName"/> of <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy"/> to be used for securing all web service <see cref="P:TVA.Services.ServiceModel.SelfHostingService.Endpoints"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.SelfHostingService.PublishMetadata">
            <summary>
            Gets or sets a boolean value that indicates whether web service metadata is to made available at all web service <see cref="P:TVA.Services.ServiceModel.SelfHostingService.Endpoints"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.SelfHostingService.ServiceHost">
            <summary>
            Gets the <see cref="T:System.ServiceModel.Web.WebServiceHost"/> hosting the web service.
            </summary>
            <remarks>
            By default, the <see cref="P:TVA.Services.ServiceModel.SelfHostingService.ServiceHost"/> only has <see cref="T:System.ServiceModel.WebHttpBinding"/> endpoint at the <see cref="P:TVA.Services.ServiceModel.SelfHostingService.Endpoints"/>. 
            Additional endpoints can be added to the <see cref="P:TVA.Services.ServiceModel.SelfHostingService.ServiceHost"/> when <see cref="E:TVA.Services.ServiceModel.SelfHostingService.ServiceHostCreated"/> event is fired.
            </remarks>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.IMessageBusService">
            <summary>
            Defines a message bus for event-based messaging between disjoint systems.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.IMessageBusService.Register(TVA.Services.ServiceModel.Messaging.RegistrationRequest)">
            <summary>
            Registers with the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> to produce or consume <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
            <param name="request">An <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/> containing registration data.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.IMessageBusService.Unregister(TVA.Services.ServiceModel.Messaging.RegistrationRequest)">
            <summary>
            Unregisters a previous registration with the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> to produce or consume <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s
            </summary>
            <param name="request">The <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/> used when registering.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.IMessageBusService.Publish(TVA.Services.ServiceModel.Messaging.Message)">
            <summary>
            Sends the <paramref name="message"/> to the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> for distribution amongst its registered consumers.
            </summary>
            <param name="message">The <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> that is to be distributed.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.IMessageBusService.GetLatestMessage(TVA.Services.ServiceModel.Messaging.RegistrationRequest)">
            <summary>
            Gets the latest <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> distributed to the subscribers of the specified <paramref name="topic"/>.
            </summary>
            <param name="topic">The topic <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/> used when registering.</param>
            <returns>The latest <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> distributed to the <paramref name="topic"/> subscribers.</returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.IMessageBusService.GetClients">
            <summary>
            Gets a list of all clients connected to the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:TVA.Services.ServiceModel.Messaging.ClientInfo"/> objects.</returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.IMessageBusService.GetQueues">
            <summary>
            Gets a list of all <see cref="F:TVA.Services.ServiceModel.Messaging.MessageType.Queue"/>s registered on the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo"/> objects.</returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.IMessageBusService.GetTopics">
            <summary>
            Gets a list of all <see cref="F:TVA.Services.ServiceModel.Messaging.MessageType.Topic"/>s registered on the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo"/> objects.</returns>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.MessageBusService.DefaultBufferThreshold">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceModel.Messaging.MessageBusService.BufferThreshold"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.MessageBusService.DefaultProcessingMode">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceModel.Messaging.MessageBusService.ProcessingMode"/> property.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> class.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.Initialize">
            <summary>
            Initializes the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The specified <see cref="P:TVA.Services.ServiceModel.Messaging.MessageBusService.ProcessingMode"/> is not supported.</exception>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.SaveSettings">
            <summary>
            Saves <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> settings to the config file if the <see cref="P:TVA.Adapters.Adapter.PersistSettings"/> property is set to true.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.LoadSettings">
            <summary>
            Loads saved <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> settings from the config file if the <see cref="P:TVA.Adapters.Adapter.PersistSettings"/> property is set to true.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.Register(TVA.Services.ServiceModel.Messaging.RegistrationRequest)">
            <summary>
            Registers with the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> to produce or consume <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
            <param name="request">An <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/> containing registration data.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.Unregister(TVA.Services.ServiceModel.Messaging.RegistrationRequest)">
            <summary>
            Unregisters a previous registration with the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> to produce or consume <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s
            </summary>
            <param name="request">The <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/> used when registering.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.Publish(TVA.Services.ServiceModel.Messaging.Message)">
            <summary>
            Sends the <paramref name="message"/> to the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> for distribution amongst its registered consumers.
            </summary>
            <param name="message">The <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> that is to be distributed.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.GetLatestMessage(TVA.Services.ServiceModel.Messaging.RegistrationRequest)">
            <summary>
            Gets the latest <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> distributed to the subscribers of the specified <paramref name="topic"/>.
            </summary>
            <param name="topic">The topic <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/> used when registering.</param>
            <returns>The latest <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> distributed to the <paramref name="topic"/> subscribers.</returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.GetClients">
            <summary>
            Gets a list of all clients connected to the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:TVA.Services.ServiceModel.Messaging.ClientInfo"/> objects.</returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.GetQueues">
            <summary>
            Gets a list of all <see cref="F:TVA.Services.ServiceModel.Messaging.MessageType.Queue"/>s registered on the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo"/> objects.</returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.GetTopics">
            <summary>
            Gets a list of all <see cref="F:TVA.Services.ServiceModel.Messaging.MessageType.Topic"/>s registered on the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo"/> objects.</returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusService.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.MessageBusService.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> is currently enabled.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.MessageBusService.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.MessageBusService.BufferThreshold">
            <summary>
            Gets or sets the maximum number of <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s that can be buffered for distribution by the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> before the 
            the oldest buffered <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s are discarded to keep memory consumption in check by avoiding <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> flooding.
            </summary>
            <remarks>Set <see cref="P:TVA.Services.ServiceModel.Messaging.MessageBusService.BufferThreshold"/> to -1 to disable discarding of <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.</remarks>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.MessageBusService.ProcessingMode">
            <summary>
            Gets or sets the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageProcessingMode"/> used by the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> for processing <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> distribution.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.ClientInfo">
            <summary>
            Represents information about a client connected to the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> to produce/consume <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.ClientInfo.SessionId">
            <summary>
            Gets or sets the session identifier of the client.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.ClientInfo.ConnectedAt">
            <summary>
            Gets or sets the UTC <see cref="T:System.DateTime"/> when the client connected to the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.ClientInfo.MessagesProduced">
            <summary>
            Gets or sets the total number of <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s produced by the client.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.ClientInfo.MessagesConsumed">
            <summary>
            Gets or sets the total number of <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s consumed by the client.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.ClientInfo.OperationContext">
            <summary>
            Gets or sets the <see cref="F:TVA.Services.ServiceModel.Messaging.ClientInfo.OperationContext"/> object of the client.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.ClientInfo.#ctor(System.ServiceModel.OperationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceModel.Messaging.ClientInfo"/> class.
            </summary>
            <param name="context">An <see cref="F:TVA.Services.ServiceModel.Messaging.ClientInfo.OperationContext"/> object of the client.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.ClientInfo.Equals(System.Object)">
            <summary>
            Determines if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:TVA.Services.ServiceModel.Messaging.ClientInfo"/> object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:TVA.Services.ServiceModel.Messaging.ClientInfo"/> object.</param>
            <returns>true if both <see cref="T:System.Object"/>s  are equal; otherwise false.</returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.ClientInfo.GetHashCode">
            <summary>
            Gets a hash value for the current <see cref="T:TVA.Services.ServiceModel.Messaging.ClientInfo"/> object.
            </summary>
            <returns>An <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ServiceState">
            <summary>
            Indicates the state of a Windows Service.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceState.Started">
            <summary>
            Service has started.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceState.Stopped">
            <summary>
            Service has stopped.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceState.Paused">
            <summary>
            Service has paused.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceState.Resumed">
            <summary>
            Service has resumed.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceState.Shutdown">
            <summary>
            Service has shutdown.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.UpdateType">
            <summary>
            Indicates the type of service update.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.UpdateType.Information">
            <summary>
            Update is informational.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.UpdateType.Warning">
            <summary>
            Update is a warning message.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.UpdateType.Alarm">
            <summary>
            Update is an alarm message.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ServiceHelper">
            <summary>
            Component that provides added functionality to a Windows Service.
            </summary>
            <seealso cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ServiceResponse"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientInfo"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientRequest"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultLogStatusUpdates">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.LogStatusUpdates"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultMaxStatusUpdatesLength">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.MaxStatusUpdatesLength"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultMaxStatusUpdatesFrequency">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.MaxStatusUpdatesFrequency"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultMonitorServiceHealth">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.MonitorServiceHealth"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultHealthMonitorInterval">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.HealthMonitorInterval"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultRequestHistoryLimit">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RequestHistoryLimit"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultSupportTelnetSessions">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.SupportTelnetSessions"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultSupportSystemCommands">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.SupportSystemCommands"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultSecureRemoteInteractions">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.SecureRemoteInteractions"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultPersistSettings">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.PersistSettings"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceHelper.DefaultSettingsCategory">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.SettingsCategory"/> property.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> class.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> class.
            </summary>
            <param name="container"><see cref="T:System.ComponentModel.IContainer"/> object that contains the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.Initialize">
            <summary>
            Initializes the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
            <remarks>
            <see cref="M:TVA.Services.ServiceProcess.ServiceHelper.Initialize"/> is to be called by user-code directly only if the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> 
            object is not consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.BeginInit">
            <summary>
            Performs necessary operations before the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.Services.ServiceProcess.ServiceHelper.BeginInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.EndInit">
            <summary>
            Performs necessary operations after the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.Services.ServiceProcess.ServiceHelper.EndInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.SaveSettings">
            <summary>
            Saves settings of the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> to the config file if the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Services.ServiceProcess.ServiceHelper.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.SaveSettings(System.Boolean)">
            <summary>
            Saves settings of the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> to the config file if the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.PersistSettings"/> property is set to true.
            </summary>
            <param name="includeServiceComponents">A boolean value that indicates whether the settings of <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ServiceComponents"/> are to be saved.</param>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Services.ServiceProcess.ServiceHelper.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.LoadSettings">
            <summary>
            Loads saved settings of the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> from the config file if the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Services.ServiceProcess.ServiceHelper.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.LoadSettings(System.Boolean)">
            <summary>
            Loads saved settings of the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> from the config file if the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.PersistSettings"/> property is set to true.
            </summary>
            <param name="includeServiceComponents">A boolean value that indicates whether the settings of <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ServiceComponents"/> are to be loaded.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnStart(System.String[])">
            <summary>
            To be called from the <see cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])"/> method of <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/>.
            </summary>
            <param name="args">Array of type <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnStop">
            <summary>
            To be called from the <see cref="M:System.ServiceProcess.ServiceBase.OnStop"/> method of <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnPause">
            <summary>
            To be called from the <see cref="M:System.ServiceProcess.ServiceBase.OnPause"/> method of <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnResume">
            <summary>
            To be called from the <see cref="M:System.ServiceProcess.ServiceBase.OnContinue"/> method of <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnShutdown">
            <summary>
            To be called from the <see cref="M:System.ServiceProcess.ServiceBase.OnShutdown"/> method of <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.AddProcess(System.Action{System.String,System.Object[]},System.String)">
            <summary>
            Adds a new <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> to the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
            <param name="processExecutionMethod">The <see cref="T:System.Delegate"/> to be invoked the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> is started.</param>
            <param name="processName">Name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> being added.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.AddProcess(System.Action{System.String,System.Object[]},System.String,System.Object[])">
            <summary>
            Adds a new <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> to the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
            <param name="processExecutionMethod">The <see cref="T:System.Delegate"/> to be invoked the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> is started.</param>
            <param name="processName">Name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> being added.</param>
            <param name="processArguments">Arguments to be passed in to the <paramref name="processExecutionMethod"/> during execution.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.AddScheduledProcess(System.Action{System.String,System.Object[]},System.String,System.String)">
            <summary>
            Adds a new <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> to the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> that executes on a schedule.
            </summary>
            <param name="processExecutionMethod">The <see cref="T:System.Delegate"/> to be invoked the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> is started.</param>
            <param name="processName">Name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> being added.</param>
            <param name="processSchedule"><see cref="T:TVA.Scheduling.Schedule"/> for the execution of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.AddScheduledProcess(System.Action{System.String,System.Object[]},System.String,System.Object[],System.String)">
            <summary>
            Adds a new <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> to the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> that executes on a schedule.
            </summary>
            <param name="processExecutionMethod">The <see cref="T:System.Delegate"/> to be invoked the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> is started.</param>
            <param name="processName">Name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> being added.</param>
            <param name="processArguments">Arguments to be passed in to the <paramref name="processExecutionMethod"/> during execution.</param>
            <param name="processSchedule"><see cref="T:TVA.Scheduling.Schedule"/> for the execution of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.ScheduleProcess(System.String,System.String)">
            <summary>
            Schedules an existing <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> for automatic execution.
            </summary>
            <param name="processName">Name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> to be scheduled.</param>
            <param name="scheduleRule">Rule that defines the execution pattern of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.ScheduleProcess(System.String,System.String,System.Boolean)">
            <summary>
            Schedules an existing <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> for automatic execution.
            </summary>
            <param name="processName">Name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> to be scheduled.</param>
            <param name="scheduleRule">Rule that defines the execution pattern of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.</param>
            <param name="updateExistingSchedule">true if the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> is to be re-scheduled; otherwise false.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.SendResponse(TVA.Services.ServiceProcess.ServiceResponse)">
            <summary>
            Sends the specified <paramref name="response"/> to all <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemoteClients"/>.
            </summary>
            <param name="response">The <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/> to be sent to all <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemoteClients"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.SendResponse(System.Guid,TVA.Services.ServiceProcess.ServiceResponse)">
            <summary>
            Sends the specified <paramref name="response"/> to the specified <paramref name="client"/> only.
            </summary>
            <param name="client">ID of the client to whom the <paramref name="response"/> is to be sent.</param>
            <param name="response">The <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/> to be sent to the <paramref name="client"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.UpdateStatus(TVA.Services.ServiceProcess.UpdateType,System.String,System.Object[])">
            <summary>
            Provides a status update to all <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemoteClients"/>.
            </summary>
            <param name="message">Text message to be transmitted to all <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemoteClients"/>.</param>
            <param name="type">One of the <see cref="T:TVA.Services.ServiceProcess.UpdateType"/> values.</param>
            <param name="args">Arguments to be used for formatting the <paramref name="message"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.UpdateStatus(System.Guid,TVA.Services.ServiceProcess.UpdateType,System.String,System.Object[])">
            <summary>
            Provides a status update to the specified <paramref name="client"/>.
            </summary>
            <param name="client">ID of the client to whom the <paramref name="message"/> is to be sent.</param>
            <param name="type">One of the <see cref="T:TVA.Services.ServiceProcess.UpdateType"/> values.</param>
            <param name="message">Text message to be transmitted to the <paramref name="client"/>.</param>
            <param name="args">Arguments to be used for formatting the <paramref name="message"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.FindProcess(System.String)">
            <summary>
            Returns the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> for the specified <paramref name="processName"/>.
            </summary>
            <param name="processName">Name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> to be retrieved.</param>
            <returns><see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> object if found; otherwise null.</returns>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.FindConnectedClient(System.Guid)">
            <summary>
            Returns the <see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> object for the specified <paramref name="clientID"/>.
            </summary>
            <param name="clientID">ID of the client whose <see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> object is to be retrieved.</param>
            <returns><see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> object if found; otherwise null.</returns>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.FindClientRequestHandler(System.String)">
            <summary>
            Returns the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> object for the specified <paramref name="handlerCommand"/>.
            </summary>
            <param name="handlerCommand">Request type whose <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> object is to be retrieved.</param>
            <returns><see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> object if found; otherwise null.</returns>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnServiceStarting(System.String[])">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceStarting"/> event.
            </summary>
            <param name="args">Arguments to be sent to <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceStarting"/> event.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnServiceStarted">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceStarted"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnServiceStopping">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceStopping"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnServiceStopped">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceStopped"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnServicePausing">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ServicePausing"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnServicePaused">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ServicePaused"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnServiceResuming">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceResuming"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnServiceResumed">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceResumed"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnSystemShutdown">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.SystemShutdown"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnReceivedClientRequest(TVA.Services.ServiceProcess.ClientRequest,TVA.Services.ServiceProcess.ClientInfo)">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ReceivedClientRequest"/> event.
            </summary>
            <param name="request">The <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> that was received.</param>
            <param name="requestSender">The <see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> object of the <paramref name="request"/> sender.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.OnProcessStateChanged(System.String,TVA.Services.ServiceProcess.ServiceProcessState)">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceHelper.ProcessStateChanged"/> event.
            </summary>
            <param name="processName">Name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> whose state changed.</param>
            <param name="processState">New <see cref="T:TVA.Services.ServiceProcess.ServiceProcessState"/> of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceHelper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceStarting">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/> is starting.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceStarted">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/> has started.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceStopping">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/> is stopping.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceStopped">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/> has stopped.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ServicePausing">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/> is pausing.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ServicePaused">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/> has paused.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceResuming">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/> is resuming.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ServiceResumed">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/> has resumed.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.SystemShutdown">
            <summary>
            Occurs when the system is being shutdown.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ReceivedClientRequest">
            <summary>
            Occurs when a request is received from one of the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemoteClients"/>.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`2.Argument1"/> is the ID of the remote client that sent the request.<br/>
            <see cref="F:TVA.EventArgs`2.Argument2"/> is the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> sent by the remote client.
            </remarks>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceHelper.ProcessStateChanged">
            <summary>
            Occurs when the state of a defiend <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> changes.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`2.Argument1"/> is the <see cref="P:TVA.Services.ServiceProcess.ServiceProcess.Name"/>.<br/>
            <see cref="F:TVA.EventArgs`2.Argument2"/> is the <see cref="P:TVA.Services.ServiceProcess.ServiceProcess.CurrentState"/>
            </remarks>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.LogStatusUpdates">
            <summary>
            Gets or sets a boolean value that indicates whether messages sent using <see cref="M:TVA.Services.ServiceProcess.ServiceHelper.UpdateStatus(TVA.Services.ServiceProcess.UpdateType,System.String,System.Object[])"/> 
            or <see cref="M:TVA.Services.ServiceProcess.ServiceHelper.UpdateStatus(System.Guid,TVA.Services.ServiceProcess.UpdateType,System.String,System.Object[])"/> are to be logged to the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.StatusLog"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.MaxStatusUpdatesLength">
            <summary>
            Gets or sets the maximum numbers of characters allowed in update status messages without getting suppressed from being displayed.
            </summary>
            <exception cref="T:System.ArgumentException">The value being assigned is negative or zero.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.MaxStatusUpdatesFrequency">
            <summary>
            Gets or sets the maximum number of status update messages that can be issued in a second without getting suppressed from being displayed.
            </summary>
            <exception cref="T:System.ArgumentException">The value being assigned is negative or zero.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.MonitorServiceHealth">
            <summary>
            Gets or sets a boolean value that indicates whether the health of the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/> is to be monitored.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.HealthMonitorInterval">
            <summary>
            Gets or sets the interval, in seconds, over which to sample the performance monitor for health statistics.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.RequestHistoryLimit">
            <summary>
            Gets or sets the maximum number of <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> entries to be maintained in the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ClientRequestHistory"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value being assigned is zero or negative.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.SupportTelnetSessions">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> will have support for remote telnet-like sessions.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.SupportSystemCommands">
            <summary>
            Gets or sets a boolean value that indicates whether <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> commands will have support for system-level access (-system switch).
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.SecureRemoteInteractions">
            <summary>
            Gets or sets a boolean value that indicates whether <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> will secure remote interactions from <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.PersistSettings">
            <summary>
            Gets or sets a boolean value that indicates whether the settings of <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> are to be saved to the config file.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.SettingsCategory">
            <summary>
            Gets or sets the category under which the settings of <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> are to be saved to the config file 
            if the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService">
            <summary>
            Gets or sets the <see cref="T:System.ServiceProcess.ServiceBase"/> to which the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> will provided added functionality.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.RemotingServer">
            <summary>
            Gets or sets the <see cref="T:TVA.Communication.ServerBase"/> component used for communicating with <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemoteClients"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.ProcessScheduler">
            <summary>
            Gets the <see cref="T:TVA.Scheduling.ScheduleManager"/> component used for scheduling defined <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.StatusLog">
            <summary>
            Gets the <see cref="T:TVA.IO.LogFile"/> component used for logging status messages to a text file.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.ErrorLogger">
            <summary>
            Gets the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ErrorLogger"/> component used for logging errors encountered in the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> is currently enabled.
            </summary>
            <remarks>
            <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.Enabled"/> property is not be set by user-code directly.
            </remarks>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.Processes">
            <summary>
            Gets a list of <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> defined in the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.RemoteClients">
            <summary>
            Gets a list of <see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> for remote clients connected to the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemotingServer"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.ClientRequestHistory">
            <summary>
            Gets a list of <see cref="T:TVA.Services.ServiceProcess.ClientRequestInfo"/> for requests made by <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemoteClients"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.ClientRequestHandlers">
            <summary>
            Gets a list of <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> registered for handling requests from <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemoteClients"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.ServiceComponents">
            <summary>
            Gets a list of components that implement the <see cref="T:TVA.ISupportLifecycle"/> interface used by the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.PerformanceMonitor">
            <summary>
            Gets the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.PerformanceMonitor"/> object used for monitoring the health of the <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ParentService"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.Name">
            <summary>
            Gets the unique identifier of the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceHelper.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ClientRequest">
            <summary>
            Represents a request sent by <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> to <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientHelper"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> class.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> class.
            </summary>
            <param name="command">Command text for the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientRequest.#ctor(System.String,TVA.Console.Arguments)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> class.
            </summary>
            <param name="command">Command text for the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/>.</param>
            <param name="arguments"><see cref="P:TVA.Services.ServiceProcess.ClientRequest.Arguments"/> for the <paramref name="command"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientRequest.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> that represents the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/>.</returns>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientRequest.Parse(System.String)">
            <summary>
            Converts <see cref="T:System.String"/> to a <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/>.
            </summary>
            <param name="text">Text to be converted to a <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/>.</param>
            <returns><see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> object if parsing is successful; otherwise null.</returns>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequest.Command">
            <summary>
            Gets or sets the command text for the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is either a null or empty string.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequest.Arguments">
            <summary>
            Gets or sets the <see cref="P:TVA.Services.ServiceProcess.ClientRequest.Arguments"/> for the <see cref="P:TVA.Services.ServiceProcess.ClientRequest.Command"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequest.Attachments">
            <summary>
            Gets a list of attachments for the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/>.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ClientHelper">
            <summary>
            Component that provides client-side functionality to <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ClientHelper.DefaultUsername">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ClientHelper.Username"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ClientHelper.DefaultPassword">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ClientHelper.Password"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ClientHelper.DefaultPersistSettings">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ClientHelper.PersistSettings"/> property.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ClientHelper.DefaultSettingsCategory">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Services.ServiceProcess.ClientHelper.SettingsCategory"/> property.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> class.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> class.
            </summary>
            <param name="container"><see cref="T:System.ComponentModel.IContainer"/> object that contains the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.Initialize">
            <summary>
            Initializes the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>.
            </summary>
            <remarks>
            <see cref="M:TVA.Services.ServiceProcess.ClientHelper.Initialize"/> is to be called by user-code directly only if the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> is not consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.BeginInit">
            <summary>
            Performs necessary operations before the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.Services.ServiceProcess.ClientHelper.BeginInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.EndInit">
            <summary>
            Performs necessary operations after the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.Services.ServiceProcess.ClientHelper.EndInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.SaveSettings">
            <summary>
            Saves settings for the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> to the config file if the <see cref="P:TVA.Services.ServiceProcess.ClientHelper.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Services.ServiceProcess.ClientHelper.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.LoadSettings">
            <summary>
            Loads saved settings for the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> from the config file if the <see cref="P:TVA.Services.ServiceProcess.ClientHelper.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Services.ServiceProcess.ClientHelper.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.Connect">
            <summary>
            Connects <see cref="P:TVA.Services.ServiceProcess.ClientHelper.RemotingClient"/> to <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemotingServer"/> and wait until authentication is complete.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.Disconnect">
            <summary>
            Disconnects <see cref="P:TVA.Services.ServiceProcess.ClientHelper.RemotingClient"/> from <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.RemotingServer"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.SendRequest(System.String)">
            <summary>
            Sends a request to the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> using <see cref="P:TVA.Services.ServiceProcess.ClientHelper.RemotingClient"/>.
            </summary>
            <param name="request">Request text to be sent.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.SendRequest(TVA.Services.ServiceProcess.ClientRequest)">
            <summary>
            Sends a request to the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> using <see cref="P:TVA.Services.ServiceProcess.ClientHelper.RemotingClient"/>.
            </summary>
            <param name="request"><see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> object to be sent.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.OnReceivedServiceUpdate(TVA.Services.ServiceProcess.UpdateType,System.String)">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ClientHelper.ReceivedServiceUpdate"/> event.
            </summary>
            <param name="type">One of the <see cref="T:TVA.Services.ServiceProcess.UpdateType"/> values.</param>
            <param name="update">Update message received.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.OnReceivedServiceResponse(TVA.Services.ServiceProcess.ServiceResponse)">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ClientHelper.ReceivedServiceResponse"/> event.
            </summary>
            <param name="response"><see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/> received.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.OnServiceStateChanged(TVA.ObjectState{TVA.Services.ServiceProcess.ServiceState})">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ClientHelper.ServiceStateChanged"/> event.
            </summary>
            <param name="state">New <see cref="T:TVA.Services.ServiceProcess.ServiceState"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.OnProcessStateChanged(TVA.ObjectState{TVA.Services.ServiceProcess.ServiceProcessState})">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ClientHelper.ProcessStateChanged"/> event.
            </summary>
            <param name="state">New <see cref="T:TVA.Services.ServiceProcess.ServiceProcessState"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.OnAuthenticationSuccess">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ClientHelper.AuthenticationSuccess"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.OnAuthenticationFailure">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ClientHelper.AuthenticationFailure"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.OnTelnetSessionEstablished">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ClientHelper.TelnetSessionEstablished"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.OnTelnetSessionTerminated">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ClientHelper.TelnetSessionTerminated"/> event.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientHelper.PretendRequest(System.String)">
            <summary>
            Returns an <see cref="T:TVA.Services.ServiceProcess.ClientRequestInfo"/> object for the specified <paramref name="requestCommand"/> that can be used 
            to invoke <see cref="P:TVA.Services.ServiceProcess.ServiceHelper.ClientRequestHandlers"/> manually as if the request was sent by a <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> remotely.
            </summary>
            <param name="requestCommand">Command for which an <see cref="T:TVA.Services.ServiceProcess.ClientRequestInfo"/> object is to be created.</param>
            <returns>An <see cref="T:TVA.Services.ServiceProcess.ClientRequestInfo"/> object.</returns>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ClientHelper.ReceivedServiceUpdate">
            <summary>
            Occurs when a status update is received from the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ClientHelper.ReceivedServiceResponse">
            <summary>
            Occurs when a custom <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/> is received from the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ClientHelper.ServiceStateChanged">
            <summary>
            Occurs when the state of the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> is changed.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ClientHelper.ProcessStateChanged">
            <summary>
            Occurs when the state of a <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> is changed.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ClientHelper.AuthenticationSuccess">
            <summary>
            Occurs when the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> successfully authenticates the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ClientHelper.AuthenticationFailure">
            <summary>
            Occurs when the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> fails to authenticate the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>.
            </summary>
            <remarks>
            Set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <b>true</b> to continue with connection attempts even after authentication fails. 
            This can be useful for re-authenticating the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> using different <see cref="P:TVA.Services.ServiceProcess.ClientHelper.Username"/> and <see cref="P:TVA.Services.ServiceProcess.ClientHelper.Password"/>.
            </remarks>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ClientHelper.TelnetSessionEstablished">
            <summary>
            Occurs when a telnet session has been established.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ClientHelper.TelnetSessionTerminated">
            <summary>
            Occurs when a telnet session has been terminated.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientHelper.RemotingClient">
            <summary>
            Gets or sets the <see cref="T:TVA.Communication.ClientBase"/> object used for communicating with the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientHelper.Username">
            <summary>
            Gets or sets the username of the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>'s user to be used for authenticating with the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being specified is a null string.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientHelper.Password">
            <summary>
            Gets or sets the password of the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>'s user to be used for authenticating with the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being specified is a null string.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientHelper.PersistSettings">
            <summary>
            Gets or sets a boolean value that indicates whether the settings of <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> are to be saved to the config file.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientHelper.SettingsCategory">
            <summary>
            Gets or sets the category under which the settings of <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> are to be saved to the config file if the <see cref="P:TVA.Services.ServiceProcess.ClientHelper.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientHelper.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> is currently enabled.
            </summary>
            <remarks>
            <see cref="P:TVA.Services.ServiceProcess.ClientHelper.Enabled"/> property is not be set by user-code directly.
            </remarks>
        </member>
        <member name="T:TVA.Services.ServiceModel.SerializationFormat">
            <summary>
            Indicates the format of <see cref="T:System.Object"/> serialization or deserialization.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.SerializationFormat.Json">
            <summary>
            <see cref="T:System.Object"/> is serialized or deserialized using <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/> to JSON (JavaScript Object Notation) format.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.SerializationFormat.PoxAsmx">
            <summary>
            <see cref="T:System.Object"/> is serialized or deserialized using <see cref="T:System.Xml.Serialization.XmlSerializer"/> to ASMX (.NET Web Service) compatible XML (eXtensible Markup Language) format.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.SerializationFormat.PoxRest">
            <summary>
            <see cref="T:System.Object"/> is serialized or deserialized using <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> to REST (Representational State Transfer) compatible XML (eXtensible Markup Language) format.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.Serialization">
            <summary>
            Helper class to serialize and deserialize <see cref="T:System.Object"/>s to web service compatible <see cref="T:TVA.Services.ServiceModel.SerializationFormat"/>s.
            </summary>
            <seealso cref="T:TVA.Services.ServiceModel.SerializationFormat"/>
        </member>
        <member name="M:TVA.Services.ServiceModel.Serialization.Serialize``1(System.IO.Stream@,``0,TVA.Services.ServiceModel.SerializationFormat)">
            <summary>
            Serializes an <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the <paramref name="serializableObject"/>.</typeparam>
            <param name="serializedOutput"><see cref="T:System.IO.Stream"/> where the <paramref name="serializableObject"/> is to be serialized.</param>
            <param name="serializableObject"><see cref="T:System.Object"/> to be serialized.</param>
            <param name="serializationFormat"><see cref="T:TVA.Services.ServiceModel.SerializationFormat"/> in which the <paramref name="serializableObject"/> is to be serialized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serializedOutput"/> or <paramref name="serializableObject"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">Specified <paramref name="serializationFormat"/> is not supported.</exception>
        </member>
        <member name="M:TVA.Services.ServiceModel.Serialization.Deserialize``1(System.IO.Stream,TVA.Services.ServiceModel.SerializationFormat)">
            <summary>
            Deserializes a serialized <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the deserialized <see cref="T:System.Object"/> to be returned.</typeparam>
            <param name="serializedObject"><see cref="T:System.IO.Stream"/> contaning the serialized <see cref="T:System.Object"/> that is to be deserialized.</param>
            <param name="serializationFormat"><see cref="T:TVA.Services.ServiceModel.SerializationFormat"/> in which the <paramref name="serializedObject"/> was serialized.</param>
            <returns>The deserialized <see cref="T:System.Object"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serializedObject"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">Specified <paramref name="serializationFormat"/> is not supported.</exception>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.RegistrationType">
            <summary>
            Indicates the intent of the <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/>.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationType.Produce">
            <summary>
            Register to produce <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationType.Consume">
            <summary>
            Register to consume <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest">
            <summary>
            Represents a request to register with the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> to produce or consume <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.RegistrationRequest.RegistrationType">
            <summary>
            Gets or sets the <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationType">type</see> of this <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.RegistrationRequest.MessageType">
            <summary>
            Gets or sets the <see cref="P:TVA.Services.ServiceModel.Messaging.Message.Type"/> of the <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> this <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/> is for.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.RegistrationRequest.MessageName">
            <summary>
            Gets or sets the <see cref="P:TVA.Services.ServiceModel.Messaging.Message.Name"/> of the <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> this <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/> is for.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo">
            <summary>
            Represents information about a registration with the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> to produce/consume <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.MessageType">
            <summary>
            Gets or sets the type for <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s being produced/consumed.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.MessageName">
            <summary>
            Gets or sets the name for <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s being produced/consumed. 
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.MessagesReceived">
            <summary>
            Gets or sets the total number of <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s received.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.MessagesProcessed">
            <summary>
            Gets or sets the total number of <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s distributed.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.Producers">
            <summary>
            Gets or sets the list of clients producing the <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.Consumers">
            <summary>
            Gets or sets the list of clients consuming the <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.LatestMessage">
            <summary>
            Gets or sets the latest <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> distributed to the subscribers.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.ProducersLock">
            <summary>
            Gets the <see cref="T:System.Threading.ReaderWriterLockSlim"/> to be used for synchronized access to <see cref="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.Producers"/>.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.ConsumersLock">
            <summary>
            Gets the <see cref="T:System.Threading.ReaderWriterLockSlim"/> to be used for synchronized access to <see cref="F:TVA.Services.ServiceModel.Messaging.RegistrationInfo.Consumers"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.RegistrationInfo.#ctor(TVA.Services.ServiceModel.Messaging.RegistrationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo"/> class.
            </summary>
            <param name="request">An <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationRequest"/> object.</param>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.RegistrationInfo.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.RegistrationInfo.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo"/> object.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.RegistrationInfo.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Services.ServiceModel.Messaging.RegistrationInfo"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.NamespaceDoc">
            <summary>
            Contains WCF web services that facilitate secure inter-process messaging.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.NamespaceDoc">
            <summary>
            Contains classes used to simplify and standardize development and operation of Windows services that are remotely manageable.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ClientInfo">
            <summary>
            Represents information about a client using <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> for connecting to a Windows Service that uses <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
            <remarks>
            <see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> can be serialized and deserialized using <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> only.
            </remarks>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientHelper"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> class.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientInfo.#ctor(TVA.Services.ServiceProcess.ClientHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> class.
            </summary>
            <param name="parent">An <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/> object.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientInfo.SetClientUser(System.Security.Principal.IPrincipal)">
            <summary>
            Updates the <see cref="P:TVA.Services.ServiceProcess.ClientInfo.ClientUser"/>.
            </summary>
            <param name="user">New <see cref="T:System.Security.Principal.IPrincipal"/> object to be assigned to <see cref="P:TVA.Services.ServiceProcess.ClientInfo.ClientUser"/>.</param>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientInfo.ClientID">
            <summary>
            Gets the identifier of the remote client application.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientInfo.ClientType">
            <summary>
            Gets the <see cref="T:TVA.ApplicationType"/> of the remote client application.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientInfo.ClientName">
            <summary>
            Gets the friendly name of the remote client application.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientInfo.ClientUser">
            <summary>
            Gets the <see cref="T:System.Security.Principal.IPrincipal"/> of the remote client application's user.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientInfo.ClientUserCredentials">
            <summary>
            Gets the credentials in 'username:password' format for authenticating the remote client application's user if a valid <see cref="P:TVA.Services.ServiceProcess.ClientInfo.ClientUser"/> is not available.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientInfo.MachineName">
            <summary>
            Gets the name of the machine running the remote client application.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientInfo.ConnectedAt">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> when the remote client application connected to the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.IMessageBusServiceCallback">
            <summary>
            Defines a callback contract that must be implemented by clients of <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/> for receiving <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>s.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.IMessageBusServiceCallback.ProcessMessage(TVA.Services.ServiceModel.Messaging.Message)">
            <summary>
            Invoked when a new <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> is received from the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
            <param name="message"><see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> received from the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.</param>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ServiceResponse">
            <summary>
            Represents a response sent by the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/> to a <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> from the <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>.
            </summary>
            <seealso cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientHelper"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientRequest"/>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/> class.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/> class.
            </summary>
            <param name="type">Type of the <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/> in plain text.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceResponse.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/> class.
            </summary>
            <param name="type">Type of the <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/> in plain-text.</param>
            <param name="message">Message associated with the <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/>.</param>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceResponse.Type">
            <summary>
            Gets or sets the plain-text type of the <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is either a null or empty string.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceResponse.Message">
            <summary>
            Gets or sets the palin-text message associated with the <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceResponse.Attachments">
            <summary>
            Gets a list of serializable attachments of the <see cref="T:TVA.Services.ServiceProcess.ServiceResponse"/>.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.RecoverAction">
            <summary>
            Defines the recover action to be performed upon service failure.
            </summary>
            <remarks>
            Enum values correspond to Win32 equivalents.
            </remarks>
        </member>
        <member name="F:TVA.Services.ServiceProcess.RecoverAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.RecoverAction.Restart">
            <summary>
            Restart the service.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.RecoverAction.Reboot">
            <summary>
            Reboot the computer.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.RecoverAction.RunCommand">
            <summary>
            Run a command.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ServiceInstallerEx">
            <summary>
            Defines an extended service installer class that can define service failure actions at install time.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceInstallerEx.#ctor">
            <summary>
            Creates a new <see cref="T:TVA.Services.ServiceProcess.ServiceInstallerEx"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceInstallerEx.DefineRecoverAction(TVA.Services.ServiceProcess.RecoverAction,System.Int32)">
            <summary>
            Defines a new recover action to be performed upon service failure.
            </summary>
            <param name="recoverAction"><see cref="T:TVA.Services.ServiceProcess.RecoverAction"/> to execute upon service failure.</param>
            <param name="delay">The time to wait before performing the specified <paramref name="recoverAction"/>, in milliseconds.</param>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceInstallerEx.FailResetPeriod">
            <summary>
            Sets the time after which to reset the failure count to zero if there are no failures, in seconds.
            Specify <see cref="F:System.Threading.Timeout.Infinite"/> to indicate that this value should never be reset.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceInstallerEx.FailRebootMessage">
            <summary>
            Sets the service fail reboot message.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceInstallerEx.FailRunCommand">
            <summary>
            Sets the service fail run command.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceInstallerEx.ExecuteActionsOnNonCrashErrors">
            <summary>
            Sets flag that determines when failure actions are to be executed.
            </summary>
            <remarks>
            <para>
            If this member is <c>true</c> and the service has configured failure actions, the failure actions are queued if the service process
            terminates without reporting a status of SERVICE_STOPPED or if it enters the SERVICE_STOPPED state but the exit code returned in the
            SERVICE_STATUS structure is not ERROR_SUCCESS (0).
            </para>
            <para>
            If this member is <c>false</c> and the service has configured failure actions, the failure actions are queued only if the service
            terminates without reporting a status of SERVICE_STOPPED.
            </para>
            <para>
            This setting is ignored unless the service has configured failure actions.
            </para>
            </remarks>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceInstallerEx.StartOnInstall">
            <summary>
            Sets the boolean value to configure the service to start after it is installed.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceInstallerEx.StartTimeout">
            <summary>
            Sets the service start timeout in milliseconds.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.SecurityPolicy">
            <summary>
            Represents an <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy">authorization policy</see> that can be used by WCF services for enabling role-based security.
            </summary>
            <example>
            Common config file entries:
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <configuration>
              <configSections>
                <section name="categorizedSettings" type="TVA.Configuration.CategorizedSettingsSection, TVA.Core" />
              </configSections>
              <categorizedSettings>
                <securityProvider>
                  <add name="ApplicationName" value="" description="Name of the application being secured as defined in the backend security datastore."
                    encrypted="false" />
                  <add name="ConnectionString" value="" description="Connection string to be used for connection to the backend security datastore."
                    encrypted="false" />
                  <add name="ProviderType" value="TVA.Security.LdapSecurityProvider, TVA.Security"
                    description="The type to be used for enforcing security." encrypted="false" />
                  <add name="IncludedResources" value="*/*.*=*" description="Semicolon delimited list of resources to be secured along with role names."
                    encrypted="false" />
                  <add name="ExcludedResources" value="*/SecurityService.svc*"
                    description="Semicolon delimited list of resources to be excluded from being secured."
                    encrypted="false" />
                  <add name="NotificationSmtpServer" value="localhost" description="SMTP server to be used for sending out email notification messages."
                    encrypted="false" />
                  <add name="NotificationSenderEmail" value="sender@company.com" description="Email address of the sender of email notification messages." 
                    encrypted="false" />
                </securityProvider>
                <activeDirectory>
                  <add name="PrivilegedDomain" value="" description="Domain of privileged domain user account."
                    encrypted="false" />
                  <add name="PrivilegedUserName" value="" description="Username of privileged domain user account."
                    encrypted="false" />
                  <add name="PrivilegedPassword" value="" description="Password of privileged domain user account."
                    encrypted="true" />
                </activeDirectory>
              </categorizedSettings>
            </configuration>
            ]]>
            </code>
            Internal WCF service configuration:
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <configuration>
              <system.serviceModel>
                <services>
                  <service name="WcfService1.Service1" behaviorConfiguration="serviceBehavior">
                    <endpoint address="" contract="WcfService1.IService1" binding="webHttpBinding" 
                              bindingConfiguration="endpointBinding" behaviorConfiguration="endpointBehavior" />
                  </service>
                </services>
                <behaviors>
                  <endpointBehaviors>
                    <behavior name="endpointBehavior">
                      <webHttp/>
                    </behavior>
                  </endpointBehaviors>
                  <serviceBehaviors>
                    <behavior name="serviceBehavior">
                      <serviceAuthorization principalPermissionMode="Custom">
                        <authorizationPolicies>
                          <add policyType="TVA.Web.SecurityPolicy, TVA.Web" />
                        </authorizationPolicies>
                      </serviceAuthorization>
                    </behavior>
                  </serviceBehaviors>
                </behaviors>
                <bindings>
                  <webHttpBinding>
                    <binding name="endpointBinding">
                      <security mode="TransportCredentialOnly">
                        <transport clientCredentialType="Windows"/>
                      </security>
                    </binding>
                  </webHttpBinding>
                </bindings>
                <serviceHostingEnvironment aspNetCompatibilityEnabled="false" />
              </system.serviceModel>
            </configuration>
            ]]>
            </code>
            External WCF service configuration:
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <configuration>
              <system.web>
                <httpModules>
                  <add name="SecurityModule" type="TVA.Web.SecurityModule, TVA.Web" />
                </httpModules>
              </system.web>
              <system.serviceModel>
                <services>
                  <service name="WcfService1.Service1" behaviorConfiguration="serviceBehavior">
                    <endpoint address="" contract="WcfService1.IService1" binding="webHttpBinding" 
                              bindingConfiguration="endpointBinding" behaviorConfiguration="endpointBehavior"/>
                  </service>
                </services>
                <behaviors>
                  <endpointBehaviors>
                    <behavior name="endpointBehavior">
                      <webHttp/>
                    </behavior>
                  </endpointBehaviors>
                  <serviceBehaviors>
                    <behavior name="serviceBehavior">
                      <serviceAuthorization principalPermissionMode="Custom">
                        <authorizationPolicies>
                          <add policyType="TVA.Web.SecurityPolicy, TVA.Web" />
                        </authorizationPolicies>
                      </serviceAuthorization>
                    </behavior>
                  </serviceBehaviors>
                </behaviors>
                <bindings>
                  <webHttpBinding>
                    <binding name="endpointBinding">
                      <security mode="None" />
                    </binding>
                  </webHttpBinding>
                </bindings>
                <serviceHostingEnvironment aspNetCompatibilityEnabled="true" />
              </system.serviceModel>
            </configuration>
            ]]>
            </code>
            </example>
            <seealso cref="T:TVA.Security.ISecurityProvider"/>
        </member>
        <member name="M:TVA.Services.ServiceModel.SecurityPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceModel.SecurityPolicy"/> class.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceModel.SecurityPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Evaluates the <paramref name="evaluationContext"/> and initializes security.
            </summary>
            <param name="evaluationContext">An <see cref="T:System.IdentityModel.Policy.EvaluationContext"/> object.</param>
            <param name="state">Custom state of the <see cref="T:TVA.Services.ServiceModel.SecurityPolicy"/>.</param>
            <returns></returns>
        </member>
        <member name="M:TVA.Services.ServiceModel.SecurityPolicy.GetResourceName">
            <summary>
            Gets the name of resource being accessed.
            </summary>
            <returns><see cref="P:System.ServiceModel.OperationContext.IncomingMessageHeaders"/>.<see cref="P:System.ServiceModel.Channels.MessageHeaders.To"/>.<see cref="P:System.Uri.PathAndQuery"/> property value.</returns>
        </member>
        <member name="P:TVA.Services.ServiceModel.SecurityPolicy.Id">
            <summary>
            Gets the identifier of this <see cref="T:TVA.Services.ServiceModel.SecurityPolicy"/> instance.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.SecurityPolicy.Issuer">
            <summary>
            Gets a claim set that represents the issuer of this <see cref="T:TVA.Services.ServiceModel.SecurityPolicy"/>.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.NamespaceDoc">
            <summary>
            Contains classes and interfaces that provide the basic infrastructure for writting web services.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ServiceProcessState">
            <summary>
            Indicates the current state of <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceProcessState.Unprocessed">
            <summary>
            <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> has not been started.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceProcessState.Processing">
            <summary>
            <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> is currently executing.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceProcessState.Processed">
            <summary>
            <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> has completed processing.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceProcessState.Aborted">
            <summary>
            <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> was aborted.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceProcess.ServiceProcessState.Exception">
            <summary>
            <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> stopped due to exception.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ServiceProcess">
            <summary>
            Represents a process that executes asynchronously inside a <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
            <seealso cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceProcess.#ctor(System.Action{System.String,System.Object[]},System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> class.
            </summary>
            <param name="executionMethod"><see cref="T:System.Delegate"/> that gets invoked when <see cref="M:TVA.Services.ServiceProcess.ServiceProcess.Start"/> is called.</param>
            <param name="name">Name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.</param>
            <param name="arguments">Arguments to be passed in to the <paramref name="executionMethod"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceProcess.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceProcess.Start">
            <summary>
            Starts the execution of <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceProcess.Start(System.Object[])">
            <summary>
            Starts the execution of <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.
            </summary>
            <param name="arguments">Arguments to be passed in to the <see cref="P:TVA.Services.ServiceProcess.ServiceProcess.ExecutionMethod"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceProcess.Abort">
            <summary>
            Stops the execution of <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> if it executing.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceProcess.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> object.
            </summary>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceProcess.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ServiceProcess.OnStateChanged">
            <summary>
            Raises the <see cref="E:TVA.Services.ServiceProcess.ServiceProcess.StateChanged"/> event.
            </summary>
        </member>
        <member name="E:TVA.Services.ServiceProcess.ServiceProcess.StateChanged">
            <summary>
            Occurs when the <see cref="P:TVA.Services.ServiceProcess.ServiceProcess.CurrentState"/> of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> changes.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceProcess.Name">
            <summary>
            Gets or sets the name of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceProcess.Arguments">
            <summary>
            Gets or sets the arguments to be passed in to the <see cref="P:TVA.Services.ServiceProcess.ServiceProcess.ExecutionMethod"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceProcess.ExecutionMethod">
            <summary>
            Gets or sets the <see cref="T:System.Delegate"/> that gets invoked when <see cref="M:TVA.Services.ServiceProcess.ServiceProcess.Start"/> is called.
            </summary>
            <remarks>
            Argument1 gets the <see cref="P:TVA.Services.ServiceProcess.ServiceProcess.Name"/> of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.<br/>
            Argument2 gets the <see cref="P:TVA.Services.ServiceProcess.ServiceProcess.Arguments"/> of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.
            </remarks>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceProcess.CurrentState">
            <summary>
            Gets the current <see cref="T:TVA.Services.ServiceProcess.ServiceProcessState"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceProcess.ExecutionStartTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> when execution of <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> last started.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceProcess.ExecutionStopTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> when execution of <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> last completed.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceProcess.LastExecutionTime">
            <summary>
            Gets the <see cref="T:TVA.Units.Time"/> taken by the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/> during the last execution.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ServiceProcess.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:TVA.Services.ServiceProcess.ServiceProcess"/>.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ClientRequestInfo">
            <summary>
            Represents information about a <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> sent by <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>.
            </summary>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientInfo"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientRequest"/>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientRequestInfo.#ctor(TVA.Services.ServiceProcess.ClientInfo,TVA.Services.ServiceProcess.ClientRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientRequestInfo"/> class.
            </summary>
            <param name="sender"><see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> object of the <paramref name="request"/> sender.</param>
            <param name="request"><see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> object sent by the <paramref name="sender"/>.</param>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequestInfo.Sender">
            <summary>
            Gets or sets the <see cref="T:TVA.Services.ServiceProcess.ClientInfo"/> object of the <see cref="P:TVA.Services.ServiceProcess.ClientRequestInfo.Request"/> sender.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequestInfo.Request">
            <summary>
            Gets or sets the <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/> object sent by the <see cref="P:TVA.Services.ServiceProcess.ClientRequestInfo.Sender"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequestInfo.ReceivedAt">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> when the <see cref="P:TVA.Services.ServiceProcess.ClientRequestInfo.Request"/> was received from the <see cref="P:TVA.Services.ServiceProcess.ClientRequestInfo.Sender"/>.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.MessageBusSecurityPolicy">
            <summary>
            Represents an <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy">authorization policy</see> that can be used for enabling role-based security on <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
            <example>
            This example shows the required config file entries when securing <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>:
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <configuration>
              <configSections>
                <section name="categorizedSettings" type="TVA.Configuration.CategorizedSettingsSection, TVA.Core" />
              </configSections>
              <categorizedSettings>
                <securityProvider>
                  <add name="ApplicationName" value="" description="Name of the application being secured as defined in the backend security datastore."
                    encrypted="false" />
                  <add name="ConnectionString" value="" description="Connection string to be used for connection to the backend security datastore."
                    encrypted="false" />
                  <add name="ProviderType" value="TVA.Security.LdapSecurityProvider, TVA.Security"
                    description="The type to be used for enforcing security." encrypted="false" />
                  <add name="IncludedResources" value="Topic.Name=*;Queue.Name=*" description="Semicolon delimited list of resources to be secured along with role names."
                    encrypted="false" />
                  <add name="ExcludedResources" value="*/mex;*/Publish;*/GetClients;*/GetQueues;*/GetTopics;*/SecurityService.svc/*"
                    description="Semicolon delimited list of resources to be excluded from being secured."
                    encrypted="false" />
                  <add name="NotificationSmtpServer" value="localhost" description="SMTP server to be used for sending out email notification messages."
                    encrypted="false" />
                  <add name="NotificationSenderEmail" value="sender@company.com" description="Email address of the sender of email notification messages." 
                    encrypted="false" />
                </securityProvider>
                <activeDirectory>
                  <add name="PrivilegedDomain" value="" description="Domain of privileged domain user account."
                    encrypted="false" />
                  <add name="PrivilegedUserName" value="" description="Username of privileged domain user account."
                    encrypted="false" />
                  <add name="PrivilegedPassword" value="" description="Password of privileged domain user account."
                    encrypted="true" />
                </activeDirectory>
              </categorizedSettings>
            </configuration>
            ]]>
            </code>
            </example>
            <seealso cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>
        </member>
        <member name="M:TVA.Services.ServiceModel.Messaging.MessageBusSecurityPolicy.GetResourceName">
            <summary>
            Gets the name of resource being accessed.
            </summary>
            <returns>
            <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>.<see cref="P:TVA.Services.ServiceModel.Messaging.Message.Name"/> property value for <see cref="M:TVA.Services.ServiceModel.Messaging.MessageBusService.Publish(TVA.Services.ServiceModel.Messaging.Message)"/> operations, 
            otherwise <see cref="P:System.ServiceModel.Channels.MessageHeaders.Action"/> property value for all other operations.
            </returns>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.MessageType">
            <summary>
            Indicates how a <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> is distributed by the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.MessageType.Topic">
            <summary>
            <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> is distributed to all of its registered consumers.
            </summary>
        </member>
        <member name="F:TVA.Services.ServiceModel.Messaging.MessageType.Queue">
            <summary>
            <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> is distributed to the first of all its registered consumers.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceModel.Messaging.Message">
            <summary>
            Represents a message that can be used to exchange information between processes using <see cref="T:TVA.Services.ServiceModel.Messaging.MessageBusService"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.Message.Time">
            <summary>
            Gets or sets the <see cref="T:System.DateTime"/> when this <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/> was created.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.Message.Type">
            <summary>
            Gets or sets the <see cref="T:TVA.Services.ServiceModel.Messaging.MessageType">Type</see> of this <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.Message.Name">
            <summary>
            Gets or sets the identifier of this <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.Message.Format">
            <summary>
            Gets or sets the format of the <see cref="P:TVA.Services.ServiceModel.Messaging.Message.Content"/> in this <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceModel.Messaging.Message.Content">
            <summary>
            Gets or sets the actual payload of this <see cref="T:TVA.Services.ServiceModel.Messaging.Message"/>.
            </summary>
        </member>
        <member name="T:TVA.Services.ServiceProcess.ClientRequestHandler">
            <summary>
            Represents a handler for <see cref="T:TVA.Services.ServiceProcess.ClientRequest"/>s sent by <see cref="T:TVA.Services.ServiceProcess.ClientHelper"/>.
            </summary>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientHelper"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ClientRequest"/>
            <seealso cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientRequestHandler.#ctor(System.String,System.String,System.Action{TVA.Services.ServiceProcess.ClientRequestInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> class.
            </summary>
            <param name="requestCommand">Command text that the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> will process.</param>
            <param name="requestDescription">Description of the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/>.</param>
            <param name="handlerMethod"><see cref="T:System.Delegate"/> method that will be invoked for processing the <paramref name="requestCommand"/>.</param>
        </member>
        <member name="M:TVA.Services.ServiceProcess.ClientRequestHandler.#ctor(System.String,System.String,System.Action{TVA.Services.ServiceProcess.ClientRequestInfo},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> class.
            </summary>
            <param name="requestCommand">Command text that the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> will process.</param>
            <param name="requestDescription">Description of the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/>.</param>
            <param name="handlerMethod"><see cref="T:System.Delegate"/> method that will be invoked for processing the <paramref name="requestCommand"/>.</param>
            <param name="isAdvertised">true if the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> is to be published by the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>; otherwise false.</param>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequestHandler.Command">
            <summary>
            Gets the command text that the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> will process.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequestHandler.CommandDescription">
            <summary>
            Gets the description of the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequestHandler.HandlerMethod">
            <summary>
            Gets the <see cref="T:System.Delegate"/> method that gets invoked for processing the <see cref="P:TVA.Services.ServiceProcess.ClientRequestHandler.Command"/>.
            </summary>
        </member>
        <member name="P:TVA.Services.ServiceProcess.ClientRequestHandler.IsAdvertised">
            <summary>
            Gets a boolean value that indicates whether the <see cref="T:TVA.Services.ServiceProcess.ClientRequestHandler"/> will be published by the <see cref="T:TVA.Services.ServiceProcess.ServiceHelper"/>.
            </summary>
        </member>
    </members>
</doc>
