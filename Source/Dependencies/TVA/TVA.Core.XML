<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TVA.Core</name>
    </assembly>
    <members>
        <member name="T:TVA.Xml.XmlExtensions">
            <summary>Defines extension functions related to Xml elements.</summary>
        </member>
        <member name="M:TVA.Xml.XmlExtensions.GetXmlNode(System.Xml.XmlDocument,System.String)">
            <summary>Gets an XML node from given path, creating the entire path if it does not exist.</summary>
            <remarks>This overload just allows the start of the given XML document by using its root element.</remarks>
            <param name="xmlDoc">An <see cref="T:System.Xml.XmlDocument"/> to query.</param>
            <param name="xpath">A <see cref="T:System.String"/> xpath query.</param>
            <returns>An <see cref="T:System.Xml.XmlNode"/> corresponding to the xpath query.</returns>
        </member>
        <member name="M:TVA.Xml.XmlExtensions.GetXmlNode(System.Xml.XmlDocument,System.String,System.Boolean@)">
            <summary>Gets an XML node from given path, creating the entire path if it does not exist.</summary>
            <remarks>
            <para>This overload just allows the start of the given XML document by using its root element.</para>
            <para>Note that the <paramref name="isDirty"/> parameter will be set to True if any items were added to
            the tree.</para>
            </remarks>
            <param name="xmlDoc">An <see cref="T:System.Xml.XmlDocument"/> to query.</param>
            <param name="xpath">A <see cref="T:System.String"/> xpath query.</param>
            <param name="isDirty">A <see cref="T:System.Boolean"/> value indicating if items were added to the tree.</param>
            <returns>An <see cref="T:System.Xml.XmlNode"/> corresponding to the xpath query.</returns>
        </member>
        <member name="M:TVA.Xml.XmlExtensions.GetXmlNode(System.Xml.XmlNode,System.String)">
            <summary>Gets an XML node from given path, creating the entire path if it does not exist.</summary>
            <param name="parentNode">An <see cref="T:System.Xml.XmlNode"/> parent node to query.</param>
            <param name="xpath">A <see cref="T:System.String"/> xpath query.</param>
            <returns>An <see cref="T:System.Xml.XmlNode"/> corresponding to the xpath query.</returns>
        </member>
        <member name="M:TVA.Xml.XmlExtensions.GetXmlNode(System.Xml.XmlNode,System.String,System.Boolean@)">
            <summary>Gets an XML node from given path, creating the entire path if it does not exist.</summary>
            <remarks>Note that the <paramref name="isDirty"/> parameter will be set to True if any items were added to
            the tree.</remarks>
            <param name="parentNode">An <see cref="T:System.Xml.XmlNode"/> parent node to query.</param>
            <param name="xpath">A <see cref="T:System.String"/> xpath query.</param>
            <param name="isDirty">A <see cref="T:System.Boolean"/> value indicating if items were added to the tree.</param>
            <returns>An <see cref="T:System.Xml.XmlNode"/> corresponding to the xpath query.</returns>
        </member>
        <member name="M:TVA.Xml.XmlExtensions.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>Safely gets or sets an XML node's attribute.</summary>
            <remarks>If you get an attribute that does not exist, null will be returned.</remarks>
            <param name="name">A <see cref="T:System.String"/> name of the value to get.</param>
            <param name="node">A <see cref="T:System.Xml.XmlNode"/> to query.</param>
            <returns>A <see cref="T:System.String"/> value returned for the attribute's value.</returns>
        </member>
        <member name="M:TVA.Xml.XmlExtensions.SetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>Safely sets an XML node's attribute.</summary>
            <remarks>If you assign a value to an attribute that does not exist, the attribute will be created.</remarks>
            <param name="name">A <see cref="T:System.String"/> indicating the node name to use.</param>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> node to operate on.</param>
            <param name="value">A <see cref="T:System.String"/> value to set the node attribute's value to.</param>
        </member>
        <member name="M:TVA.Xml.XmlExtensions.GetDataSet(System.String)">
            <summary>
            Gets a data set object from an XML data set formatted as a String.
            </summary>
            <param name="xmlData">XML data string in standard DataSet format.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="T:TVA.ObjectState`1">
            <summary>
            A serializable class that can be used to track the current and previous state of an object.
            </summary>
            <typeparam name="TState">Type of the state to track.</typeparam>
        </member>
        <member name="M:TVA.ObjectState`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.ObjectState`1"/> class.
            </summary>
            <param name="objectName">The text label for the object whose state is being tracked.</param>
        </member>
        <member name="M:TVA.ObjectState`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.ObjectState`1"/> class.
            </summary>
            <param name="objectName">The text label for the object whose state is being tracked.</param>
            <param name="currentState">The current state of the object.</param>
        </member>
        <member name="M:TVA.ObjectState`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.ObjectState`1"/> class.
            </summary>
            <param name="objectName">The text label for the object whose state is being tracked.</param>
            <param name="currentState">The current state of the object.</param>
            <param name="previousState">The previous state of the object.</param>
        </member>
        <member name="P:TVA.ObjectState`1.ObjectName">
            <summary>
            Gets or sets a text label for the object whose state is being tracked.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.ObjectState`1.CurrentState">
            <summary>
            Gets or sets the current state of the object.
            </summary>
        </member>
        <member name="P:TVA.ObjectState`1.PreviousState">
            <summary>
            Gets or sets the previous state of the object.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpFile">
            <summary>
            Represents a FTP file.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.IFtpFile">
            <summary>
            Abstract representation of a FTP file or directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpFile.Parent">
            <summary>
            Gets parent directory of file or directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpFile.Name">
            <summary>
            Gets name of file or directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpFile.FullPath">
            <summary>
            Gets full path of file or directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpFile.IsFile">
            <summary>
            Returns true if <see cref="T:TVA.Net.Ftp.IFtpFile"/> represents a file, otherwise false.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpFile.IsDirectory">
            <summary>
            Returns true if <see cref="T:TVA.Net.Ftp.IFtpFile"/> represents a directory, otherwise false.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpFile.Size">
            <summary>
            Gets or sets size of file or directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpFile.Permission">
            <summary>
            Gets or sets permission of file or directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpFile.TimeStamp">
            <summary>
            Gets or sets timestamp of file or directory.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.GetInputStream">
            <summary>
            Gets FTP input stream for file.
            </summary>
            <returns>FTP input stream for file.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.GetOutputStream">
            <summary>
            Gets FTP output stream for file.
            </summary>
            <returns>FTP output stream for file.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.GetInputStream(System.Int64)">
            <summary>
            Gets FTP input stream for file at given offset.
            </summary>
            <param name="offset">Offset into stream to start.</param>
            <returns>FTP input stream for file.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.GetOutputStream(System.Int64)">
            <summary>
            Gets FTP output stream for file at given offset.
            </summary>
            <param name="offset">Offset into stream to start.</param>
            <returns>FTP output stream for file.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.Equals(System.Object)">
            <summary>
            Determines if the two <see cref="T:TVA.Net.Ftp.FtpFile"/> objects are equal.
            </summary>
            <param name="obj">Other object to compare.</param>
            <returns><c>true</c> if both objects are equal.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.GetHashCode">
            <summary>
            Generates hash code for this <see cref="T:TVA.Net.Ftp.FtpFile"/>.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the hash code.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.CompareTo(System.Object)">
            <summary>
            Compares directory or file to another.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare against.</param>
            <returns>An <see cref="T:System.Int32"/> that represents the result of the comparison. 1 - object is greater than, 0 - object is equal to, -1 - object is less than.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.op_Equality(TVA.Net.Ftp.FtpFile,TVA.Net.Ftp.FtpFile)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.op_Inequality(TVA.Net.Ftp.FtpFile,TVA.Net.Ftp.FtpFile)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.op_LessThan(TVA.Net.Ftp.FtpFile,TVA.Net.Ftp.FtpFile)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.op_GreaterThan(TVA.Net.Ftp.FtpFile,TVA.Net.Ftp.FtpFile)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.op_LessThanOrEqual(TVA.Net.Ftp.FtpFile,TVA.Net.Ftp.FtpFile)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFile.op_GreaterThanOrEqual(TVA.Net.Ftp.FtpFile,TVA.Net.Ftp.FtpFile)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpFile"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result of the comparison.</returns>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFile.Name">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFile.FullPath">
            <summary>
            Full path of file.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFile.IsFile">
            <summary>
            Returns true for file entries.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFile.IsDirectory">
            <summary>
            Returns false for directory entries.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFile.Size">
            <summary>
            Gets or sets size of file.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFile.Permission">
            <summary>
            Gets or sets permission of file.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFile.TimeStamp">
            <summary>
            Gets or sets timestamp of file.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFile.Parent">
            <summary>
            Gets parent directory of file.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpClient">
            <summary>
            Represents a FTP session.
            </summary>
            <remarks>
            Creates a client connection to an FTP server for uploading or downloading files.
            </remarks>
        </member>
        <member name="M:TVA.Net.Ftp.FtpClient.#ctor">
            <summary>
            Constructs a new FTP session using the default settings.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpClient.#ctor(System.Boolean)">
            <summary>
            Constructs a new FTP session using the specified settings.
            </summary>
            <param name="caseInsensitive">Set to true to not be case sensitive with FTP file and directory names.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpClient.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Net.Ftp.FtpClient"/> class.
            </summary>
            <param name="container"><see cref="T:System.ComponentModel.IContainer"/> object that contains the <see cref="T:TVA.Net.Ftp.FtpClient"/>.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpClient.SetCurrentDirectory(System.String)">
            <summary>
            Changes the current FTP session directory to the specified path.
            </summary>
            <param name="directoryPath">New directory.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Net.Ftp.FtpClient"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpClient.AbortTransfer">
            <summary>
            Aborts current file transfer.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpClient.Connect(System.String,System.String)">
            <summary>
            Connects to FTP server using specified credentials.
            </summary>
            <param name="userName">User name used to authenticate to FTP server.</param>
            <param name="password">Password used to authenticate to FTP server.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpClient.Close">
            <summary>
            Closes current FTP session.
            </summary>
        </member>
        <member name="E:TVA.Net.Ftp.FtpClient.BeginFileTransfer">
            <summary>
            Raised when file transfer begins.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`3.Argument1"/> is local filename,
            <see cref="F:TVA.EventArgs`3.Argument2"/> is remote filename, 
            <see cref="F:TVA.EventArgs`3.Argument3"/> is file transfer direction.
            </remarks>
        </member>
        <member name="E:TVA.Net.Ftp.FtpClient.EndFileTransfer">
            <summary>
            Raised when file transfer completes.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`3.Argument1"/> is local filename,
            <see cref="F:TVA.EventArgs`3.Argument2"/> is remote filename, 
            <see cref="F:TVA.EventArgs`3.Argument3"/> is file transfer direction.
            </remarks>
        </member>
        <member name="E:TVA.Net.Ftp.FtpClient.FileTransferProgress">
            <summary>
            Raised as file transfer is progressing.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`2.Argument1"/> is current file transfer progress,
            <see cref="F:TVA.EventArgs`2.Argument2"/> is file transfer direction.
            </remarks>
        </member>
        <member name="E:TVA.Net.Ftp.FtpClient.FileTransferNotification">
            <summary>
            Raised when ansynchronous file transfer process has completed (success or failure).
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is result of asynchronous FTP transfer process.
            </remarks>
        </member>
        <member name="E:TVA.Net.Ftp.FtpClient.ResponseReceived">
            <summary>
            Raised when FTP response has been received.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is received FTP response.
            </remarks>
        </member>
        <member name="E:TVA.Net.Ftp.FtpClient.CommandSent">
            <summary>
            Raised when FTP command has been sent.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is sent FTP command.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpClient.Server">
            <summary>
            Gets or sets FTP server name (DNS name or IP).
            </summary>
            <remarks>
            FTP server name should not be prefixed with FTP://.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpClient.CaseInsensitive">
            <summary>
            Gets or sets FTP case sensitivity of file and directory names.
            </summary>
            <remarks>
            Set to true to not be case sensitive with FTP file and directory names.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpClient.Port">
            <summary>
            Gets or sets FTP server port to use, defaults to 21.
            </summary>
            <remarks>
            This only needs to be changed if the FTP server is established on a non-standard port number.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpClient.CurrentDirectory">
            <summary>
            Gets or sets current FTP session directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpClient.RootDirectory">
            <summary>
            Gets FTP session root directory entry.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpClient.WaitLockTimeout">
            <summary>
            Gets or sets maximum number of seconds to wait for read lock for files to be uploaded. Defaults to 10 seconds.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpClient.ControlChannel">
            <summary>
            Gets the current FTP control channel.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpClient.IsConnected">
            <summary>
            Returns true if FTP session is currently connected.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpClient.IsBusy">
            <summary>
            Returns true if FTP session is currently busy.
            </summary>
        </member>
        <member name="T:TVA.ISupportLifecycle">
            <summary>
            Specifies that this object provides support for performing tasks during the key stages of object lifecycle. 
            </summary>
            <remarks>
            <list type="table">
                <listheader>
                    <term>Lifecycle Stage</term>
                    <description>Equivalent Member</description>
                </listheader>
                <item>
                    <term>Birth</term>
                    <description><see cref="M:TVA.ISupportLifecycle.Initialize"/></description>
                </item>
                <item>
                    <term>Life (Work/Sleep)</term>
                    <description><see cref="P:TVA.ISupportLifecycle.Enabled"/></description>
                </item>
                <item>
                    <term>Death</term>
                    <description><see cref="M:System.IDisposable.Dispose"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:TVA.ISupportLifecycle.Initialize">
            <summary>
            Initializes the state of the object.
            </summary>
            <remarks>
            Typical implementation of <see cref="M:TVA.ISupportLifecycle.Initialize"/> should allow the object state to be initialized only 
            once. <see cref="M:TVA.ISupportLifecycle.Initialize"/> should be called automatically from one or more key entry points of the 
            object. For example, if the object is a <see cref="T:System.ComponentModel.Component"/> and it implements 
            the <see cref="T:System.ComponentModel.ISupportInitialize"/> interface then <see cref="M:TVA.ISupportLifecycle.Initialize"/> should 
            be called from the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit"/> method so that the object 
            gets initialized automatically when consumed through the IDE designer surface. In addition to this 
            <see cref="M:TVA.ISupportLifecycle.Initialize"/> should also be called from key or mandatory methods of the object, like 'Start()'
            or 'Connect()', so that the object gets initialized even when not consumed through the IDE designer surface.
            </remarks>
        </member>
        <member name="P:TVA.ISupportLifecycle.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the object is enabled.
            </summary>
            <remarks>
            Typical implementation of <see cref="P:TVA.ISupportLifecycle.Enabled"/> should suspend the internal processing when the object is 
            disabled and resume processing when the object is enabled.
            </remarks>
        </member>
        <member name="T:TVA.IO.Checksums.Xor16">
            <summary>Calculates word length (16-bit) XOR-based check-sum on specified portion of a buffer.</summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor16.#ctor">
            <summary>
            Creates a new instance of the Xor16Bit class.
            The checksum starts off with a value of 0.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor16.Reset">
            <summary>
            Resets the checksum to the initial value.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor16.Update(System.UInt16)">
            <summary>
            Updates the checksum with a ushort value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to use for the update.</param>
        </member>
        <member name="M:TVA.IO.Checksums.Xor16.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:TVA.IO.Checksums.Xor16.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:TVA.IO.Checksums.Xor16.Value">
            <summary>
            Returns the Xor 16-bit checksum computed so far.
            </summary>
        </member>
        <member name="T:TVA.Interop.IniFile">
            <summary>
            Represents a Windows INI style configuration file.
            </summary>
        </member>
        <member name="M:TVA.Interop.IniFile.#ctor">
            <summary>
            Creates a new <see cref="T:TVA.Interop.IniFile"/>.
            </summary>
            <remarks>INI file name defaults to "Win.ini" - change using FileName property.</remarks>
        </member>
        <member name="M:TVA.Interop.IniFile.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:TVA.Interop.IniFile"/> using the specified INI file name.
            </summary>
            <param name="fileName">Specified INI file name to use.</param>
        </member>
        <member name="M:TVA.Interop.IniFile.GetKeyValue(System.String,System.String)">
            <summary>
            Gets the value of the specified key.
            </summary>
            <param name="section">Section key exists in.</param>
            <param name="entry">Name of key.</param>
            <returns>Value of key.</returns>
        </member>
        <member name="M:TVA.Interop.IniFile.GetKeyValue(System.String,System.String,System.String)">
            <summary>
            Gets the value of the specified key.
            </summary>
            <param name="section">Section key exists in.</param>
            <param name="entry">Name of key.</param>
            <param name="defaultValue">Default value of key.</param>
            <returns>Value of key.</returns>
        </member>
        <member name="M:TVA.Interop.IniFile.SetKeyValue(System.String,System.String,System.String)">
            <summary>
            Sets the value of the specified key.
            </summary>
            <param name="section">Section key exists in.</param>
            <param name="entry">Name of key.</param>
            <param name="newValue">The new key value to store in the INI file.</param>
        </member>
        <member name="M:TVA.Interop.IniFile.GetSectionKeys(System.String)">
            <summary>
            Gets an array of keys from the specified section in the INI file.
            </summary>
            <param name="section">Section to retrieve keys from.</param>
            <returns>Array of <see cref="T:System.String"/> keys from the specified section of the INI file.</returns>
        </member>
        <member name="M:TVA.Interop.IniFile.GetSectionNames">
            <summary>
            Gets an array of that section names that exist in the INI file.
            </summary>
            <returns>Array of <see cref="T:System.String"/> section names from the INI file.</returns>
        </member>
        <member name="P:TVA.Interop.IniFile.FileName">
            <summary>
            File name of the INI file.
            </summary>
        </member>
        <member name="P:TVA.Interop.IniFile.Item(System.String,System.String,System.String)">
            <summary>
            Gets the value of the specified key.
            </summary>
            <param name="section">Section key exists in.</param>
            <param name="entry">Name of key.</param>
            <param name="defaultValue">Default value of key.</param>
            <returns>Value of key.</returns>
            <remarks>This is the default member of this class.</remarks>
        </member>
        <member name="P:TVA.Interop.IniFile.Item(System.String,System.String)">
            <summary>
            Gets or sets the value of the specified key.
            </summary>
            <param name="section">Section key exists in.</param>
            <param name="entry">Name of key.</param>
            <value>The new key value to store in the INI file.</value>
            <returns>Value of key.</returns>
            <remarks>This is the default member of this class.</remarks>
        </member>
        <member name="T:TVA.Identity.NamespaceDoc">
            <summary>
            Contains classes used to simplify and standardize access to information about a domain user retrieved from Active Directory.
            </summary>
        </member>
        <member name="T:TVA.FastObjectFactory`1">
            <summary>
            Quickly creates new objects based on specified type.
            </summary>
            <typeparam name="T">Type of object to create quickly.</typeparam>
            <remarks>
            You can use the alternate <see cref="T:TVA.FastObjectFactory"/> implementation if you only have the <see cref="T:System.Type"/> of
            an object available (such as when you are using reflection).
            </remarks>
        </member>
        <member name="P:TVA.FastObjectFactory`1.CreateObjectFunction">
            <summary>
            Gets delegate that quickly creates new instance of the specfied type.
            </summary>
        </member>
        <member name="T:TVA.FastObjectFactory">
            <summary>
            Quickly creates new objects based on specified type.
            </summary>
            <remarks>
            <see cref="T:TVA.FastObjectFactory"/> should be used when you only have the <see cref="T:System.Type"/> of an object available (such as when you are
            using reflection), otherwise you should use then generic <see cref="T:TVA.FastObjectFactory`1"/>.
            </remarks>
        </member>
        <member name="M:TVA.FastObjectFactory.GetCreateObjectFunction(System.Type)">
            <summary>
            Gets delegate that creates new instance of the <paramref name="objType"/>.
            </summary>
            <param name="objType">Type of object to create quickly.</param>
            <returns>Delegate to use to quickly create new objects.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="objType"/> does not support parameterless public constructor.</exception>
        </member>
        <member name="M:TVA.FastObjectFactory.GetCreateObjectFunction``1(System.Type)">
            <summary>
            Gets delegate of specified return type that creates new instance of the <paramref name="objType"/>.
            </summary>
            <param name="objType">Type of object to create quickly.</param>
            <typeparam name="T">Type of returned object function used to create objects quickly.</typeparam>
            <returns>Delegate to use to quickly create new objects.</returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="objType"/> does not support parameterless public constructor -or- 
            <paramref name="objType"/> is not a subclass or interface implementation of function type definition.
            </exception>
        </member>
        <member name="T:TVA.Configuration.CategorizedSettingsSection">
            <summary>
            Represents a section in the config file with one or more <see cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/> 
            representing categories, each containing one or more <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> objects 
            representing settings under a specific category.
            </summary>
            <seealso cref="T:TVA.Configuration.CategorizedSettingsElement"/>
            <seealso cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsSection.Remove(System.String)">
            <summary>
            Removes the specified category name including its associated settings.
            </summary>
            <param name="name">Name of the category to be removed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty string.</exception>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsSection.SetCryptoKey(System.String)">
            <summary>
            Sets the key to be used for encrypting and decrypting setting values.
            </summary>
            <param name="cryptoKey">New crypto key.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsSection.DeserializeSection(System.Xml.XmlReader)">
            <summary>
            Reads XML from the configuration file.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> object, which reads from the configuration file.</param>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsSection.File">
            <summary>
            Gets or sets the <see cref="T:TVA.Configuration.ConfigurationFile"/> to which this <see cref="T:TVA.Configuration.CategorizedSettingsSection"/> belongs.
            </summary>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsSection.Item(System.String)">
            <summary>
            Gets the <see cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/> object representing settings under the specified category name.
            </summary>
            <param name="name">Name of the category whose settings are to be retrieved.</param>
            <returns><see cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/> object with settings under the specified category name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null or empty string.</exception>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsSection.General">
            <summary>
            Gets the <see cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/> object representing settings under "general" category.
            </summary>
            <returns><see cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/> object with settings under the "general" category.</returns>
        </member>
        <member name="T:TVA.CompoundValue`1">
            <summary>
            Represents a collection of individual values that together represent a compound value once all the values have been assigned.
            </summary>
            <remarks>
            Composite values are stored as <see cref="T:System.Nullable`1"/> and can be cumulated until all values have been assigned so that a
            compound value can be created.
            </remarks>
            <typeparam name="T"><see cref="T:System.Type"/> of composite values.</typeparam>
        </member>
        <member name="M:TVA.CompoundValue`1.#ctor">
            <summary>
            Creates a new <see cref="T:TVA.CompoundValue`1"/>.
            </summary>
        </member>
        <member name="M:TVA.CompoundValue`1.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:TVA.CompoundValue`1"/> specifing the total number of composite values to track.
            </summary>
            <remarks>
            The specified <paramref name="count"/> of items are added to the <see cref="T:TVA.CompoundValue`1"/>,
            each item will be marked as unassigned (i.e., null).
            </remarks>
            <param name="count">Total number of composite values to track.</param>
        </member>
        <member name="M:TVA.CompoundValue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new <see cref="T:TVA.CompoundValue`1"/> from the specified list.
            </summary>
            <param name="values">List of values used to initialize <see cref="T:TVA.CompoundValue`1"/>.</param>
        </member>
        <member name="M:TVA.CompoundValue`1.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{`0}})">
            <summary>
            Creates a new <see cref="T:TVA.CompoundValue`1"/> from the specified list.
            </summary>
            <param name="values">List of values used to initialize <see cref="T:TVA.CompoundValue`1"/>.</param>
        </member>
        <member name="M:TVA.CompoundValue`1.ToArray">
            <summary>
            Gets an array of all the <see cref="M:System.Nullable`1.GetValueOrDefault"/> elements of the <see cref="T:TVA.CompoundValue`1"/>.
            </summary>
            <returns>A new array containing copies of the <see cref="M:System.Nullable`1.GetValueOrDefault"/> elements of the <see cref="T:TVA.CompoundValue`1"/>.</returns>
        </member>
        <member name="P:TVA.CompoundValue`1.AllAssigned">
            <summary>
            Gets a boolean value indicating if all of the composite values have been assigned a value.
            </summary>
            <returns>True, if all composite values have been assigned a value; otherwise, false.</returns>
        </member>
        <member name="P:TVA.CompoundValue`1.NoneAssigned">
            <summary>
            Gets a boolean value indicating if none of the composite values have been assigned a value.
            </summary>
            <returns>True, if no composite values have been assigned a value; otherwise, false.</returns>
        </member>
        <member name="T:TVA.Units.Time">
            <summary>Represents a time measurement, in seconds, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a time in seconds; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other time representations, specifically
            minutes, hours, days, weeks, atomic units of time, Planck time and ke. Metric conversions are handled
            simply by applying the needed <see cref="T:TVA.Units.SI"/> conversion factor, for example:
            <example>
            Convert time in nanoseconds to seconds:
            <code>
            public Time GetSeconds(double nanoseconds)
            {
                return nanoseconds * SI.Nano;
            }
            </code>
            Convert time in seconds to milliseconds:
            <code>
            public double GetMilliseconds(Time seconds)
            {
                return time / SI.Milli;
            }
            </code>
            This example converts minutes to hours:
            <code>
            public double GetHours(double minutes)
            {
                return Time.FromMinutes(minutes).ToHours();
            }
            </code>
            </example>
            <para>
            Note that the <see cref="M:TVA.Units.Time.ToString"/> method will convert the <see cref="T:TVA.Units.Time"/> value, in seconds,
            into a textual representation of years, days, hours, minutes and seconds.
            </para>
            </remarks>
        </member>
        <member name="F:TVA.Units.Time.SecondsPerTick">
            <summary>Fractional number of seconds in one tick.</summary>
        </member>
        <member name="F:TVA.Units.Time.SecondsPerMinute">
            <summary>Number of seconds in one minute.</summary>
        </member>
        <member name="F:TVA.Units.Time.SecondsPerHour">
            <summary>Number of seconds in one hour.</summary>
        </member>
        <member name="F:TVA.Units.Time.SecondsPerDay">
            <summary>Number of seconds in one day.</summary>
        </member>
        <member name="F:TVA.Units.Time.SecondsPerWeek">
            <summary>Number of seconds in one week.</summary>
        </member>
        <member name="M:TVA.Units.Time.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Time"/>.
            </summary>
            <param name="value">New time value in seconds.</param>
        </member>
        <member name="M:TVA.Units.Time.#ctor(System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Time"/>.
            </summary>
            <param name="value">New time value as a <see cref="T:System.TimeSpan"/>.</param>
        </member>
        <member name="M:TVA.Units.Time.ToAtomicUnitsOfTime">
            <summary>
            Gets the <see cref="T:TVA.Units.Time"/> value in atomic units of time.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Time"/> in atomic units of time.</returns>
        </member>
        <member name="M:TVA.Units.Time.ToPlanckTime">
            <summary>
            Gets the <see cref="T:TVA.Units.Time"/> value in Planck time.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Time"/> in Planck time.</returns>
        </member>
        <member name="M:TVA.Units.Time.ToKe">
            <summary>
            Gets the <see cref="T:TVA.Units.Time"/> value in ke, the traditional Chinese unit of decimal time.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Time"/> in ke.</returns>
        </member>
        <member name="M:TVA.Units.Time.ToMinutes">
            <summary>
            Gets the <see cref="T:TVA.Units.Time"/> value in minutes.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Time"/> in minutes.</returns>
        </member>
        <member name="M:TVA.Units.Time.ToHours">
            <summary>
            Gets the <see cref="T:TVA.Units.Time"/> value in hours.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Time"/> in hours.</returns>
        </member>
        <member name="M:TVA.Units.Time.ToDays">
            <summary>
            Gets the <see cref="T:TVA.Units.Time"/> value in days.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Time"/> in days.</returns>
        </member>
        <member name="M:TVA.Units.Time.ToWeeks">
            <summary>
            Gets the <see cref="T:TVA.Units.Time"/> value in weeks.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Time"/> in weeks.</returns>
        </member>
        <member name="M:TVA.Units.Time.ToTicks">
            <summary>
            Converts the <see cref="T:TVA.Units.Time"/> value, in seconds, to 100-nanosecond tick intervals.
            </summary>
            <returns>A <see cref="T:TVA.Ticks"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Time.ToString">
            <summary>
            Converts the <see cref="T:TVA.Units.Time"/> value into a textual representation of years, days, hours,
            minutes and seconds.
            </summary>
            <remarks>
            Note that this ToString overload will not display fractional seconds. To allow display of
            fractional seconds, or completely remove second resolution from the textual representation,
            use the <see cref="M:TVA.Units.Time.ToString(System.Int32)"/> overload instead.
            </remarks>
            <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:TVA.Units.Time"/> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits.
            </summary>
            <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
            <remarks>Set second precision to -1 to suppress seconds display.</remarks>
            <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.ToString(System.Int32,System.String[])">
            <summary>
            Converts the <see cref="T:TVA.Units.Time"/> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits given string array of
            time names.
            </summary>
            <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
            <param name="timeNames">Time names array to use during textual conversion.</param>
            <remarks>
            <para>Set second precision to -1 to suppress seconds display.</para>
            <para>
            <paramref name="timeNames"/> array needs one string entry for each of the following names:<br/>
            "Year", "Years", "Day", "Days", "Hour", "Hours", "Minute", "Minutes", "Second", "Seconds",
            "Less Than 60 Seconds", "0 Seconds".
            </para>
            </remarks>
            <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Time"/>.</exception>
        </member>
        <member name="M:TVA.Units.Time.CompareTo(TVA.Units.Time)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Time"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Time"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.CompareTo(System.TimeSpan)">
            <summary>
            Compares this instance to a specified <see cref="T:System.TimeSpan"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.TimeSpan"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">An <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Time"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.Equals(TVA.Units.Time)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Time"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Time"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.Equals(System.TimeSpan)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.TimeSpan"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">An <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <remarks>
            Note that this ToString overload matches <see cref="M:System.Double.ToString(System.String)"/>, use
            <see cref="M:TVA.Units.Time.ToString(System.Int32)"/> to convert <see cref="T:TVA.Units.Time"/> value into a textual
            representation of years, days, hours, minutes and seconds.
            </remarks>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <remarks>
            Note that this ToString overload matches <see cref="M:System.Double.ToString(System.IFormatProvider)"/>, use
            <see cref="M:TVA.Units.Time.ToString(System.Int32)"/> to convert <see cref="T:TVA.Units.Time"/> value into a textual
            representation of years, days, hours, minutes and seconds.
            </remarks>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <remarks>
            Note that this ToString overload matches <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)"/>, use
            <see cref="M:TVA.Units.Time.ToString(System.Int32)"/> to convert <see cref="T:TVA.Units.Time"/> value into a textual representation
            of years, days, hours, minutes and seconds.
            </remarks>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Time.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Time"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Time"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Time.MinValue"/> or greater than <see cref="F:TVA.Units.Time.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Time.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Time"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Time"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Time.MinValue"/> or greater than <see cref="F:TVA.Units.Time.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Time.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Time"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Time"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Time.MinValue"/> or greater than <see cref="F:TVA.Units.Time.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Time.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Time"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Time"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Time.MinValue"/> or greater than <see cref="F:TVA.Units.Time.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Time.TryParse(System.String,TVA.Units.Time@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Time"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Time"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Time.MinValue"/> or greater than <see cref="F:TVA.Units.Time.MaxValue"/>.
            This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Time.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Time@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Time"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Time"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Time.MinValue"/> or
            greater than <see cref="F:TVA.Units.Time.MaxValue"/>. This parameter is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Time.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Equality(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Inequality(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_LessThan(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_LessThanOrEqual(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_GreaterThan(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_GreaterThanOrEqual(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Implicit(System.Double)~TVA.Units.Time">
            <summary>
            Implicitly converts value, represented in seconds, to a <see cref="T:TVA.Units.Time"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Time"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Implicit(System.TimeSpan)~TVA.Units.Time">
            <summary>
            Implicitly converts value, represented as a <see cref="T:System.TimeSpan"/>, to a <see cref="T:TVA.Units.Time"/>.
            </summary>
            <param name="value">A <see cref="T:System.TimeSpan"/> object.</param>
            <returns>A <see cref="T:TVA.Units.Time"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Implicit(TVA.Units.Time)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Time"/>, represented in seconds, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Time"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Implicit(TVA.Units.Time)~System.TimeSpan">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Time"/>, represented in seconds, to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Time"/> object.</param>
            <returns>A <see cref="T:System.TimeSpan"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Modulus(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Time"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Addition(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Time"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Subtraction(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Time"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Multiply(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Time"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Division(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Time"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Time.op_Exponent(TVA.Units.Time,TVA.Units.Time)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Time"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Time"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result of the operation.</returns>
        </member>
        <member name="F:TVA.Units.Time.MaxValue">
            <summary>Represents the largest possible value of a <see cref="T:TVA.Units.Time"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Time.MinValue">
            <summary>Represents the smallest possible value of a <see cref="T:TVA.Units.Time"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Time.FromAtomicUnitsOfTime(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Time"/> value from the specified <paramref name="value"/> in atomic units of time.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Time"/> value in atomic units of time.</param>
            <returns>New <see cref="T:TVA.Units.Time"/> object from the specified <paramref name="value"/> in atomic units of time.</returns>
        </member>
        <member name="M:TVA.Units.Time.FromPlanckTime(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Time"/> value from the specified <paramref name="value"/> in Planck time.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Time"/> value in Planck time.</param>
            <returns>New <see cref="T:TVA.Units.Time"/> object from the specified <paramref name="value"/> in Planck time.</returns>
        </member>
        <member name="M:TVA.Units.Time.FromKe(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Time"/> value from the specified <paramref name="value"/> in ke,
            the traditional Chinese unit of decimal time.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Time"/> value in ke.</param>
            <returns>New <see cref="T:TVA.Units.Time"/> object from the specified <paramref name="value"/> in ke.</returns>
        </member>
        <member name="M:TVA.Units.Time.FromMinutes(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Time"/> value from the specified <paramref name="value"/> in minutes.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Time"/> value in minutes.</param>
            <returns>New <see cref="T:TVA.Units.Time"/> object from the specified <paramref name="value"/> in minutes.</returns>
        </member>
        <member name="M:TVA.Units.Time.FromHours(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Time"/> value from the specified <paramref name="value"/> in hours.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Time"/> value in hours.</param>
            <returns>New <see cref="T:TVA.Units.Time"/> object from the specified <paramref name="value"/> in hours.</returns>
        </member>
        <member name="M:TVA.Units.Time.FromDays(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Time"/> value from the specified <paramref name="value"/> in days.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Time"/> value in days.</param>
            <returns>New <see cref="T:TVA.Units.Time"/> object from the specified <paramref name="value"/> in days.</returns>
        </member>
        <member name="M:TVA.Units.Time.FromWeeks(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Time"/> value from the specified <paramref name="value"/> in weeks.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Time"/> value in weeks.</param>
            <returns>New <see cref="T:TVA.Units.Time"/> object from the specified <paramref name="value"/> in weeks.</returns>
        </member>
        <member name="M:TVA.Units.Time.SecondsPerMonth(System.Int32,System.Int32)">
            <summary>
            Returns the number of seconds in the specified month and year.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month (a number ranging from 1 to 12).</param>
            <returns>
            The number of seconds, as a <see cref="T:TVA.Units.Time"/>, in the month for the specified year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Month is less than 1 or greater than 12. -or- year is less than 1 or greater than 9999.
            </exception>
        </member>
        <member name="M:TVA.Units.Time.SecondsPerYear(System.Int32)">
            <summary>
            Returns the number of seconds in the specified year.
            </summary>
            <param name="year">The year.</param>
            <returns>
            The number of seconds in the specified year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Year is less than 1 or greater than 9999.
            </exception>
        </member>
        <member name="T:TVA.Units.SI">
            <summary>
            Defines constant factors for SI units of measure to handle metric conversions.
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Yotta">
            <summary>
            SI prefix Y, 10^24
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Zetta">
            <summary>
            SI prefix Z, 10^21
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Exa">
            <summary>
            SI prefix E, 10^18
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Peta">
            <summary>
            SI prefix P, 10^15
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Tera">
            <summary>
            SI prefix T, 10^12
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Giga">
            <summary>
            SI prefix G, 10^9
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Mega">
            <summary>
            SI prefix M, 10^6
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Kilo">
            <summary>
            SI prefix k, 10^3
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Hecto">
            <summary>
            SI prefix h, 10^2
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Deca">
            <summary>
            SI prefix da, 10^1
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Deci">
            <summary>
            SI prefix d, 10^-1
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Centi">
            <summary>
            SI prefix c, 10^-2
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Milli">
            <summary>
            SI prefix m, 10^-3
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Micro">
            <summary>
            SI prefix µ, 10^-6
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Nano">
            <summary>
            SI prefix n, 10^-9
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Pico">
            <summary>
            SI prefix p, 10^-12
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Femto">
            <summary>
            SI prefix f, 10^-15
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Atto">
            <summary>
            SI prefix a, 10^-18
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Zepto">
            <summary>
            SI prefix z, 10^-21
            </summary>
        </member>
        <member name="F:TVA.Units.SI.Yocto">
            <summary>
            SI prefix y, 10^-24
            </summary>
        </member>
        <member name="M:TVA.Units.SI.ToScaledString(System.Double,System.String)">
            <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling.
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
            <remarks>
            <see cref="P:TVA.Units.SI.Symbols"/> array is used for displaying SI symbol prefix for <paramref name="unitName"/> and
            three decimal places are used for displayed <paramref name="totalUnits"/> precision.
            </remarks>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="M:TVA.Units.SI.ToScaledString(System.Double,System.String,System.String)">
            <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling.
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="format">A numeric string format for scaled <paramref name="totalUnits"/>.</param>
            <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
            <remarks>
            <see cref="P:TVA.Units.SI.Symbols"/> array is used for displaying SI symbol prefix for <paramref name="unitName"/>.
            </remarks>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="M:TVA.Units.SI.ToScaledString(System.Double,System.Int32,System.String)">
            <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling.
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="decimalPlaces">Number of decimal places to display.</param>
            <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
            <remarks>
            <see cref="P:TVA.Units.SI.Symbols"/> array is used for displaying SI symbol prefix for <paramref name="unitName"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="decimalPlaces"/> cannot be negative.</exception>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="M:TVA.Units.SI.ToScaledString(System.Double,System.String,System.String,System.String[])">
            <summary>
            Turns the given number of units into a textual representation with an appropriate unit scaling
            given string array of factor names or symbols.
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="format">A numeric string format for scaled <paramref name="totalUnits"/>.</param>
            <param name="unitName">Name of unit display (e.g., you could use "m/h" for meters per hour).</param>
            <param name="symbolNames">SI factor symbol or name array to use during textual conversion.</param>
            <remarks>
            The <paramref name="symbolNames"/> array needs one string entry for each defined SI item ordered from
            least (<see cref="F:TVA.Units.SI.Yocto"/>) to greatest (<see cref="F:TVA.Units.SI.Yotta"/>), see <see cref="P:TVA.Units.SI.Names"/> or <see cref="P:TVA.Units.SI.Symbols"/>
            arrays for examples.
            </remarks>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="P:TVA.Units.SI.Names">
            <summary>
            Gets an array of all the defined unit factor SI names ordered from least (<see cref="F:TVA.Units.SI.Yocto"/>) to greatest (<see cref="F:TVA.Units.SI.Yotta"/>).
            </summary>
        </member>
        <member name="P:TVA.Units.SI.Symbols">
            <summary>
            Gets an array of all the defined unit factor SI prefix symbols ordered from least (<see cref="F:TVA.Units.SI.Yocto"/>) to greatest (<see cref="F:TVA.Units.SI.Yotta"/>).
            </summary>
        </member>
        <member name="P:TVA.Units.SI.Factors">
            <summary>
            Gets an array of all the defined SI unit factors ordered from least (<see cref="F:TVA.Units.SI.Yocto"/>) to greatest (<see cref="F:TVA.Units.SI.Yotta"/>).
            </summary>
        </member>
        <member name="T:TVA.Security.Cryptography.SymmetricAlgorithmExtensions">
            <summary>
            Defines extension functions related to cryptographic <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> objects.
            </summary>
        </member>
        <member name="M:TVA.Security.Cryptography.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Returns a binary array of encrypted data for the given parameters.
            </summary>
            <param name="algorithm"><see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> to use for encryption.</param>
            <param name="data">Source buffer containing data to encrypt.</param>
            <param name="startIndex">Offset into <paramref name="data"/> buffer.</param>
            <param name="length">Number of bytes in <paramref name="data"/> buffer to encrypt starting from <paramref name="startIndex"/> offset.</param>
            <param name="key">The secret key to use for the symmetric algorithm.</param>
            <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
            <returns>Encrypted version of <paramref name="data"/> buffer.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Encrypts input stream onto output stream for the given parameters.
            </summary>
            <param name="algorithm"><see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> to use for encryption.</param>
            <param name="source">Source stream that contains data to encrypt.</param>
            <param name="destination">Destination stream used to hold encrypted data.</param>
            <param name="key">The secret key to use for the symmetric algorithm.</param>
            <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
        </member>
        <member name="M:TVA.Security.Cryptography.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Returns a binary array of decrypted data for the given parameters.
            </summary>
            <param name="algorithm"><see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> to use for decryption.</param>
            <param name="data">Source buffer containing data to decrypt.</param>
            <param name="startIndex">Offset into <paramref name="data"/> buffer.</param>
            <param name="length">Number of bytes in <paramref name="data"/> buffer to decrypt starting from <paramref name="startIndex"/> offset.</param>
            <param name="key">The secret key to use for the symmetric algorithm.</param>
            <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
            <returns>Decrypted version of <paramref name="data"/> buffer.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Decrypts input stream onto output stream for the given parameters.
            </summary>
            <param name="algorithm"><see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> to use for decryption.</param>
            <param name="source">Source stream that contains data to decrypt.</param>
            <param name="destination">Destination stream used to hold decrypted data.</param>
            <param name="key">The secret key to use for the symmetric algorithm.</param>
            <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
        </member>
        <member name="T:TVA.Net.Smtp.Mail">
             <summary>
             A wrapper class to the <see cref="T:System.Net.Mail.MailMessage"/> class that simplifies sending mail messages.
             </summary>
             <example>
             This example shows how to send an email message with attachment:
             <code>
             using System;
             using TVA.Net.Smtp;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     Mail email = new Mail("sender@email.com", "recipient@email.com", "smtp.email.com");
                     email.Subject = "Test Message";
                     email.Body = "This is a test message.";
                     email.IsBodyHtml = true;
                     email.Attachments = @"c:\attachment.txt";
                     email.Send();
                     email.Dispose();
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:TVA.Net.Smtp.Mail.DefaultSmtpServer">
            <summary>
            Default <see cref="P:TVA.Net.Smtp.Mail.SmtpServer"/> to be used if one is not specified.
            </summary>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Net.Smtp.Mail"/> class.
            </summary>
            <param name="from">The e-mail address of the <see cref="T:TVA.Net.Smtp.Mail"/> message sender.</param>
            <param name="toRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message recipients.</param>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Net.Smtp.Mail"/> class.
            </summary>
            <param name="from">The e-mail address of the <see cref="T:TVA.Net.Smtp.Mail"/> message sender.</param>
            <param name="toRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message recipients.</param>
            <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Net.Smtp.Mail"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Net.Smtp.Mail"/> object.
            </summary>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.Send">
            <summary>
            Send the <see cref="T:TVA.Net.Smtp.Mail"/> message with <see cref="P:TVA.Net.Smtp.Mail.Attachments"/> to the <see cref="P:TVA.Net.Smtp.Mail.ToRecipients"/>, 
            <see cref="P:TVA.Net.Smtp.Mail.CcRecipients"/> and <see cref="P:TVA.Net.Smtp.Mail.BccRecipients"/> using the specified <see cref="P:TVA.Net.Smtp.Mail.SmtpServer"/>.
            </summary>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Net.Smtp.Mail"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Sends a <see cref="T:TVA.Net.Smtp.Mail"/> message.
            </summary>
            <param name="from">The e-mail address of the <see cref="T:TVA.Net.Smtp.Mail"/> message sender.</param>
            <param name="toRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message recipients.</param>
            <param name="subject">The subject of the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="body">The body of the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="isBodyHtml">true if the <see cref="T:TVA.Net.Smtp.Mail"/> message body is to be formated as HTML; otherwise false.</param>
            <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Sends a <see cref="T:TVA.Net.Smtp.Mail"/> message.
            </summary>
            <param name="from">The e-mail address of the <see cref="T:TVA.Net.Smtp.Mail"/> message sender.</param>
            <param name="toRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message recipients.</param>
            <param name="ccRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message carbon copy (CC) recipients.</param>
            <param name="bccRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message blank carbon copy (BCC) recipients.</param>
            <param name="subject">The subject of the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="body">The body of the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="isBodyHtml">true if the <see cref="T:TVA.Net.Smtp.Mail"/> message body is to be formated as HTML; otherwise false.</param>
            <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Sends a <see cref="T:TVA.Net.Smtp.Mail"/> message.
            </summary>
            <param name="from">The e-mail address of the <see cref="T:TVA.Net.Smtp.Mail"/> message sender.</param>
            <param name="toRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message recipients.</param>
            <param name="subject">The subject of the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="body">The body of the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="isBodyHtml">true if the <see cref="T:TVA.Net.Smtp.Mail"/> message body is to be formated as HTML; otherwise false.</param>
            <param name="attachments">A comma-separated or semicolon-seperated list of file names to be attached to the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
        </member>
        <member name="M:TVA.Net.Smtp.Mail.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Sends a <see cref="T:TVA.Net.Smtp.Mail"/> message.
            </summary>
            <param name="from">The e-mail address of the <see cref="T:TVA.Net.Smtp.Mail"/> message sender.</param>
            <param name="toRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message recipients.</param>
            <param name="ccRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message carbon copy (CC) recipients.</param>
            <param name="bccRecipients">A comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message blank carbon copy (BCC) recipients.</param>
            <param name="subject">The subject of the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="body">The body of the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="isBodyHtml">true if the <see cref="T:TVA.Net.Smtp.Mail"/> message body is to be formated as HTML; otherwise false.</param>
            <param name="attachments">A comma-separated or semicolon-seperated list of file names to be attached to the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
            <param name="smtpServer">The name or IP address of the SMTP server to be used for sending the <see cref="T:TVA.Net.Smtp.Mail"/> message.</param>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.From">
            <summary>
            Gets or sets the e-mail address of the <see cref="T:TVA.Net.Smtp.Mail"/> message sender.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.ToRecipients">
            <summary>
            Gets or sets the comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message recipients.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.CcRecipients">
            <summary>
            Gets or sets the comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message carbon copy (CC) recipients.
            </summary>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.BccRecipients">
            <summary>
            Gets or sets the comma-separated or semicolon-seperated e-mail address list of the <see cref="T:TVA.Net.Smtp.Mail"/> message blank carbon copy (BCC) recipients.
            </summary>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.Subject">
            <summary>
            Gets or sets the subject of the <see cref="T:TVA.Net.Smtp.Mail"/> message.
            </summary>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.Body">
            <summary>
            Gets or sets the body of the <see cref="T:TVA.Net.Smtp.Mail"/> message.
            </summary>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.SmtpServer">
            <summary>
            Gets or sets the name or IP address of the SMTP server to be used for sending the <see cref="T:TVA.Net.Smtp.Mail"/> message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.Attachments">
            <summary>
            Gets or sets the comma-separated or semicolon-seperated list of file names to be attached to the <see cref="T:TVA.Net.Smtp.Mail"/> message.
            </summary>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.IsBodyHtml">
            <summary>
            Gets or sets a boolean value that indicating whether the <see cref="T:TVA.Net.Smtp.Mail"/> message <see cref="P:TVA.Net.Smtp.Mail.Body"/> is to be formatted as HTML.
            </summary>
        </member>
        <member name="P:TVA.Net.Smtp.Mail.Client">
            <summary>
            Gets the <see cref="T:System.Net.Mail.SmtpClient"/> object used for sending the <see cref="T:TVA.Net.Smtp.Mail"/> message.
            </summary>
        </member>
        <member name="T:TVA.Media.Sound.NamespaceDoc">
            <summary>
            Contains classes used to create dual tone multi-frequency sounds and standard touch tones.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.NamespaceDoc">
            <tocexclude />
            <remarks>
            This namespace is excluded from the official documentation TOC.
            </remarks>
        </member>
        <member name="T:TVA.LittleBinaryValue">
            <summary>
            Represents a little-endian ordered binary data sample stored as a byte array, 
            but implicitly castable to most common native types.
            </summary>
        </member>
        <member name="T:TVA.BinaryValueBase`1">
            <summary>
            Represents the base class for a binary data sample stored as a byte array, but implicitly castable to most common native types.
            </summary>
            <typeparam name="TEndianOrder">Type of <see cref="T:TVA.EndianOrder"/> class used to transpose byte order of derived implementation of <see cref="T:TVA.BinaryValueBase`1"/>.</typeparam>
        </member>
        <member name="M:TVA.BinaryValueBase`1.#ctor(System.TypeCode,System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new binary value from the given byte array.</summary>
            <param name="typeCode">The type code of the native value that the binary value represents.</param>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <param name="startIndex">The offset in the buffer where the data starts.</param>
            <param name="length">The number of data bytes that make up the binary value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of the <paramref name="buffer"/> -or-
            <paramref name="length"/> is less than 0 -or-
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify a valid region in the <paramref name="buffer"/>
            </exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToByte">
            <summary>
            Returns a byte from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A byte from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToInt16">
            <summary>
            Returns a 16-bit signed integer, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A 16-bit signed integer, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToUInt16">
            <summary>
            Returns a 16-bit unsigned integer, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A 16-bit unsigned integer, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToInt24">
            <summary>
            Returns a 24-bit signed integer, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A 24-bit signed integer, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToUInt24">
            <summary>
            Returns a 24-bit unsigned integer, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A 24-bit unsigned integer, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToInt32">
            <summary>
            Returns a 32-bit signed integer, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A 32-bit signed integer, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToUInt32">
            <summary>
            Returns a 32-bit unsigned integer, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A 32-bit unsigned integer, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToInt64">
            <summary>
            Returns a 64-bit signed integer, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A 64-bit signed integer, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToUInt64">
            <summary>
            Returns a 64-bit unsigned integer, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A 64-bit unsigned integer, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToSingle">
            <summary>
            Returns a single-precision floating point number, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A single-precision floating point number, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="M:TVA.BinaryValueBase`1.ToDouble">
            <summary>
            Returns a double-precision floating point number, accounting for <see cref="T:TVA.EndianOrder"/>, converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.
            </summary>
            <returns>A double-precision floating point number, accounting for <see cref="T:TVA.EndianOrder"/>,  converted from the <see cref="P:TVA.BinaryValueBase`1.Buffer"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Binary value buffer is too small to represent requested type.</exception>
        </member>
        <member name="F:TVA.BinaryValueBase`1.s_endianOrder">
            <summary>
            <see cref="T:TVA.EndianOrder"/> instance used to transpose byte order of derived implementation of <see cref="T:TVA.BinaryValueBase`1"/>.
            </summary>
        </member>
        <member name="P:TVA.BinaryValueBase`1.TypeCode">
            <summary>
            Gets or sets <see cref="P:TVA.BinaryValueBase`1.TypeCode"/> that this binary data sample represents.
            </summary>
        </member>
        <member name="P:TVA.BinaryValueBase`1.Buffer">
            <summary>
            Gets or sets the binary representation of this data sample.
            </summary>
        </member>
        <member name="M:TVA.LittleBinaryValue.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new little-endian ordered binary value from the given byte array.</summary>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <param name="startIndex">The offset in the buffer where the data starts.</param>
            <param name="length">The number of data bytes that make up the binary value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of the <paramref name="buffer"/> -or-
            <paramref name="length"/> is less than 0 -or-
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify a valid region in the <paramref name="buffer"/>
            </exception>
            <remarks>This constructor assumes a type code of Empty to represent "undefined".</remarks>
        </member>
        <member name="M:TVA.LittleBinaryValue.#ctor(System.Byte[])">
            <summary>Creates a new little-endian ordered binary value from the given byte array.</summary>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <remarks>This constructor assumes a type code of Empty to represent "undefined".</remarks>
        </member>
        <member name="M:TVA.LittleBinaryValue.#ctor(System.TypeCode,System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new little-endian ordered binary value from the given byte array.</summary>
            <param name="typeCode">The type code of the native value that the binary value represents.</param>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <param name="startIndex">The offset in the buffer where the data starts.</param>
            <param name="length">The number of data bytes that make up the binary value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of the <paramref name="buffer"/> -or-
            <paramref name="length"/> is less than 0 -or-
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify a valid region in the <paramref name="buffer"/>
            </exception>
        </member>
        <member name="M:TVA.LittleBinaryValue.#ctor(System.TypeCode,System.Byte[])">
            <summary>Creates a new little-endian ordered binary value from the given byte array.</summary>
            <param name="typeCode">The type code of the native value that the binary value represents.</param>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
        </member>
        <member name="M:TVA.LittleBinaryValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.ConvertToType(System.TypeCode)">
            <summary>
            Returns a <see cref="T:TVA.LittleBinaryValue"/> representation of source value converted to specified <see cref="T:System.TypeCode"/>.
            </summary>
            <param name="typeCode">Desired <see cref="T:System.TypeCode"/> for destination value.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of source value converted to specified <see cref="T:System.TypeCode"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Unable to convert binary value to specified type.</exception>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~System.Byte">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:System.Byte"/>.</param>
            <returns>A <see cref="T:System.Byte"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(System.Byte)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Byte"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~System.Int16">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:System.Int16"/>.</param>
            <returns>A <see cref="T:System.Int16"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(System.Int16)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Int16"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Int16"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~System.UInt16">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:System.UInt16"/>.</param>
            <returns>A <see cref="T:System.UInt16"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(System.UInt16)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.UInt16"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt16"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~TVA.Int24">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:TVA.Int24"/>.</param>
            <returns>A <see cref="T:TVA.Int24"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.Int24)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:TVA.Int24"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~TVA.UInt24">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:TVA.UInt24"/>.</param>
            <returns>A <see cref="T:TVA.UInt24"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.UInt24)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:TVA.UInt24"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~System.Int32">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:System.Int32"/>.</param>
            <returns>A <see cref="T:System.Int32"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(System.Int32)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Int32"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~System.UInt32">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:System.UInt32"/>.</param>
            <returns>A <see cref="T:System.UInt32"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(System.UInt32)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.UInt32"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt32"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~System.Int64">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:System.Int64"/>.</param>
            <returns>A <see cref="T:System.Int64"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(System.Int64)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Int64"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Int64"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~System.UInt64">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:System.UInt64"/>.</param>
            <returns>A <see cref="T:System.UInt64"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(System.UInt64)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.UInt64"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt64"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~System.Single">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:System.Single"/>.</param>
            <returns>A <see cref="T:System.Single"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(System.Single)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Single"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Single"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(TVA.LittleBinaryValue)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.LittleBinaryValue"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value"><see cref="T:TVA.LittleBinaryValue"/> to convert to <see cref="T:System.Double"/>.</param>
            <returns>A <see cref="T:System.Double"/> representation of <see cref="T:TVA.LittleBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.LittleBinaryValue.op_Implicit(System.Double)~TVA.LittleBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Double"/> to <see cref="T:TVA.LittleBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Double"/> to convert to <see cref="T:TVA.LittleBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.LittleBinaryValue"/> representation of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="T:TVA.IO.ExportDestination">
            <summary>
            Represents a destination location when exporting data using <see cref="T:TVA.IO.MultipleDestinationExporter"/>.
            </summary>
            <seealso cref="T:TVA.IO.MultipleDestinationExporter"/>
        </member>
        <member name="M:TVA.IO.ExportDestination.#ctor">
            <summary>
            Constructs a new <see cref="T:TVA.IO.ExportDestination"/>.
            </summary>
        </member>
        <member name="M:TVA.IO.ExportDestination.#ctor(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:TVA.IO.ExportDestination"/> given the specified parameters.
            </summary>
            <param name="destinationFile">Path and file name of export destination.</param>
            <param name="connectToShare">Determines whether or not to attempt network connection to share specified in <paramref name="destinationFile"/>.</param>
            <param name="domain">Domain used to authenticate network connection if <paramref name="connectToShare"/> is true.</param>
            <param name="userName">User name used to authenticate network connection if <paramref name="connectToShare"/> is true.</param>
            <param name="password">Password used to authenticate network connection if <paramref name="connectToShare"/> is true.</param>
        </member>
        <member name="M:TVA.IO.ExportDestination.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:TVA.IO.ExportDestination"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:TVA.IO.ExportDestination"/>.</returns>
        </member>
        <member name="P:TVA.IO.ExportDestination.DestinationFile">
            <summary>
            Path and file name of export destination.
            </summary>
        </member>
        <member name="P:TVA.IO.ExportDestination.ConnectToShare">
            <summary>
            Determines whether or not to attempt network connection to share specified in <see cref="P:TVA.IO.ExportDestination.DestinationFile"/>.
            </summary>
        </member>
        <member name="P:TVA.IO.ExportDestination.Domain">
            <summary>
            Domain used to authenticate network connection if <see cref="P:TVA.IO.ExportDestination.ConnectToShare"/> is true.
            </summary>
        </member>
        <member name="P:TVA.IO.ExportDestination.UserName">
            <summary>
            User name used to authenticate network connection if <see cref="P:TVA.IO.ExportDestination.ConnectToShare"/> is true.
            </summary>
        </member>
        <member name="P:TVA.IO.ExportDestination.Password">
            <summary>
            Password used to authenticate network connection if <see cref="P:TVA.IO.ExportDestination.ConnectToShare"/> is true.
            </summary>
        </member>
        <member name="P:TVA.IO.ExportDestination.Share">
            <summary>
            Path root of <see cref="P:TVA.IO.ExportDestination.DestinationFile"/> (e.g., E:\ or \\server\share).
            </summary>
        </member>
        <member name="P:TVA.IO.ExportDestination.FileName">
            <summary>
            Path and filename of <see cref="P:TVA.IO.ExportDestination.DestinationFile"/> without drive or server share prefix.
            </summary>
        </member>
        <member name="T:TVA.Diagnostics.NamespaceDoc">
            <summary>
            Contains classes used to simplify and standardize performance monitoring for applications.
            </summary>
        </member>
        <member name="T:TVA.Configuration.IniSettingsBase">
            <summary>
            Represents the base class for application settings that are synchronized to an INI file.
            </summary>
            <remarks>
            <para>
            In order to make custom types serializable for the INI file, implement a <see cref="T:System.ComponentModel.TypeConverter"/> for the type.<br/>
            See <a href="http://msdn.microsoft.com/en-us/library/ayybcxe5.aspx">MSDN</a> for details.
            </para>
            <example>
            Here is an example class derived from <see cref="T:TVA.Configuration.IniSettingsBase"/> that automatically
            serializes its fields and properties to the INI file.
            <code>
               public enum MyEnum
                {
                    One,
                    Two,
                    Three
                }
            
                public class MySettings : IniSettingsBase
                {
                    // Private property fields (private fields will not be serialized)
                    private double m_doubleVal;
            
                    // Public settings fields
                    public bool BoolVal = true;
                    public int IntVal = 1;
                    public float FloatVal = 3.14F;
                    public string StrVal = "This is a test...";
                    public MyEnum EnumVal = MyEnum.Three;
                    
                    [SettingName("UserOptions"), EncryptSetting()]
                    public string Password = "default";
            
                    // Mark this field to not be serialized to INI file...
                    [SerializeSetting(false)]
                    public decimal DecimalVal;
            
                    public MySettings()
                        : base(FilePath.GetAbsolutePath("MySettings.ini"), "GeneralSettings") {}
            
                    [Category("OtherSettings"), DefaultValue(1.159D)]
                    public double DoubleVal
                    {
                        get
                        {
                            return m_doubleVal;
                        }
                        set
                        {
                            m_doubleVal = value;
                        }
                    }
            
                    [SerializeSetting(false)]
                    public bool DontSerializeMe { get; set; }
                }
            </code>
            </example>
            </remarks>
        </member>
        <member name="T:TVA.Configuration.SettingsBase">
            <summary>
            Represents the base class for application settings that are synchronized with its configuration file.
            </summary>
            <remarks>
            In order to make custom types serializable for the configuration file, implement a <see cref="T:System.ComponentModel.TypeConverter"/> for the type.<br/>
            See <a href="http://msdn.microsoft.com/en-us/library/ayybcxe5.aspx">MSDN</a> for details.
            </remarks>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.SettingsBase"/> class for the application's configuration file.
            </summary>
            <param name="requireSerializeSettingAttribute">
            Assigns flag that determines if <see cref="T:TVA.Configuration.SerializeSettingAttribute"/> is required
            to exist before a field or property is serialized to the configuration file.
            </param>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> object.
            </summary>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.CreateSetting(System.String,System.String,System.String)">
            <summary>
            Implementor should create setting in configuration file (or other location).
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.RetrieveSetting(System.String,System.String)">
            <summary>
            Implementor should retrieve setting from configuration file (or other location).
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <returns>Setting value.</returns>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.StoreSetting(System.String,System.String,System.String)">
            <summary>
            Implementor should store setting to configuration file (or other location).
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.PersistSettings">
            <summary>
            Implementor should persist any pending changes to configuration file (or other location).
            </summary>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.GetSettingName(System.String)">
            <summary>
            Gets setting name to use for specified field or property. 
            </summary>
            <param name="name">Field or property name.</param>
            <returns><see cref="P:TVA.Configuration.SettingNameAttribute.Name"/> applied to specified field or property; or <paramref name="name"/> if attribute does not exist.</returns>
            <remarks>
            Field or property name will be used for setting name unless user applied a <see cref="T:TVA.Configuration.SettingNameAttribute"/>
            on the field or property to override name used to serialize value in configuration file.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> cannot be null or empty.</exception>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.GetDefaultValue(System.String)">
            <summary>
            Gets the default value specified by <see cref="T:System.ComponentModel.DefaultValueAttribute"/>, if any, applied to the specified field or property. 
            </summary>
            <param name="name">Field or property name.</param>
            <returns>Default value applied to specified field or property; or null if one does not exist.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> cannot be null or empty.</exception>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.GetEncryptStatus(System.String)">
            <summary>
            Gets the encryption status specified by <see cref="T:TVA.Configuration.EncryptSettingAttribute"/>, if any, applied to the specified field or property. 
            </summary>
            <param name="name">Field or property name.</param>
            <returns>Encryption status applied to specified field or property; or <c>false</c> if one does not exist.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> cannot be null or empty.</exception>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.GetEncryptKey(System.String)">
            <summary>
            Gets the optional private encryption key specified by <see cref="T:TVA.Configuration.EncryptSettingAttribute"/>, if any, applied to the specified field or property. 
            </summary>
            <param name="name">Field or property name.</param>
            <returns>Encryption private key applied to specified field or property; or <c>null</c> if one does not exist.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> cannot be null or empty.</exception>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.CreateValue(System.String,System.Object)">
            <summary>
            Adds a setting to the application's configuration file, if it doesn't already exist.
            </summary>
            <param name="name">Field or property name.</param>
            <param name="value">Setting value.</param>
            <remarks>
            Use this function to ensure a setting exists, it will not override an existing value.
            </remarks>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.SetValue(System.String,System.Object)">
            <summary>
            Copies the given value into the specified application setting.
            </summary>
            <param name="name">Field or property name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.GetValue``1(System.String)">
            <summary>
            Gets the application's configuration file setting converted to the given type.
            </summary>
            <typeparam name="T">Type to use for setting conversion.</typeparam>
            <param name="name">Field or property name.</param>
            <returns>Value of specified configuration file setting converted to the given type.</returns>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.GetValue(System.String,System.Type)">
            <summary>
            Gets the application's configuration file setting converted to the given type.
            </summary>
            <param name="name">Field or property name.</param>
            <param name="type">Setting type.</param>
            <returns>Value of specified configuration file setting converted to the given type.</returns>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.GetValue``1(System.String,``0@)">
            <summary>
            Copies the specified application setting into the given value.
            </summary>
            <typeparam name="T">Type to use for setting conversion.</typeparam>
            <param name="name">Field or property name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.Initialize">
            <summary>
            Initializes configuration settings from derived class fields or properties.
            </summary>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.RestoreDefaultSettings">
            <summary>
            Restores the default settings of the configuration file.
            </summary>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.DeriveDefaultValue(System.String,System.Object)">
            <summary>
            Attempts to get best default value for given member.
            </summary>
            <param name="name">Field or property name.</param>
            <param name="value">Current field or property value.</param>
            <remarks>
            If <paramref name="value"/> is equal to its default(type) value, then any value derived from <see cref="T:System.ComponentModel.DefaultValueAttribute"/> will be used instead.
            </remarks>
            <returns>The object that is the best default value.</returns>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.GetEnumerator">
            <summary>
            Returns an enumerator based on <see cref="T:System.String"/> elements that iterates over the field and property names of this class
            that are targeted for serialization to the configuration file.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.Load">
            <summary>
            Loads configuration file into setting fields.
            </summary>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.Save">
            <summary>
            Saves setting fields into configuration file.
            </summary>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.ExecuteActionForFields(System.Action{System.Reflection.FieldInfo})">
            <summary>
            Executes specified action over all public dervied class member fields.
            </summary>
            <param name="fieldAction">Action to excute for all dervied class member fields.</param>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.ExecuteActionForProperties(System.Action{System.Reflection.PropertyInfo},System.Reflection.BindingFlags)">
            <summary>
            Executes specified action over all public dervied class properties.
            </summary>
            <param name="propertyAction">Action to execute for all properties.</param>
            <param name="isGetOrSet"><see cref="F:System.Reflection.BindingFlags.GetProperty"/> or <see cref="F:System.Reflection.BindingFlags.SetProperty"/>.</param>
        </member>
        <member name="M:TVA.Configuration.SettingsBase.GetAttributeValue``2(System.String,``1,System.Func{``0,``1})">
            <summary>
            Attempts to find specified attribute and return specified value.
            </summary>
            <typeparam name="TAttribute">Type of <see cref="T:System.Attribute"/> to find.</typeparam>
            <typeparam name="TValue">Type of value attribute delegate returns.</typeparam>
            <param name="name">Name of field or property to search for attribute.</param>
            <param name="defaultValue">Default value to return if attribute doesn't exist.</param>
            <param name="attributeValue">Function delegate used to return desired attribute property.</param>
            <returns>Specified attribute value if it exists; otherwise default value.</returns>
        </member>
        <member name="P:TVA.Configuration.SettingsBase.Culture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo"/> to use for the conversion of setting values to and from <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:TVA.Configuration.SettingsBase.MemberAccessBindingFlags">
            <summary>
            Gets or sets <see cref="T:System.Reflection.BindingFlags"/> used to access fields and properties of dervied class.
            </summary>
            <remarks>
            Value defaults to <c><see cref="F:System.Reflection.BindingFlags.Public"/> | <see cref="F:System.Reflection.BindingFlags.Instance"/> | <see cref="F:System.Reflection.BindingFlags.DeclaredOnly"/></c>.
            </remarks>
        </member>
        <member name="P:TVA.Configuration.SettingsBase.RequireSerializeSettingAttribute">
            <summary>
            Gets or sets flag that determines if <see cref="T:TVA.Configuration.SerializeSettingAttribute"/> is
            required to exist before a field or property is serialized to the configuration
            file; defaults to False.
            </summary>
        </member>
        <member name="P:TVA.Configuration.SettingsBase.Item(System.String)">
            <summary>
            Gets or sets the value of the specified field or property.
            </summary>
            <param name="name">Field or property name.</param>
            <returns>Value of setting.</returns>
            <remarks>This is the default member of this class.</remarks>
        </member>
        <member name="M:TVA.Configuration.IniSettingsBase.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.IniSettingsBase"/> class for the application's INI file.
            </summary>
            <param name="iniFileName">Name of INI file to use for accessing settings.</param>
            <param name="sectionName">Name of default section to use to get and set settings from INI file.</param>
        </member>
        <member name="M:TVA.Configuration.IniSettingsBase.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.IniSettingsBase"/> class for the application's INI file.
            </summary>
            <param name="iniFileName">Name of INI file to use for accessing settings.</param>
            <param name="sectionName">Name of default section to use to get and set settings from INI file.</param>
            <param name="useCategoryAttributes">Determines if category attributes will be used for section names.</param>
            <param name="requireSerializeSettingAttribute">
            Assigns flag that determines if <see cref="T:TVA.Configuration.SerializeSettingAttribute"/> is required
            to exist before a field or property is serialized to the INI file.
            </param>
            <remarks>
            If <paramref name="useCategoryAttributes"/> is false, all settings will be placed in section labeled by the
            <paramref name="sectionName"/> value; otherwise, if a <see cref="T:System.ComponentModel.CategoryAttribute"/> exists on a field or
            property then the member value will serialized into the INI file in a section labeled the same
            as the <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> value and if the attribute doesn't exist the member value
            will serialized into the section labeled by the <paramref name="sectionName"/> value.
            </remarks>
        </member>
        <member name="M:TVA.Configuration.IniSettingsBase.#ctor(TVA.Interop.IniFile,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.IniSettingsBase"/> class for the application's INI file.
            </summary>
            <param name="iniFile">INI file to use for accessing settings.</param>
            <param name="sectionName">Name of default section to use to get and set settings from INI file.</param>
            <param name="useCategoryAttributes">Determines if category attributes will be used for section names.</param>
            <param name="requireSerializeSettingAttribute">
            Assigns flag that determines if <see cref="T:TVA.Configuration.SerializeSettingAttribute"/> is required
            to exist before a field or property is serialized to the INI file.
            </param>
            <param name="initialize">Determines if <see cref="M:TVA.Configuration.SettingsBase.Initialize"/> method should be called from constructor.</param>
            <remarks>
            <para>
            If <paramref name="useCategoryAttributes"/> is false, all settings will be placed in section labeled by the
            <paramref name="sectionName"/> value; otherwise, if a <see cref="T:System.ComponentModel.CategoryAttribute"/> exists on a field or
            property then the member value will serialized into the INI file in a section labeled the same
            as the <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> value and if the attribute doesn't exist the member value
            will serialized into the section labeled by the <paramref name="sectionName"/> value.
            </para>
            <para>
            Note that some .NET languages (e.g., Visual Basic) will not initialize member elements before call to constuctor,
            in this case <paramref name="initialize"/> should be set to <c>false</c>, then the <see cref="M:TVA.Configuration.SettingsBase.Initialize"/>
            method should be called manually after all properties have been initialized. Alternately, consider using the
            <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the fields or properties and this will be used to initialize the values.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Configuration.IniSettingsBase.CreateSetting(System.String,System.String,System.String)">
            <summary>
            Create setting in INI file if it doesn't already exist.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.IniSettingsBase.RetrieveSetting(System.String,System.String)">
            <summary>
            Retrieves setting from INI file.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <returns>Setting value.</returns>
        </member>
        <member name="M:TVA.Configuration.IniSettingsBase.StoreSetting(System.String,System.String,System.String)">
            <summary>
            Stores setting to INI file.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.IniSettingsBase.PersistSettings">
            <summary>
            Persists any pending changes to INI file.
            This method is for internal use.
            </summary>
        </member>
        <member name="M:TVA.Configuration.IniSettingsBase.GetSectionName(System.String)">
            <summary>
            Gets the section name to use for the specified field or property.
            </summary>
            <param name="name">Field or property name.</param>
            <returns><see cref="P:System.ComponentModel.CategoryAttribute.Category"/> applied to specified field or property; or <see cref="P:TVA.Configuration.IniSettingsBase.SectionName"/> if attribute does not exist.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> cannot be null or empty.</exception>
            <remarks>
            <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> will only be returned if <see cref="P:TVA.Configuration.IniSettingsBase.UseCategoryAttributes"/> is <c>true</c>; otherwise
            <see cref="P:TVA.Configuration.IniSettingsBase.SectionName"/> value will be returned.
            </remarks>
        </member>
        <member name="P:TVA.Configuration.IniSettingsBase.IniFile">
            <summary>
            Gets or sets reference to working INI file.
            </summary>
            <exception cref="T:System.NullReferenceException">value cannot be null.</exception>
        </member>
        <member name="P:TVA.Configuration.IniSettingsBase.SectionName">
            <summary>
            Gets or sets default name of section used to access settings in INI file.
            </summary>
        </member>
        <member name="P:TVA.Configuration.IniSettingsBase.UseCategoryAttributes">
            <summary>
            Gets or sets value that determines whether a <see cref="T:System.ComponentModel.CategoryAttribute"/> applied to a field or property
            will be used for the section name.
            </summary>
            <remarks>
            If <see cref="P:TVA.Configuration.IniSettingsBase.UseCategoryAttributes"/> is false, all settings will be placed in section labeled by the
            <see cref="P:TVA.Configuration.IniSettingsBase.SectionName"/> value; otherwise, if a <see cref="T:System.ComponentModel.CategoryAttribute"/> exists on a field or
            property then the member value will serialized into the INI file in a section labeled the same
            as the <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> value and if the attribute doesn't exist the member value
            will serialized into the section labeled by the <see cref="P:TVA.Configuration.IniSettingsBase.SectionName"/> value.
            </remarks>
        </member>
        <member name="T:TVA.ByteEncoding">
            <summary>
            Defines a set of methods used to convert byte buffers to and from user presentable data formats.
            </summary>
        </member>
        <member name="F:TVA.ByteEncoding.NoSpacing">
            <summary>
            Constant used to specify that "no spacing" should be used for data conversion.
            </summary>
        </member>
        <member name="M:TVA.ByteEncoding.GetString(System.Byte[])">
            <summary>Encodes given buffer into a user presentable representation.</summary>
            <param name="bytes">Bytes to encode.</param>
            <returns>String representation of byte array.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.GetString(System.Byte[],System.Char)">
            <summary>Encodes given buffer into a user presentable representation.</summary>
            <param name="bytes">Bytes to encode.</param>
            <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
            <returns>String of encoded bytes.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes given buffer into a user presentable representation.</summary>
            <param name="bytes">Bytes to encode.</param>
            <param name="offset">Offset into buffer to begin encoding.</param>
            <param name="length">Length of buffer to encode.</param>
            <returns>String of encoded bytes.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
            <summary>Encodes given buffer into a user presentable representation.</summary>
            <param name="bytes">Bytes to encode.</param>
            <param name="offset">Offset into buffer to begin encoding.</param>
            <param name="length">Length of buffer to encode.</param>
            <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
            <returns>String of encoded bytes.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.GetBytes(System.String)">
            <summary>Decodes given string back into a byte buffer.</summary>
            <param name="value">Encoded string to decode.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.GetBytes(System.String,System.Char)">
            <summary>Decodes given string back into a byte buffer.</summary>
            <param name="value">Encoded string to decode.</param>
            <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
            <returns>Decoded bytes</returns>
        </member>
        <member name="M:TVA.ByteEncoding.BytesToString(System.Byte[],System.Int32,System.Int32,System.Char,System.String)">
            <summary>Handles byte to string conversions for implementations that are available from Byte.ToString.</summary>
            <param name="bytes">Encoded string to decode.</param>
            <param name="offset">Offset into byte array to begin decoding straing at.</param>
            <param name="length">Number of bytes to decode starting at <paramref name="offset"/></param>
            <param name="spacingCharacter">Character to insert between each byte</param>
            <param name="format">String decoding format.</param>
            <returns>Decoded string</returns>
        </member>
        <member name="P:TVA.ByteEncoding.Hexadecimal">
            <summary>Handles encoding and decoding of a byte buffer into a hexadecimal-based presentation format.</summary>
        </member>
        <member name="P:TVA.ByteEncoding.Decimal">
            <summary>Handles encoding and decoding of a byte buffer into an integer-based presentation format.</summary>
        </member>
        <member name="P:TVA.ByteEncoding.BigEndianBinary">
            <summary>Handles encoding and decoding of a byte buffer into a big-endian binary (i.e., 0 and 1's) based
            presentation format.</summary>
            <remarks>
            Although endianness is typically used in the context of byte order (see <see cref="T:TVA.EndianOrder"/> to handle byte
            order swapping), this property allows you visualize "bits" in big-endian order, right-to-left. Note that bits are
            normally stored in the same order as their bytes.).
            </remarks>
        </member>
        <member name="P:TVA.ByteEncoding.LittleEndianBinary">
            <summary>Handles encoding and decoding of a byte buffer into a little-endian binary (i.e., 0 and 1's) based
            presentation format.</summary>
            <remarks>
            Although endianness is typically used in the context of byte order (see <see cref="T:TVA.EndianOrder"/> to handle byte
            order swapping), this property allows you visualize "bits" in little-endian order, left-to-right. Note that bits are
            normally stored in the same order as their bytes.
            </remarks>
        </member>
        <member name="P:TVA.ByteEncoding.Base64">
            <summary>Handles encoding and decoding of a byte buffer into a base64 presentation format.</summary>
        </member>
        <member name="P:TVA.ByteEncoding.ASCII">
            <summary>Handles encoding and decoding of a byte buffer into an ASCII character presentation format.</summary>
        </member>
        <member name="T:TVA.ByteEncoding.HexadecimalEncoding">
            <summary>
            Handles conversion of byte buffers to and from a hexadecimal data format.
            </summary>
        </member>
        <member name="M:TVA.ByteEncoding.HexadecimalEncoding.GetBytes(System.String,System.Char)">
            <summary>Decodes given string back into a byte buffer.</summary>
            <param name="hexData">Encoded hexadecimal data string to decode.</param>
            <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.HexadecimalEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
            <summary>Encodes given buffer into a user presentable representation.</summary>
            <param name="bytes">Bytes to encode.</param>
            <param name="offset">Offset into buffer to begin encoding.</param>
            <param name="length">Length of buffer to encode.</param>
            <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
            <returns>String of encoded bytes.</returns>
        </member>
        <member name="T:TVA.ByteEncoding.DecimalEncoding">
            <summary>
            Handles conversion of byte buffers to and from a decimal data format.
            </summary>
        </member>
        <member name="M:TVA.ByteEncoding.DecimalEncoding.GetBytes(System.String,System.Char)">
            <summary>Decodes given string back into a byte buffer.</summary>
            <param name="decData">Encoded decimal data string to decode.</param>
            <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.DecimalEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
            <summary>Encodes given buffer into a user presentable representation.</summary>
            <param name="bytes">Bytes to encode.</param>
            <param name="offset">Offset into buffer to begin encoding.</param>
            <param name="length">Length of buffer to encode.</param>
            <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
            <returns>String of encoded bytes.</returns>
        </member>
        <member name="T:TVA.ByteEncoding.BinaryEncoding">
            <summary>
            Handles conversion of byte buffers to and from a binary (i.e., 0 and 1's) data format.
            </summary>
        </member>
        <member name="M:TVA.ByteEncoding.BinaryEncoding.GetBytes(System.String,System.Char)">
            <summary>Decodes given string back into a byte buffer.</summary>
            <param name="binaryData">Encoded binary data string to decode.</param>
            <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.BinaryEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
            <summary>Encodes given buffer into a user presentable representation.</summary>
            <param name="bytes">Bytes to encode.</param>
            <param name="offset">Offset into buffer to begin encoding.</param>
            <param name="length">Length of buffer to encode.</param>
            <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
            <returns>String of encoded bytes.</returns>
        </member>
        <member name="T:TVA.ByteEncoding.Base64Encoding">
            <summary>
            Handles conversion of byte buffers to and from a base64 data format.
            </summary>
        </member>
        <member name="M:TVA.ByteEncoding.Base64Encoding.GetBytes(System.String,System.Char)">
            <summary>Decodes given string back into a byte buffer.</summary>
            <param name="binaryData">Encoded binary data string to decode.</param>
            <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.Base64Encoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
            <summary>Encodes given buffer into a user presentable representation.</summary>
            <param name="bytes">Bytes to encode.</param>
            <param name="offset">Offset into buffer to begin encoding.</param>
            <param name="length">Length of buffer to encode.</param>
            <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
            <returns>String of encoded bytes.</returns>
        </member>
        <member name="T:TVA.ByteEncoding.ASCIIEncoding">
            <summary>
            Handles conversion of byte buffers to and from a ASCII data format.
            </summary>
        </member>
        <member name="M:TVA.ByteEncoding.ASCIIEncoding.GetBytes(System.String,System.Char)">
            <summary>Decodes given string back into a byte buffer.</summary>
            <param name="binaryData">Encoded binary data string to decode.</param>
            <param name="spacingCharacter">Original spacing character that was inserted between encoded bytes.</param>
            <returns>Decoded bytes.</returns>
        </member>
        <member name="M:TVA.ByteEncoding.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32,System.Char)">
            <summary>Encodes given buffer into a user presentable representation.</summary>
            <param name="bytes">Bytes to encode.</param>
            <param name="offset">Offset into buffer to begin encoding.</param>
            <param name="length">Length of buffer to encode.</param>
            <param name="spacingCharacter">Spacing character to place between encoded bytes.</param>
            <returns>String of encoded bytes.</returns>
        </member>
        <member name="T:TVA.BufferExtensions">
            <summary>Defines extension functions related to buffer manipulation.</summary>
        </member>
        <member name="M:TVA.BufferExtensions.BlockCopy(System.Byte[],System.Int32,System.Int32)">
            <summary>Returns a copy of the specified portion of the <paramref name="source"/> buffer.</summary>
            <param name="source">Source buffer.</param>
            <param name="startIndex">Offset into <paramref name="source"/> buffer.</param>
            <param name="length">Length of <paramref name="source"/> buffer to copy at <paramref name="startIndex"/> offset.</param>
            <returns>A buffer of data copied from the specified portion of the source buffer.</returns>
            <remarks>
            Returned buffer will be extended as needed to make it the specified <paramref name="length"/>, but
            it will never be less than the source buffer length - <paramref name="startIndex"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes for the source buffer -or-
            <paramref name="length"/> is less than 0.
            </exception>
        </member>
        <member name="M:TVA.BufferExtensions.Combine(System.Byte[],System.Byte[])">
            <summary>
            Combines buffers together as a single image.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="other">Other buffer to combine to <paramref name="source"/> buffer.</param>
            <returns>Combined buffers.</returns>
        </member>
        <member name="M:TVA.BufferExtensions.Combine(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Combines specified portions of buffers together as a single image.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="sourceOffset">Offset into <paramref name="source"/> buffer to begin copy.</param>
            <param name="sourceCount">Number of bytes to copy from <paramref name="source"/> buffer.</param>
            <param name="other">Other buffer to combine to <paramref name="source"/> buffer.</param>
            <param name="otherOffset">Offset into <paramref name="other"/> buffer to begin copy.</param>
            <param name="otherCount">Number of bytes to copy from <paramref name="other"/> buffer.</param>
            <returns>Combined specified portions of both buffers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceOffset"/> or <paramref name="otherOffset"/> is outside the range of valid indexes for the associated buffer -or-
            <paramref name="sourceCount"/> or <paramref name="otherCount"/> is less than 0 -or- 
            <paramref name="sourceOffset"/> or <paramref name="otherOffset"/>, 
            and <paramref name="sourceCount"/> or <paramref name="otherCount"/> do not specify a valid section in the the associated buffer.
            </exception>
        </member>
        <member name="M:TVA.BufferExtensions.Combine(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combines buffers together as a single image.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="other1">First buffer to combine to <paramref name="source"/> buffer.</param>
            <param name="other2">Second buffer to combine to <paramref name="source"/> buffer.</param>
            <returns>Combined buffers.</returns>
        </member>
        <member name="M:TVA.BufferExtensions.Combine(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combines buffers together as a single image.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="other1">First buffer to combine to <paramref name="source"/> buffer.</param>
            <param name="other2">Second buffer to combine to <paramref name="source"/> buffer.</param>
            <param name="other3">Third buffer to combine to <paramref name="source"/> buffer.</param>
            <returns>Combined buffers.</returns>
        </member>
        <member name="M:TVA.BufferExtensions.Combine(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Combines buffers together as a single image.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="other1">First buffer to combine to <paramref name="source"/> buffer.</param>
            <param name="other2">Second buffer to combine to <paramref name="source"/> buffer.</param>
            <param name="other3">Third buffer to combine to <paramref name="source"/> buffer.</param>
            <param name="other4">Fourth buffer to combine to <paramref name="source"/> buffer.</param>
            <returns>Combined buffers.</returns>
        </member>
        <member name="M:TVA.BufferExtensions.Combine(System.Byte[][])">
            <summary>
            Combines array of buffers together as a single image.
            </summary>
            <param name="buffers">Array of byte buffers.</param>
            <returns>Combined buffers.</returns>
        </member>
        <member name="M:TVA.BufferExtensions.IndexOfSequence(System.Byte[],System.Byte[])">
            <summary>
            Searches for the specified sequence of <paramref name="bytesToFind"/> and returns the index of the first occurrence within the <paramref name="buffer"/>.
            </summary>
            <param name="buffer">Buffer to search.</param>
            <param name="bytesToFind">Byte sequence to search for.</param>
            <returns>The zero-based index of the first occurance of the sequence of <paramref name="bytesToFind"/> in the <paramref name="buffer"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:TVA.BufferExtensions.IndexOfSequence(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Searches for the specified sequence of <paramref name="bytesToFind"/> and returns the index of the first occurrence within the range of elements in the <paramref name="buffer"/> that starts at the specified index.
            </summary>
            <param name="buffer">Buffer to search.</param>
            <param name="bytesToFind">Byte sequence to search for.</param>
            <param name="startIndex">Start index in the <paramref name="buffer"/> to start searching.</param>
            <returns>The zero-based index of the first occurance of the sequence of <paramref name="bytesToFind"/> in the <paramref name="buffer"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:TVA.BufferExtensions.IndexOfSequence(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Searches for the specified sequence of <paramref name="bytesToFind"/> and returns the index of the first occurrence within the range of elements in the <paramref name="buffer"/> that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="buffer">Buffer to search.</param>
            <param name="bytesToFind">Byte sequence to search for.</param>
            <param name="startIndex">Start index in the <paramref name="buffer"/> to start searching.</param>
            <param name="length">Number of bytes in the <paramref name="buffer"/> to search through.</param>
            <returns>The zero-based index of the first occurance of the sequence of <paramref name="bytesToFind"/> in the <paramref name="buffer"/>, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytesToFind"/> is null or has zero length.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes for the source buffer -or-
            <paramref name="length"/> is less than 0.
            </exception>
        </member>
        <member name="M:TVA.BufferExtensions.CompareTo(System.Byte[],System.Byte[])">
            <summary>Returns comparision results of two binary buffers.</summary>
            <param name="source">Source buffer.</param>
            <param name="other">Other buffer to compare to <paramref name="source"/> buffer.</param>
            <returns>
            <para>
            A signed integer that indicates the relative comparison of <paramref name="source"/> buffer and <paramref name="other"/> buffer.
            </para>
            <para>
            <list type="table">
                <listheader>
                    <term>Return Value</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <description>Source buffer is less than other buffer.</description>
                </item>
                <item>
                    <term>Zero</term>
                    <description>Source buffer is equal to other buffer.</description>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <description>Source buffer is greater than other buffer.</description>
                </item>
            </list>
            </para>
            </returns>
        </member>
        <member name="M:TVA.BufferExtensions.CompareTo(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns comparision results of two binary buffers.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="sourceOffset">Offset into <paramref name="source"/> buffer to begin compare.</param>
            <param name="other">Other buffer to compare to <paramref name="source"/> buffer.</param>
            <param name="otherOffset">Offset into <paramref name="other"/> buffer to begin compare.</param>
            <param name="count">Number of bytes to compare in both buffers.</param>
            <returns>
            <para>
            A signed integer that indicates the relative comparison of <paramref name="source"/> buffer and <paramref name="other"/> buffer.
            </para>
            <para>
            <list type="table">
                <listheader>
                    <term>Return Value</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <description>Source buffer is less than other buffer.</description>
                </item>
                <item>
                    <term>Zero</term>
                    <description>Source buffer is equal to other buffer.</description>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <description>Source buffer is greater than other buffer.</description>
                </item>
            </list>
            </para>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceOffset"/> or <paramref name="otherOffset"/> is outside the range of valid indexes for the associated buffer -or-
            <paramref name="count"/> is less than 0 -or- 
            <paramref name="sourceOffset"/> or <paramref name="otherOffset"/> and <paramref name="count"/> do not specify a valid section in the the associated buffer.
            </exception>
        </member>
        <member name="T:TVA.BitwiseCast">
            <summary>Defines specialized bitwise integer data type conversion functions</summary>
            <remarks>
            This class allows for proper bitwise casting between signed and unsigned integers. It may be most
            useful in languages that do not allow override of numerical overflow checks.  For example, C#
            provides an "unchecked" keyword to allow for bitwise casting, but VB.NET does not.
            </remarks>
        </member>
        <member name="M:TVA.BitwiseCast.ToInt16(System.UInt16)">
            <summary>Performs proper bitwise conversion between unsigned and signed value</summary>
            <remarks>
            <para>This function is useful because Convert.ToInt16 will throw an OverflowException for values greater than Int16.MaxValue.</para>
            <para>For example, this function correctly converts unsigned 16-bit integer 65535 (i.e., UInt16.MaxValue) to signed 16-bit integer -1.</para>
            </remarks>
            <param name="unsignedInt">Unsigned short that is passed in to be converted to a signed short.</param>
            <returns>The converted short value.</returns>
        </member>
        <member name="M:TVA.BitwiseCast.ToInt24(TVA.UInt24)">
            <summary>Performs proper bitwise conversion between unsigned and signed value</summary>
            <remarks>
            <para>This function is useful because CType(n, Int24) will throw an OverflowException for values greater than Int24.MaxValue.</para>
            <para>For example, this function correctly converts unsigned 24-bit integer 16777215 (i.e., UInt24.MaxValue) to signed 24-bit integer -1.</para>
            </remarks>
            <param name="unsignedInt">Unsigned UInt24 that is passed in to be converted to a signed Int24.</param>
            <returns>The Int24 value.</returns>
        </member>
        <member name="M:TVA.BitwiseCast.ToInt32(System.UInt32)">
            <summary>Performs proper bitwise conversion between unsigned and signed value</summary>
            <remarks>
            <para>This function is useful because Convert.ToInt32 will throw an OverflowException for values greater than Int32.MaxValue.</para>
            <para>For example, this function correctly converts unsigned 32-bit integer 4294967295 (i.e., UInt32.MaxValue) to signed 32-bit integer -1.</para>
            </remarks>
            <param name="unsignedInt">Unsigned integer that is passed in to be converted to a signed Int32.</param>
            <returns>The int value.</returns>
        </member>
        <member name="M:TVA.BitwiseCast.ToInt64(System.UInt64)">
            <summary>Performs proper bitwise conversion between unsigned and signed value</summary>
            <remarks>
            <para>This function is useful because Convert.ToInt64 will throw an OverflowException for values greater than Int64.MaxValue.</para>
            <para>For example, this function correctly converts unsigned 64-bit integer 18446744073709551615 (i.e., UInt64.MaxValue) to signed 64-bit integer -1.</para>
            </remarks>
            <param name="unsignedInt">Unsigned integer that is passed in to be converted to a long.</param>
            <returns>The long value.</returns>
        </member>
        <member name="M:TVA.BitwiseCast.ToUInt16(System.Int16)">
            <summary>Performs proper bitwise conversion between signed and unsigned value</summary>
            <remarks>
            <para>This function is useful because Convert.ToUInt16 will throw an OverflowException for values less than zero.</para>
            <para>For example, this function correctly converts signed 16-bit integer -32768 (i.e., Int16.MinValue) to unsigned 16-bit integer 32768.</para>
            </remarks>
            <param name="signedInt">Signed integer that is passed in to be converted to an unsigned short.</param>
            <returns>The unsigned short value.</returns>
        </member>
        <member name="M:TVA.BitwiseCast.ToUInt24(TVA.Int24)">
            <summary>Performs proper bitwise conversion between signed and unsigned value</summary>
            <remarks>
            <para>This function is useful because CType(n, UInt24) will throw an OverflowException for values less than zero.</para>
            <para>For example, this function correctly converts signed 24-bit integer -8388608 (i.e., Int24.MinValue) to unsigned 24-bit integer 8388608.</para>
            </remarks>
            <param name="signedInt">Signed integer that is passed in to be converted to an unsigned integer.</param>
            <returns>The unsigned integer value.</returns>
        </member>
        <member name="M:TVA.BitwiseCast.ToUInt32(System.Int32)">
            <summary>Performs proper bitwise conversion between signed and unsigned value</summary>
            <remarks>
            <para>This function is useful because Convert.ToUInt32 will throw an OverflowException for values less than zero.</para>
            <para>For example, this function correctly converts signed 32-bit integer -2147483648 (i.e., Int32.MinValue) to unsigned 32-bit integer 2147483648.</para>
            </remarks>
            <param name="signedInt">Signed integer that is passed in to be converted to an unsigned integer.</param>
            <returns>The unsigned integer value.</returns>
        </member>
        <member name="M:TVA.BitwiseCast.ToUInt64(System.Int64)">
            <summary>Performs proper bitwise conversion between signed and unsigned value</summary>
            <remarks>
            <para>This function is useful because Convert.ToUInt64 will throw an OverflowException for values less than zero.</para>
            <para>For example, this function correctly converts signed 64-bit integer -9223372036854775808 (i.e., Int64.MinValue) to unsigned 64-bit integer 9223372036854775808.</para>
            </remarks>
            <param name="signedInt">Signed integer that is passed in to be converted to an unsigned long.</param>
            <returns>The unsigned long value.</returns>
        </member>
        <member name="T:TVA.Units.Length">
            <summary>Represents a length measurement, in meters, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a length in meters; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other length representations, specifically
            inches, feet, yards, miles, US survey feet, US survey miles, light-seconds, and nautical miles.
            Metric conversions are handled simply by applying the needed <see cref="T:TVA.Units.SI"/> conversion factor, for example:
            <example>
            Convert length in meters to kilometers:
            <code>
            public double GetKilometers(Length meters)
            {
                return meters / SI.Kilo;
            }
            </code>
            This example converts feet to inches:
            <code>
            public double GetFeet(double inches)
            {
                return Length.FromInches(inches).ToFeet();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Length.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Length"/>.
            </summary>
            <param name="value">New length value in meters.</param>
        </member>
        <member name="M:TVA.Units.Length.ToFeet">
            <summary>
            Gets the <see cref="T:TVA.Units.Length"/> value in feet.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Length"/> in feet.</returns>
        </member>
        <member name="M:TVA.Units.Length.ToYards">
            <summary>
            Gets the <see cref="T:TVA.Units.Length"/> value in yards.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Length"/> in yards.</returns>
        </member>
        <member name="M:TVA.Units.Length.ToInches">
            <summary>
            Gets the <see cref="T:TVA.Units.Length"/> value in inches.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Length"/> in inches.</returns>
        </member>
        <member name="M:TVA.Units.Length.ToMiles">
            <summary>
            Gets the <see cref="T:TVA.Units.Length"/> value in miles.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Length"/> in miles.</returns>
        </member>
        <member name="M:TVA.Units.Length.ToLightSeconds">
            <summary>
            Gets the <see cref="T:TVA.Units.Length"/> value in light-seconds.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Length"/> in light-seconds.</returns>
        </member>
        <member name="M:TVA.Units.Length.ToUSSurveyFeet">
            <summary>
            Gets the <see cref="T:TVA.Units.Length"/> value in US survey feet.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Length"/> in US survey feet.</returns>
        </member>
        <member name="M:TVA.Units.Length.ToUSSurveyMiles">
            <summary>
            Gets the <see cref="T:TVA.Units.Length"/> value in US survey miles.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Length"/> in US survey miles.</returns>
        </member>
        <member name="M:TVA.Units.Length.ToNauticalMiles">
            <summary>
            Gets the <see cref="T:TVA.Units.Length"/> value in nautical miles.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Length"/> in nautical miles.</returns>
        </member>
        <member name="M:TVA.Units.Length.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Length"/>.</exception>
        </member>
        <member name="M:TVA.Units.Length.CompareTo(TVA.Units.Length)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Length"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Length"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Length"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.Equals(TVA.Units.Length)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Length"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Length"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Length.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Length"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Length"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Length.MinValue"/> or greater than <see cref="F:TVA.Units.Length.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Length.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Length"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Length"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Length.MinValue"/> or greater than <see cref="F:TVA.Units.Length.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Length.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Length"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Length"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Length.MinValue"/> or greater than <see cref="F:TVA.Units.Length.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Length.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Length"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Length"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Length.MinValue"/> or greater than <see cref="F:TVA.Units.Length.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Length.TryParse(System.String,TVA.Units.Length@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Length"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Length"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Length.MinValue"/> or greater than <see cref="F:TVA.Units.Length.MaxValue"/>.
            This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Length.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Length@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Length"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Length"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Length.MinValue"/> or
            greater than <see cref="F:TVA.Units.Length.MaxValue"/>. This parameter is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Length.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Equality(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Inequality(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_LessThan(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_LessThanOrEqual(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_GreaterThan(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_GreaterThanOrEqual(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Implicit(System.Double)~TVA.Units.Length">
            <summary>
            Implicitly converts value, represented in meters, to a <see cref="T:TVA.Units.Length"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Length"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Implicit(TVA.Units.Length)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Length"/>, represented in meters, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Length"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Modulus(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Length"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Addition(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Length"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Subtraction(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Length"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Multiply(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Length"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Division(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Length"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Length.op_Exponent(TVA.Units.Length,TVA.Units.Length)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Length"/> object left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Length"/> object right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result.</returns>
        </member>
        <member name="F:TVA.Units.Length.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Length"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Length.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Length"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Length.FromFeet(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Length"/> value from the specified <paramref name="value"/> in feet.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Length"/> value in feet.</param>
            <returns>New <see cref="T:TVA.Units.Length"/> object from the specified <paramref name="value"/> in feet.</returns>
        </member>
        <member name="M:TVA.Units.Length.FromYards(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Length"/> value from the specified <paramref name="value"/> in yards.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Length"/> value in yards.</param>
            <returns>New <see cref="T:TVA.Units.Length"/> object from the specified <paramref name="value"/> in yards.</returns>
        </member>
        <member name="M:TVA.Units.Length.FromInches(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Length"/> value from the specified <paramref name="value"/> in inches.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Length"/> value in inches.</param>
            <returns>New <see cref="T:TVA.Units.Length"/> object from the specified <paramref name="value"/> in inches.</returns>
        </member>
        <member name="M:TVA.Units.Length.FromMiles(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Length"/> value from the specified <paramref name="value"/> in miles.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Length"/> value in miles.</param>
            <returns>New <see cref="T:TVA.Units.Length"/> object from the specified <paramref name="value"/> in miles.</returns>
        </member>
        <member name="M:TVA.Units.Length.FromLightSeconds(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Length"/> value from the specified <paramref name="value"/> in light-seconds.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Length"/> value in light-seconds.</param>
            <returns>New <see cref="T:TVA.Units.Length"/> object from the specified <paramref name="value"/> in light-seconds.</returns>
        </member>
        <member name="M:TVA.Units.Length.FromUSSurveyFeet(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Length"/> value from the specified <paramref name="value"/> in US survey feet.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Length"/> value in US survey feet.</param>
            <returns>New <see cref="T:TVA.Units.Length"/> object from the specified <paramref name="value"/> in US survey feet.</returns>
        </member>
        <member name="M:TVA.Units.Length.FromUSSurveyMiles(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Length"/> value from the specified <paramref name="value"/> in US survey miles.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Length"/> value in US survey miles.</param>
            <returns>New <see cref="T:TVA.Units.Length"/> object from the specified <paramref name="value"/> in US survey miles.</returns>
        </member>
        <member name="M:TVA.Units.Length.FromNauticalMiles(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Length"/> value from the specified <paramref name="value"/> in nautical miles.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Length"/> value in nautical miles.</param>
            <returns>New <see cref="T:TVA.Units.Length"/> object from the specified <paramref name="value"/> in nautical miles.</returns>
        </member>
        <member name="T:TVA.Scheduling.NamespaceDoc">
            <summary>
            Contains classes used to schedule operations using standard UNIX crontab syntax.
            </summary>
        </member>
        <member name="T:TVA.TimerCapabilities">
            <summary>
            Represents information about the system's multimedia timer capabilities.
            </summary>
        </member>
        <member name="F:TVA.TimerCapabilities.PeriodMinimum">
            <summary>Minimum supported period in milliseconds.</summary>
        </member>
        <member name="F:TVA.TimerCapabilities.PeriodMaximum">
            <summary>Maximum supported period in milliseconds.</summary>
        </member>
        <member name="T:TVA.TimerStartException">
            <summary>
            Represents an exception that is thrown when a <see cref="T:TVA.PrecisionTimer"/> fails to start.
            </summary>
        </member>
        <member name="M:TVA.TimerStartException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.TimerStartException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:TVA.PrecisionTimer">
            <summary>
            Represents a high-resolution timer and timestamp class.
            </summary>
            <remarks>Implementation based on Windows multimedia timer.</remarks>
        </member>
        <member name="M:TVA.PrecisionTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.PrecisionTimer"/> class.
            </summary>
        </member>
        <member name="M:TVA.PrecisionTimer.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.PrecisionTimer"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.PrecisionTimer.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.PrecisionTimer"/> object.
            </summary>
        </member>
        <member name="M:TVA.PrecisionTimer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.PrecisionTimer"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.PrecisionTimer.Start">
            <summary>
            Starts the <see cref="T:TVA.PrecisionTimer"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
            <exception cref="T:TVA.TimerStartException">
            The timer failed to start.
            </exception>
        </member>
        <member name="M:TVA.PrecisionTimer.Start(System.EventArgs)">
            <summary>
            Starts the <see cref="T:TVA.PrecisionTimer"/> with the specified <see cref="P:TVA.PrecisionTimer.EventArgs"/>.
            </summary>
            <param name="userArgs">User defined event arguments to pass into raised <see cref="T:TVA.Ticks"/> event.</param>
            <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
            <exception cref="T:TVA.TimerStartException">
            The timer failed to start.
            </exception>
        </member>
        <member name="M:TVA.PrecisionTimer.Stop">
            <summary>
            Stops <see cref="T:TVA.PrecisionTimer"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="M:TVA.PrecisionTimer.SetMinimumTimerResolution(System.Int32)">
            <summary>
            Requests a minimum resolution for periodic timers such as the <see cref="T:TVA.PrecisionTimer"/>.
            </summary>
            <param name="period">
            Minimum timer resolution, in milliseconds, for the application. A lower value specifies a higher (more accurate) resolution.
            </param>
            <remarks>
            Call this function immediately before using the <see cref="T:TVA.PrecisionTimer"/> and call <see cref="M:TVA.PrecisionTimer.ClearMinimumTimerResolution(System.Int32)"/>
            immediately after you are finished using the PrecisionTimer. You must match each call to <see cref="M:TVA.PrecisionTimer.SetMinimumTimerResolution(System.Int32)"/>
            with a call to ClearMinimumTimerResolution specifying the same minimum resolution <paramref name="period"/> in both calls.
            An application can make multiple ClearMinimumTimerResolution calls as long as each call is matched with a call to ClearMinimumTimerResolution.
            This function affects a global Windows setting. Windows uses the lowest value (that is, highest resolution) requested by any process.
            Setting a higher resolution can improve the accuracy of time-out intervals in wait functions. However, it can also reduce overall system
            performance, because the thread scheduler switches tasks more often. High resolutions can also prevent the CPU power management system from
            entering power-saving modes. See timeBeginPeriod Windows API for more information.
            </remarks>
        </member>
        <member name="M:TVA.PrecisionTimer.ClearMinimumTimerResolution(System.Int32)">
            <summary>
            Clears a previously set minimum timer resolution established using <see cref="M:TVA.PrecisionTimer.SetMinimumTimerResolution(System.Int32)"/>.
            </summary>
            <param name="period">
            Minimum timer resolution specified in the previous call to the <see cref="M:TVA.PrecisionTimer.SetMinimumTimerResolution(System.Int32)"/> function.
            </param>
            <remarks>
            Call this function immediately after you are finished using the <see cref="T:TVA.PrecisionTimer"/>. You must match each call to
            <see cref="M:TVA.PrecisionTimer.SetMinimumTimerResolution(System.Int32)"/> with a call to <see cref="M:TVA.PrecisionTimer.ClearMinimumTimerResolution(System.Int32)"/>, specifying the same minimum
            resolution <paramref name="period"/> in both calls. An application can make multiple SetMinimumTimerResolution calls as long
            as each call is matched with a call to ClearMinimumTimerResolution.
            </remarks>
        </member>
        <member name="E:TVA.PrecisionTimer.Started">
            <summary>
            Occurs when the <see cref="T:TVA.PrecisionTimer"/> has started.
            </summary>
        </member>
        <member name="E:TVA.PrecisionTimer.Stopped">
            <summary>
            Occurs when the <see cref="T:TVA.PrecisionTimer"/> has stopped.
            </summary>
        </member>
        <member name="E:TVA.PrecisionTimer.Tick">
            <summary>
            Occurs when the <see cref="T:TVA.PrecisionTimer"/> period has elapsed.
            </summary>
        </member>
        <member name="P:TVA.PrecisionTimer.Period">
            <summary>
            Gets or sets the time between <see cref="E:TVA.PrecisionTimer.Tick"/> events, in milliseconds.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:TVA.PrecisionTimer.Resolution">
            <summary>
            Gets or sets the <see cref="T:TVA.PrecisionTimer"/> resolution, in milliseconds.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
            <remarks>
            The resolution is in milliseconds. The resolution increases  with smaller values;
            a resolution of 0 indicates periodic events  should occur with the greatest possible
            accuracy. To reduce system  overhead, however, you should use the maximum value
            appropriate for your application.
            </remarks>
        </member>
        <member name="P:TVA.PrecisionTimer.AutoReset">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:TVA.PrecisionTimer"/> should raise the
            <see cref="E:TVA.PrecisionTimer.Tick"/> event each time the specified period elapses or only after the first
            time it elapses.
            </summary>
            <remarks>
            </remarks>
            <returns>
            <c>true</c>true if the <see cref="T:TVA.PrecisionTimer"/> should raise the <see cref="T:TVA.Ticks"/>
            event each time the interval elapses; <c>false</c> if it should raise the event only once
            after the first time the interval elapses. The default is <c>true</c>.
            </returns>
        </member>
        <member name="P:TVA.PrecisionTimer.IsRunning">
            <summary>
            Gets a value indicating whether the <see cref="T:TVA.PrecisionTimer"/> is running.
            </summary>
        </member>
        <member name="P:TVA.PrecisionTimer.EventArgs">
            <summary>
            Gets <see cref="T:System.EventArgs"/> specified in <see cref="M:TVA.PrecisionTimer.Start(System.EventArgs)"/> used to pass into <see cref="E:TVA.PrecisionTimer.Tick"/> event.
            </summary>
        </member>
        <member name="P:TVA.PrecisionTimer.UtcNow">
            <summary>
            Gets a high-resolution <see cref="T:System.DateTime"/> value of the current time on this computer,
            expressed in Coordinated Universal Time (UTC).
            </summary>
            <remarks>
            <para>
            This shared property provides a way to get a <see cref="T:System.DateTime"/> value that exhibits the relative
            precision of <see cref="T:System.Diagnostics.Stopwatch"/>, and the absolute accuracy of <see cref="P:System.DateTime.UtcNow"/>.
            </para>
            <para>
            This property is useful for obtaining high-resolution accuarate timestamps for events that occur in the
            "sub-second" world (e.g., timestamping events happening hundreds or thousands of times per second).
            Note that the normal <see cref="P:System.DateTime.UtcNow"/> property has a maximum resolution of ~16 milliseconds.
            </para>
            </remarks>
        </member>
        <member name="P:TVA.PrecisionTimer.Now">
            <summary>
            Gets a high-resolution <see cref="T:System.DateTime"/> value of the current time on this computer,
            expressed in the local time zone.
            </summary>
            <remarks>
            <para>
            This shared property provides a way to get a <see cref="T:System.DateTime"/> value that exhibits the relative
            precision of <see cref="T:System.Diagnostics.Stopwatch"/>, and the absolute accuracy of <see cref="P:System.DateTime.Now"/>.
            </para>
            <para>
            This property is useful for obtaining high-resolution accuarate timestamps for events that occur in the
            "sub-second" world (e.g., timestamping events happening hundreds or thousands of times per second).
            Note that the normal <see cref="P:System.DateTime.Now"/> property has a maximum resolution of ~16 milliseconds.
            </para>
            </remarks>
        </member>
        <member name="P:TVA.PrecisionTimer.Capabilities">
            <summary>
            Gets the system multimedia timer capabilities.
            </summary>
        </member>
        <member name="T:TVA.PrecisionTimer.PreciseTime">
            <summary>
            This class provides a way to get a DateTime that exhibits the relative precision of
            System.Diagnostics.Stopwatch, and the absolute accuracy of DateTime.Now.
            </summary>
            <remarks>
            This class is based on James Brock's DateTimePrecise class which can be found on the Code Project:
            http://www.codeproject.com/KB/cs/DateTimePrecise.aspx?msg=2688543#xx2688543xx
            </remarks>
        </member>
        <member name="M:TVA.PrecisionTimer.PreciseTime.#ctor(System.Int64)">
            <summary>Creates a new instance of DateTimePrecise.</summary>
            <remarks>
            A large value of synchronizePeriodSeconds may cause arithmetic overthrow
            exceptions to be thrown. A small value may cause the time to be unstable.
            A good value is 10.
            </remarks>
            <param name="synchronizePeriodSeconds">The number of seconds after which the class will synchronize itself with the system clock.</param>
        </member>
        <member name="T:TVA.Parsing.BinaryImageBase">
            <summary>
            Defines a base class that represents binary images for parsing or generation in terms of a header, body and footer.
            </summary>
        </member>
        <member name="T:TVA.Parsing.ISupportBinaryImage">
            <summary>
            Specifies that this <see cref="T:System.Type"/> can support production or consumption of a binary image that represents the object.
            </summary>
        </member>
        <member name="M:TVA.Parsing.ISupportBinaryImage.Initialize(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes object from the specified binary image.
            </summary>
            <param name="binaryImage">Binary image to be used for initialization.</param>
            <param name="startIndex">0-based starting index in the <paramref name="binaryImage"/> to be used for initialization.</param>
            <param name="length">Valid number of bytes within binary image.</param>
            <returns>The number of bytes used for initialization in the <paramref name="binaryImage"/> (i.e., the number of bytes parsed).</returns>
        </member>
        <member name="P:TVA.Parsing.ISupportBinaryImage.BinaryImage">
            <summary>
            Gets the binary image of the object.
            </summary>
        </member>
        <member name="P:TVA.Parsing.ISupportBinaryImage.BinaryLength">
            <summary>
            Gets the length of the binary image.
            </summary>
            <remarks>
            <see cref="P:TVA.Parsing.ISupportBinaryImage.BinaryLength"/> should typically be a constant value but does not have to be.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.BinaryImageBase.Initialize(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the binary image.
            </summary>
            <param name="binaryImage">Binary image to parse.</param>
            <param name="startIndex">Start index into <paramref name="binaryImage"/> to begin parsing.</param>
            <param name="length">Length of valid data within <paramref name="binaryImage"/>.</param>
            <returns>The length of the data that was parsed.</returns>
            <remarks>
            This method is not typically overriden since it is parses the header, body and footer images in sequence.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.BinaryImageBase.ParseHeaderImage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the binary header image.
            </summary>
            <param name="binaryImage">Binary image to parse.</param>
            <param name="startIndex">Start index into <paramref name="binaryImage"/> to begin parsing.</param>
            <param name="length">Length of valid data within <paramref name="binaryImage"/>.</param>
            <returns>The length of the data that was parsed.</returns>
            <remarks>
            This method is typically overriden by a specific protocol implementation.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.BinaryImageBase.ParseBodyImage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the binary body image.
            </summary>
            <param name="binaryImage">Binary image to parse.</param>
            <param name="startIndex">Start index into <paramref name="binaryImage"/> to begin parsing.</param>
            <param name="length">Length of valid data within <paramref name="binaryImage"/>.</param>
            <returns>The length of the data that was parsed.</returns>
            <remarks>
            This method is typically overriden by a specific protocol implementation.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.BinaryImageBase.ParseFooterImage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the binary footer image.
            </summary>
            <param name="binaryImage">Binary image to parse.</param>
            <param name="startIndex">Start index into <paramref name="binaryImage"/> to begin parsing.</param>
            <param name="length">Length of valid data within <paramref name="binaryImage"/>.</param>
            <returns>The length of the data that was parsed.</returns>
            <remarks>
            This method is typically overriden by a specific protocol implementation.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageBase.BinaryLength">
            <summary>
            Gets the length of the <see cref="P:TVA.Parsing.BinaryImageBase.BinaryImage"/>.
            </summary>
            <remarks>
            This property is not typically overriden since it is the sum of the header, body and footer lengths.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageBase.BinaryImage">
            <summary>
            Gets the binary image of the <see cref="T:TVA.Parsing.BinaryImageBase"/> object.
            </summary>
            <remarks>
            This property is not typically overriden since it is the combination of the header, body and footer images.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageBase.HeaderLength">
            <summary>
            Gets the length of the <see cref="P:TVA.Parsing.BinaryImageBase.HeaderImage"/>.
            </summary>
            <remarks>
            This property is typically overriden by a specific protocol implementation.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageBase.HeaderImage">
            <summary>
            Gets the binary header image of the <see cref="T:TVA.Parsing.BinaryImageBase"/> object.
            </summary>
            <remarks>
            This property is typically overriden by a specific protocol implementation.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageBase.BodyLength">
            <summary>
            Gets the length of the <see cref="P:TVA.Parsing.BinaryImageBase.BodyImage"/>.
            </summary>
            <remarks>
            This property is typically overriden by a specific protocol implementation.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageBase.BodyImage">
            <summary>
            Gets the binary body image of the <see cref="T:TVA.Parsing.BinaryImageBase"/> object.
            </summary>
            <remarks>
            This property is typically overriden by a specific protocol implementation.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageBase.FooterLength">
            <summary>
            Gets the length of the <see cref="P:TVA.Parsing.BinaryImageBase.FooterImage"/>.
            </summary>
            <remarks>
            This property is typically overriden by a specific protocol implementation.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageBase.FooterImage">
            <summary>
            Gets the binary footer image of the <see cref="T:TVA.Parsing.BinaryImageBase"/> object.
            </summary>
            <remarks>
            This property is typically overriden by a specific protocol implementation.
            </remarks>
        </member>
        <member name="T:TVA.NtpTimeTag">
            <summary>
            Represents a standard Network Time Protocol (NTP) timetag.
            </summary>
            <remarks>
            As recommended by RFC-2030, all NTP timestamps earlier than 3h 14m 08s UTC on 20 January 1968
            are reckoned from 6h 28m 16s UTC on 7 February 2036. This gives the <see cref="T:TVA.NtpTimeTag"/>
            class a functioning range of 1968-01-20 03:14:08 to 2104-02-26 09:42:23.
            </remarks>
        </member>
        <member name="T:TVA.TimeTagBase">
            <summary>
            Represents tha base class for alternate timetag implementations.
            </summary>
        </member>
        <member name="M:TVA.TimeTagBase.#ctor(System.Int64,System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.TimeTagBase"/>, given number base time (in ticks) and seconds since base time.
            </summary>
            <param name="baseDateOffsetTicks">Ticks of timetag base.</param>
            <param name="seconds">Number of seconds since base time.</param>
        </member>
        <member name="M:TVA.TimeTagBase.#ctor(System.Int64,TVA.Ticks)">
            <summary>
            Creates a new <see cref="T:TVA.TimeTagBase"/>, given standard .NET <see cref="T:System.DateTime"/>.
            </summary>
            <param name="baseDateOffsetTicks">Ticks of timetag base.</param>
            <param name="timestamp">Timestamp in <see cref="T:TVA.Ticks"/> used to create timetag from.</param>
        </member>
        <member name="M:TVA.TimeTagBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:TVA.TimeTagBase"/> from serialization parameters.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with populated with data.</param>
            <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this deserialization.</param>
        </member>
        <member name="M:TVA.TimeTagBase.ToDateTime">
            <summary>
            Returns standard .NET <see cref="T:System.DateTime"/> representation for timetag.
            </summary>
            <returns>A <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.ToString">
            <summary>
            Returns basic textual representation for timetag.
            </summary>
            <remarks>
            Format is "yyyy-MM-dd HH:mm:ss.fff" so that textual representation can be sorted in the
            correct chronological order.
            </remarks>
            <returns>A <see cref="T:System.String"/> value representing the timetag.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.ToString(System.String)">
            <summary>
            Returns textual representation for timetag in the specified <paramref name="format"/>.
            </summary>
            <param name="format">Format of text output.</param>
            <returns><see cref="T:System.String"/> of textual representation for timetag.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.ToString(System.IFormatProvider)">
            <summary>
            Returns textual representation for timetag using the specified <paramref name="provider"/>.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns><see cref="T:System.String"/> of textual representation for timetag.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns textual representation for timetag in the specified <paramref name="format"/> using 
            the specified <paramref name="provider"/>.
            </summary>
            <param name="format">Format of text output.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns><see cref="T:System.String"/> of textual representation for timetag.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.CompareTo(TVA.TimeTagBase)">
            <summary>
            Compares the <see cref="T:TVA.TimeTagBase"/> with another <see cref="T:TVA.TimeTagBase"/>.
            </summary>
            <param name="other">The <see cref="T:TVA.TimeTagBase"/> to compare with the current <see cref="T:TVA.TimeTagBase"/>.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.CompareTo(System.DateTime)">
            <summary>
            Compares the <see cref="T:TVA.TimeTagBase"/> with a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="other">The <see cref="T:System.DateTime"/> to compare with the current <see cref="T:TVA.TimeTagBase"/>.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.CompareTo(System.Object)">
            <summary>
            Compares the <see cref="T:TVA.TimeTagBase"/> with the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:TVA.TimeTagBase"/>.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
            <exception cref="T:System.ArgumentException"><see cref="T:System.Object"/> is not an <see cref="T:TVA.TimeTagBase"/> or a <see cref="T:System.DateTime"/>.</exception>
        </member>
        <member name="M:TVA.TimeTagBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:TVA.TimeTagBase"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:TVA.TimeTagBase"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:TVA.TimeTagBase"/>;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException"><see cref="T:System.Object"/> is not an <see cref="T:TVA.TimeTagBase"/>.</exception>
        </member>
        <member name="M:TVA.TimeTagBase.Equals(TVA.TimeTagBase)">
            <summary>
            Determines whether the specified <see cref="T:TVA.TimeTagBase"/> is equal to the current <see cref="T:TVA.TimeTagBase"/>.
            </summary>
            <param name="other">The <see cref="T:TVA.TimeTagBase"/> to compare with the current <see cref="T:TVA.TimeTagBase"/>.</param>
            <returns>
            true if the specified <see cref="T:TVA.TimeTagBase"/> is equal to the current <see cref="T:TVA.TimeTagBase"/>;
            otherwise, false.
            </returns>
        </member>
        <member name="M:TVA.TimeTagBase.Equals(System.DateTime)">
            <summary>
            Determines whether the specified <see cref="T:System.DateTime"/> is equal to the current <see cref="T:TVA.TimeTagBase"/>.
            </summary>
            <param name="other">The <see cref="T:System.DateTime"/> to compare with the current <see cref="T:TVA.TimeTagBase"/>.</param>
            <returns>
            true if the specified <see cref="T:System.DateTime"/> is equal to the current <see cref="T:TVA.TimeTagBase"/>;
            otherwise, false.
            </returns>
        </member>
        <member name="M:TVA.TimeTagBase.GetHashCode">
            <summary>
            Serves as a hash function for the current <see cref="T:TVA.TimeTagBase"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:TVA.TimeTagBase"/>.</returns>
            <remarks>Hash code based on number of seconds timetag represents.</remarks>
        </member>
        <member name="M:TVA.TimeTagBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
        </member>
        <member name="M:TVA.TimeTagBase.op_Equality(TVA.TimeTagBase,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_Equality(System.DateTime,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_Equality(TVA.TimeTagBase,System.DateTime)">
            <summary>
            Returns true if <paramref name="value1"/> is equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_Inequality(TVA.TimeTagBase,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is not equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is not equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_Inequality(System.DateTime,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is not equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is not equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_Inequality(TVA.TimeTagBase,System.DateTime)">
            <summary>
            Returns true if <paramref name="value1"/> is not equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is not equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_LessThan(TVA.TimeTagBase,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is less than <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is less than <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_LessThan(System.DateTime,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is less than <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is less than <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_LessThan(TVA.TimeTagBase,System.DateTime)">
            <summary>
            Returns true if <paramref name="value1"/> is less than <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is less than <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_LessThanOrEqual(TVA.TimeTagBase,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is less than or equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is less than or equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_LessThanOrEqual(System.DateTime,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is less than or equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is less than or equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_LessThanOrEqual(TVA.TimeTagBase,System.DateTime)">
            <summary>
            Returns true if <paramref name="value1"/> is less than or equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is less than or equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_GreaterThan(TVA.TimeTagBase,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is greater than <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is greater than <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_GreaterThan(System.DateTime,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is greater than <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is greater than <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_GreaterThan(TVA.TimeTagBase,System.DateTime)">
            <summary>
            Returns true if <paramref name="value1"/> is greater than <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is greater than <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_GreaterThanOrEqual(TVA.TimeTagBase,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is greater than or equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is greater than or equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_GreaterThanOrEqual(System.DateTime,TVA.TimeTagBase)">
            <summary>
            Returns true if <paramref name="value1"/> is greater than or equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is greater than or equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="M:TVA.TimeTagBase.op_GreaterThanOrEqual(TVA.TimeTagBase,System.DateTime)">
            <summary>
            Returns true if <paramref name="value1"/> is greater than or equal to <paramref name="value2"/>.
            </summary>
            <param name="value1">Value 1 in the comparision.</param>
            <param name="value2">Value 2 in the comparision.</param>
            <returns>true if <paramref name="value1"/> is greater than or equal to <paramref name="value2"/>; otherwise false.</returns>
        </member>
        <member name="P:TVA.TimeTagBase.Value">
            <summary>
            Gets or sets number of seconds (including any fractional seconds) since base time.
            </summary>
        </member>
        <member name="P:TVA.TimeTagBase.BaseDateOffsetTicks">
            <summary>
            Gets ticks representing the absolute minimum time of this timetag implementation.
            </summary>
        </member>
        <member name="M:TVA.NtpTimeTag.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.NtpTimeTag"/>, given number of seconds since 1/1/1900.
            </summary>
            <param name="seconds">Number of seconds since 1/1/1900.</param>
        </member>
        <member name="M:TVA.NtpTimeTag.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new <see cref="T:TVA.NtpTimeTag"/>, given number of seconds and fractional seconds since 1/1/1900.
            </summary>
            <param name="seconds">Number of seconds since 1/1/1900.</param>
            <param name="fraction">Number of fractional seconds, in whole picoseconds.</param>
        </member>
        <member name="M:TVA.NtpTimeTag.#ctor(System.UInt64)">
            <summary>
            Creates a new <see cref="T:TVA.NtpTimeTag"/>, given 64-bit NTP timestamp.
            </summary>
            <param name="timestamp">NTP timestamp containing number of seconds since 1/1/1900 in high-word and fractional seconds in low-word.</param>
        </member>
        <member name="M:TVA.NtpTimeTag.#ctor(TVA.Ticks)">
            <summary>
            Creates a new <see cref="T:TVA.NtpTimeTag"/>, given specified <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="timestamp">Timestamp in <see cref="T:TVA.Ticks"/> to create Unix timetag from (minimum valid date is 1/1/1900).</param>
            <remarks>
            This constructor will accept a <see cref="T:System.DateTime"/> parameter since <see cref="T:TVA.Ticks"/> is implicitly castable to a <see cref="T:System.DateTime"/>.
            </remarks>
        </member>
        <member name="M:TVA.NtpTimeTag.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:TVA.NtpTimeTag"/> from serialization parameters.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with populated with data.</param>
            <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this deserialization.</param>
        </member>
        <member name="M:TVA.NtpTimeTag.GetBaseDateOffsetTicks(System.Double)">
            <summary>
            Gets proper NTP offset based on <paramref name="seconds"/> value, see RFC-2030.
            </summary>
            <param name="seconds">Seconds value.</param>
            <returns>Proper NTP offset.</returns>
        </member>
        <member name="M:TVA.NtpTimeTag.GetBaseDateOffsetTicks(TVA.Ticks)">
            <summary>
            Gets proper NTP offset based on <paramref name="timestamp"/> value, see RFC-2030.
            </summary>
            <param name="timestamp"><see cref="T:TVA.Ticks"/> timestamp value.</param>
            <returns>Proper NTP offset.</returns>
        </member>
        <member name="M:TVA.NtpTimeTag.GetBaseDateOffsetTicks(System.UInt32)">
            <summary>
            Gets proper NTP offset based on most significant byte on <paramref name="seconds"/> value, see RFC-2030.
            </summary>
            <param name="seconds">NTP seconds timestamp value.</param>
            <returns>Proper NTP offset.</returns>
        </member>
        <member name="M:TVA.NtpTimeTag.GetNTPTimestampFromTicks(TVA.Ticks)">
            <summary>
            Gets 64-bit NTP timestamp given <paramref name="timestamp"/> in <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="timestamp">Timestamp in <see cref="T:TVA.Ticks"/>.</param>
            <returns>Seconds in NTP from given <paramref name="timestamp"/>.</returns>
        </member>
        <member name="P:TVA.NtpTimeTag.Timestamp">
            <summary>
            Gets 64-bit NTP timestamp.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.IFtpSessionState">
            <summary>
            Abstract representation of a FTP session state (e.g., connected or disconnected).
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.IFtpSessionState.AbortTransfer">
            <summary>
            Aborts current file transfer.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.IFtpSessionState.Connect(System.String,System.String)">
            <summary>
            Connects to FTP server using specified credentials.
            </summary>
            <param name="userName">User name used to authenticate to FTP server.</param>
            <param name="password">Password used to authenticate to FTP server.</param>
        </member>
        <member name="M:TVA.Net.Ftp.IFtpSessionState.Close">
            <summary>
            Closes current FTP session.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpSessionState.Server">
            <summary>
            Gets or sets FTP server name (DNS name or IP).
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpSessionState.Port">
            <summary>
            Gets or sets FTP server port to use, defaults to 21.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpSessionState.CurrentDirectory">
            <summary>
            Gets or sets current FTP session directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpSessionState.RootDirectory">
            <summary>
            Gets FTP session root directory entry.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpSessionState.ControlChannel">
            <summary>
            Gets the current FTP control channel.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.IFtpSessionState.IsBusy">
            <summary>
            Returns true if FTP session is currently busy.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpSessionDisconnected.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Net.Ftp.FtpSessionDisconnected"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpSessionDisconnected.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Net.Ftp.FtpSessionDisconnected"/> object.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpSessionDisconnected.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Net.Ftp.FtpSessionDisconnected"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:TVA.Media.Speakers">
            <summary>Spatial positioning flags for <see cref="P:TVA.Media.WaveFormatExtensible.ChannelMask"/> property.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.Undefined">
            <summary>Speaker positions undefined.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.FrontLeft">
            <summary>Front left speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.FrontRight">
            <summary>Front right speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.FronCenter">
            <summary>Front center speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.LowFrequency">
            <summary>Low frequency speaker.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.BackLeft">
            <summary>Back left speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.BackRight">
            <summary>back right speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.FronLeftOfCenter">
            <summary>Front left of center speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.FronRightOfCenter">
            <summary>Front right of center speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.BackCenter">
            <summary>Back center speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.SideLeft">
            <summary>Side left speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.SideRight">
            <summary>Side right speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.TopCenter">
            <summary>Top center speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.TopFrontLeft">
            <summary>Top front left speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.TopFrontCenter">
            <summary>Top front center speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.TopFrontRight">
            <summary>Top front right speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.TopBackLeft">
            <summary>Top back left speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.TopBackCenter">
            <summary>Top back center speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.TopBackRight">
            <summary>Top back right speaker position.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.Reserved">
            <summary>Reserved flags for <see cref="T:TVA.Media.Speakers"/> enumeration.</summary>
        </member>
        <member name="F:TVA.Media.Speakers.All">
            <summary>All Speaker positions defined.</summary>
        </member>
        <member name="T:TVA.Media.DataFormatSubType">
            <summary>Common sub-type GUID's for <see cref="P:TVA.Media.WaveFormatExtensible.SubFormat"/> property.</summary>
        </member>
        <member name="F:TVA.Media.DataFormatSubType.PCM">
            <summary>Standard pulse-code modulation audio format</summary>
            <remarks>
            PCM (Pulse Code Modulation) is a common method of storing and transmitting uncompressed digital audio.
            Since it is a generic format, it can be read by most audio applications—similar to the way a plain text
            file can be read by any word-processing program. PCM is used by Audio CDs and digital audio tapes (DATs).
            PCM is also a very common format for AIFF and WAV files.
            </remarks>
        </member>
        <member name="F:TVA.Media.DataFormatSubType.ADPCM">
            <summary>Adpative differential pulse-code modulation encoding algorithm</summary>
        </member>
        <member name="F:TVA.Media.DataFormatSubType.IeeeFloat">
            <summary>Floating point PCM encoding algorithm</summary>
        </member>
        <member name="F:TVA.Media.DataFormatSubType.DRM">
            <summary>Digital Rights Management encoded format (for digital-audio content protected by Microsoft DRM).</summary>
        </member>
        <member name="F:TVA.Media.DataFormatSubType.ALaw">
            <summary>A-law encoding algorithm (used in Europe and the rest of the world)</summary>
        </member>
        <member name="F:TVA.Media.DataFormatSubType.MuLaw">
            <summary>μ-law encoding algorithm (used in North America and Japan)</summary>
        </member>
        <member name="F:TVA.Media.DataFormatSubType.Mpeg">
            <summary>MPEG Audio is a family of open standards for compressed audio that includes MP2, MP3 and AAC.</summary>
        </member>
        <member name="F:TVA.Media.DataFormatSubType.Analog">
            <summary>Analog sub-format.</summary>
        </member>
        <member name="T:TVA.Media.WaveFormatExtensible">
             <summary>
             Represents the "extensible" format structure for a WAVE media format file.
             </summary>
             <example>
             For some special bit-encodings you may need to use the "WaveFormatExtensible" audio format,
             here is an example of how to use that format:
             <code>
             using System;
             using TVA.Media;
             using TVA.Media.Sound;
            
             static class Program
             {
                 static void Main()
                 {
                     // Generate an 8000 Hz, 32 bits per sample, mono channeled WAVE file in "Extensible" format
                     WaveFile waveFile = new WaveFile(8000, 32, 1, (ushort)WaveFormat.WaveFormatExtensible);
            
                     // Apply the "WaveFormatExtensible" extra parameters
                     WaveFormatExtensible extensible = new WaveFormatExtensible(waveFile.FormatChunk);
                     waveFile.ExtraParameters = extensible.BinaryImage;
            
                     // Generate the EBS Alert noise
                     DTMF.Generate(waveFile, DTMF.EmergencyBroadcastSystemAlert, 0.25D);
            
                     // Save the generated tone
                     waveFile.Save("ExtensibleTest.wav");
            
                     Console.Write("File available to be played from Windows Media Player...");
                     Console.ReadKey();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Media.WaveFormatExtensible.#ctor">
            <summary>
            Creates a new <see cref="T:TVA.Media.WaveFormatExtensible"/>.
            </summary>
        </member>
        <member name="M:TVA.Media.WaveFormatExtensible.#ctor(TVA.Media.WaveFormatChunk)">
            <summary>
            Creates a new <see cref="T:TVA.Media.WaveFormatExtensible"/> object based on the <see cref="T:TVA.Media.WaveFormatChunk"/> settings.
            </summary>
            <param name="waveFormat">A <see cref="T:TVA.Media.WaveFormatChunk"/> format.</param>
        </member>
        <member name="M:TVA.Media.WaveFormatExtensible.#ctor(System.UInt16,TVA.Media.Speakers,System.Guid)">
            <summary>
            Creates a new <see cref="T:TVA.Media.WaveFormatExtensible"/> object based on the given settings.
            </summary>
            <param name="sampleValue">An <see cref="T:System.UInt16"/> value representing the sample value.</param>
            <param name="channelMask">A <see cref="T:TVA.Media.Speakers"/> object.</param>
            <param name="subFormat">A <see cref="T:System.Guid"/> value.</param>
        </member>
        <member name="M:TVA.Media.WaveFormatExtensible.Initialize(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses <see cref="T:TVA.Media.WaveFormatExtensible"/> object from <paramref name="binaryImage"/>.
            </summary>
            <param name="binaryImage">Binary image to be used for initialization.</param>
            <param name="startIndex">0-based starting index in the <paramref name="binaryImage"/> to be used for initialization.</param>
            <param name="length">Valid number of bytes within binary image.</param>
            <returns>The number of bytes used for initialization in the <paramref name="binaryImage"/> (i.e., the number of bytes parsed).</returns>
            <exception cref="T:System.InvalidOperationException">Not enough length in binary image to parse WaveFormatExtensible object.</exception>
        </member>
        <member name="P:TVA.Media.WaveFormatExtensible.SampleValue">
            <summary>
            Gets or sets sample value.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFormatExtensible.ChannelMask">
            <summary>
            Gets or sets flags representing spatial locations of data channels (i.e., speaker locations).
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFormatExtensible.SubFormat">
            <summary>
            Gets or sets <see cref="T:System.Guid"/> for sub-format type of extensible WaveFile.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFormatExtensible.BinaryImage">
            <summary>
            Gets binary representation of this <see cref="T:TVA.Media.WaveFormatExtensible"/> instance.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFormatExtensible.BinaryLength">
            <summary>
            Gets the length of the binary representation of this <see cref="T:TVA.Media.WaveFormatExtensible"/> instance.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.NoteValue">
            <summary>American note value (♪) representing the relative duration of a note.</summary>
            <remarks>Note duration formula accessible via extension function "Duration()" for given note value.</remarks>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.Longa">
            <summary>Quadruple whole note (i.e., 4 times the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.Breve">
            <summary>Double whole note (i.e., 2 times the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.Whole">
            <summary>Whole note.</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.Half">
            <summary>Half note (i.e., 1/2 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.Quarter">
            <summary>Quarter note (i.e., 1/4 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.Eighth">
            <summary>Eighth note (i.e., 1/8 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.Sixteenth">
            <summary>Sixteenth note (i.e., 1/16 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.ThirtySecond">
            <summary>ThirtySecond note (i.e., 1/32 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.SixtyFourth">
            <summary>SixtyFourth note (i.e., 1/64 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.HundredTwentyEighth">
            <summary>HundredTwentyEighth note (i.e., 1/128 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.TwoHundredFiftySixth">
            <summary>TwoHundredFiftySixth note (i.e., 1/256 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.FiveHundredTwelfth">
            <summary>FiveHundredTwelfth note (i.e., 1/512 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValue.ThousandTwentyFourth">
            <summary>ThousandTwentyFourth note (i.e., 1/1024 the length of a whole note).</summary>
        </member>
        <member name="T:TVA.Media.Music.NoteValueBritish">
            <summary>British note value (♪) representing the relative duration of a note.</summary>
            <remarks>Note duration formula accessible via extension function "Duration()" for given note value.</remarks>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Longa">
            <summary>Quadruple whole note (i.e., 4 times the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Breve">
            <summary>Double whole note (i.e., 2 times the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Semibreve">
            <summary>Whole note.</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Minim">
            <summary>Half note (i.e., 1/2 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Crotchet">
            <summary>Quarter note (i.e., 1/4 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Quaver">
            <summary>Eighth note (i.e., 1/8 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Semiquaver">
            <summary>Sixteenth note (i.e., 1/16 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Demisemiquaver">
            <summary>ThirtySecond note (i.e., 1/32 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Hemidemisemiquaver">
            <summary>SixtyFourth note (i.e., 1/64 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.Quasihemidemisemiquaver">
            <summary>HundredTwentyEighth note (i.e., 1/128 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.TwoHundredFiftySixth">
            <summary>TwoHundredFiftySixth note (i.e., 1/256 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.FiveHundredTwelfth">
            <summary>FiveHundredTwelfth note (i.e., 1/512 the length of a whole note).</summary>
        </member>
        <member name="F:TVA.Media.Music.NoteValueBritish.ThousandTwentyFourth">
            <summary>ThousandTwentyFourth note (i.e., 1/1024 the length of a whole note).</summary>
        </member>
        <member name="T:TVA.Media.Music.NoteValueExtensions">
            <summary>Defines extension functions related to note value enumerations.</summary>
        </member>
        <member name="M:TVA.Media.Music.NoteValueExtensions.Duration(TVA.Media.Music.NoteValue)">
            <summary>
            Returns source note value duration.  For example, 0.25 will be returned for
            a quater note, 1.0 will be returned for a whole note, etc.
            </summary>
            <param name="source">Source note value.</param>
            <returns>Duration of note value.</returns>
        </member>
        <member name="M:TVA.Media.Music.NoteValueExtensions.Duration(TVA.Media.Music.NoteValueBritish)">
            <summary>
            Returns source note value duration.  For example, 0.25 will be returned for
            a crotchet note, 1.0 will be returned for a semibreve note, etc.
            </summary>
            <param name="source">Source note value.</param>
            <returns>Duration of note value.</returns>
        </member>
        <member name="M:TVA.Media.Music.NoteValueExtensions.Duration(TVA.Media.Music.NoteValue,System.Int32)">
            <summary>
            Returns source note value duration.  For example, 0.25 will be returned for
            a quater note, 1.0 will be returned for a whole note, etc.
            </summary>
            <param name="source">Source note value.</param>
            <param name="dots">Total dotted note length extensions to apply.</param>
            <returns>Duration of note value.</returns>
        </member>
        <member name="M:TVA.Media.Music.NoteValueExtensions.Duration(TVA.Media.Music.NoteValueBritish,System.Int32)">
            <summary>
            Returns source note value duration.  For example, 0.25 will be returned for
            a crotchet note, 1.0 will be returned for a semibreve note, etc.
            </summary>
            <param name="source">Source note value.</param>
            <param name="dots">Total dotted note length extensions to apply.</param>
            <returns>Duration of note value.</returns>
        </member>
        <member name="M:TVA.Media.Music.NoteValueExtensions.Duration(TVA.Media.Music.NoteValue,TVA.Media.Music.NoteValue)">
            <summary>
            Returns source note value duration in terms of given reference note value.
            For example, if measure size is 3/4 then reference is quarter notes and returned
            value will be equivalent number of quarter notes for given source note.
            </summary>
            <param name="source">Source note value.</param>
            <param name="reference">Reference note value.</param>
            <returns>Duration of note value in terms of specified reference note value.</returns>
        </member>
        <member name="M:TVA.Media.Music.NoteValueExtensions.Duration(TVA.Media.Music.NoteValueBritish,TVA.Media.Music.NoteValueBritish)">
            <summary>
            Returns source note value duration in terms of given reference note value.
            For example, if measure size is 3/4 then reference is quarter notes and returned
            value will be equivalent number of quarter notes for given source note.
            </summary>
            <param name="source">Source note value.</param>
            <param name="reference">Reference note value.</param>
            <returns>Duration of note value in terms of specified reference note value.</returns>
        </member>
        <member name="M:TVA.Media.Music.NoteValueExtensions.Duration(TVA.Media.Music.NoteValue,TVA.Media.Music.NoteValue,System.Int32)">
            <summary>
            Returns source note value duration in terms of given reference note value.
            For example, if measure size is 3/4 then reference is quarter notes and returned
            value will be equivalent number of quarter notes for given source note.
            </summary>
            <param name="source">Source note value.</param>
            <param name="reference">Reference note value.</param>
            <param name="dots">Total dotted note length extensions to apply.</param>
            <returns>Duration of note value in terms of specified reference note value.</returns>
        </member>
        <member name="M:TVA.Media.Music.NoteValueExtensions.Duration(TVA.Media.Music.NoteValueBritish,TVA.Media.Music.NoteValueBritish,System.Int32)">
            <summary>
            Returns source note value duration in terms of given reference note value.
            For example, if measure size is 3/4 then reference is quarter notes and returned
            value will be equivalent number of quarter notes for given source note.
            </summary>
            <param name="source">Source note value.</param>
            <param name="reference">Reference note value.</param>
            <param name="dots">Total dotted note length extensions to apply.</param>
            <returns>Duration of note value in terms of specified reference note value.</returns>
        </member>
        <member name="T:TVA.Configuration.RegistrySettingsBase">
            <summary>
            Represents the base class for application settings that are synchronized to the registry.
            </summary>
            <remarks>
            <para>
            In order to make custom types serializable for the registry, implement a <see cref="T:System.ComponentModel.TypeConverter"/> for the type.<br/>
            See <a href="http://msdn.microsoft.com/en-us/library/ayybcxe5.aspx">MSDN</a> for details.
            </para>
            <example>
            Here is an example class derived from <see cref="T:TVA.Configuration.RegistrySettingsBase"/> that automatically
            serializes its fields and properties to the registry.
            <code>
               public enum MyEnum
                {
                    One,
                    Two,
                    Three
                }
            
                public class MySettings : RegistrySettingsBase
                {
                    // Private property fields (private fields will not be serialized)
                    private double m_doubleVal;
            
                    // Public settings fields
                    public bool BoolVal = true;
                    public int IntVal = 1;
                    public float FloatVal = 3.14F;
                    public string StrVal = "This is a test...";
                    public MyEnum EnumVal = MyEnum.Three;
                    
                    [SettingName("UserOptions"), EncryptSetting()]
                    public string Password = "default";
            
                    // Mark this field to not be serialized to registry...
                    [SerializeSetting(false)]
                    public decimal DecimalVal;
            
                    public MySettings()
                        : base("HKEY_CURRENT_USER\\Software\\My Company\\My Product\\", "General Settings") {}
            
                    [Category("OtherSettings"), DefaultValue(1.159D)]
                    public double DoubleVal
                    {
                        get
                        {
                            return m_doubleVal;
                        }
                        set
                        {
                            m_doubleVal = value;
                        }
                    }
            
                    [SerializeSetting(false)]
                    public bool DontSerializeMe { get; set; }
                }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Configuration.RegistrySettingsBase.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.RegistrySettingsBase"/> class for the application's registry based settings.
            </summary>
            <param name="rootPath">Defines the root registry path used to access settings in the registry (e.g., "HKEY_CURRENT_USER\\Software\\My Company\\My Product\\").</param>
            <param name="keyName">Defines the name of default key used to access settings in the registry (e.g., "General Settings").</param>
        </member>
        <member name="M:TVA.Configuration.RegistrySettingsBase.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.RegistrySettingsBase"/> class for the application's registry based settings.
            </summary>
            <param name="rootPath">Defines the root registry path used to access settings in the registry (e.g., "HKEY_CURRENT_USER\\Software\\My Company\\My Product\\").</param>
            <param name="keyName">Defines the name of default key used to access settings in the registry (e.g., "General Settings").</param>
            <param name="useCategoryAttributes">Determines if category attributes will be used for the registry key names.</param>
            <param name="requireSerializeSettingAttribute">
            Assigns flag that determines if <see cref="T:TVA.Configuration.SerializeSettingAttribute"/> is required
            to exist before a field or property is serialized to the registry.
            </param>
            <param name="initialize">Determines if <see cref="M:TVA.Configuration.SettingsBase.Initialize"/> method should be called from constructor.</param>
            <remarks>
            <para>
            If <paramref name="useCategoryAttributes"/> is false, all settings will be placed in section labeled by the
            <paramref name="keyName"/> value; otherwise, if a <see cref="T:System.ComponentModel.CategoryAttribute"/> exists on a field or
            property then the member value will serialized into the registry in a section labeled the same
            as the <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> value and if the attribute doesn't exist the member value
            will serialized into the section labeled by the <paramref name="keyName"/> value.
            </para>
            <para>
            Note that some .NET languages (e.g., Visual Basic) will not initialize member elements before call to constuctor,
            in this case <paramref name="initialize"/> should be set to <c>false</c>, then the <see cref="M:TVA.Configuration.SettingsBase.Initialize"/>
            method should be called manually after all properties have been initialized. Alternately, consider using the
            <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the fields or properties and this will be used to initialize the values.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Configuration.RegistrySettingsBase.CreateSetting(System.String,System.String,System.String)">
            <summary>
            Create setting in registry if it doesn't already exist.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.RegistrySettingsBase.RetrieveSetting(System.String,System.String)">
            <summary>
            Retrieves setting from registry.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <returns>Setting value.</returns>
        </member>
        <member name="M:TVA.Configuration.RegistrySettingsBase.StoreSetting(System.String,System.String,System.String)">
            <summary>
            Stores setting to registry.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.RegistrySettingsBase.PersistSettings">
            <summary>
            Persist any pending changes to registry.
            This method is for internal use.
            </summary>
        </member>
        <member name="M:TVA.Configuration.RegistrySettingsBase.GetKeyName(System.String)">
            <summary>
            Gets the key name to use for storing the specified field or property in the registry.
            </summary>
            <param name="name">Field or property name.</param>
            <returns><see cref="P:System.ComponentModel.CategoryAttribute.Category"/> applied to specified field or property; or <see cref="P:TVA.Configuration.RegistrySettingsBase.KeyName"/> if attribute does not exist.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> cannot be null or empty.</exception>
            <remarks>
            <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> will only be returned if <see cref="P:TVA.Configuration.RegistrySettingsBase.UseCategoryAttributes"/> is <c>true</c>; otherwise
            <see cref="P:TVA.Configuration.RegistrySettingsBase.KeyName"/> value will be returned.
            </remarks>
        </member>
        <member name="P:TVA.Configuration.RegistrySettingsBase.RootPath">
            <summary>
            Gets or sets root registry path used to access settings in the registry (e.g., "HKEY_CURRENT_USER\\Software\\My Company\\My Product\\").
            </summary>
        </member>
        <member name="P:TVA.Configuration.RegistrySettingsBase.KeyName">
            <summary>
            Gets or sets name of default key used to access settings in the registry (e.g., "General Settings").
            </summary>
        </member>
        <member name="P:TVA.Configuration.RegistrySettingsBase.UseCategoryAttributes">
            <summary>
            Gets or sets value that determines whether a <see cref="T:System.ComponentModel.CategoryAttribute"/> applied to a field or property
            will be used for the registry key names.
            </summary>
            <remarks>
            If <see cref="P:TVA.Configuration.RegistrySettingsBase.UseCategoryAttributes"/> is false, all settings will be placed in section labeled by the
            <see cref="P:TVA.Configuration.RegistrySettingsBase.KeyName"/> value; otherwise, if a <see cref="T:System.ComponentModel.CategoryAttribute"/> exists on a field or
            property then the member value will serialized into the registry in a section labeled the same
            as the <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> value and if the attribute doesn't exist the member value
            will stored in the registry key identified by the <see cref="P:TVA.Configuration.RegistrySettingsBase.KeyName"/> value.
            </remarks>
        </member>
        <member name="T:TVA.Configuration.EncryptSettingAttribute">
            <summary>
            Represents an attribute that determines if a property or field in a class derived from
            <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> or <see cref="T:TVA.Configuration.AppSettingsBase"/> should be encrypted
            when it is serialized to the configuration file.
            </summary>
        </member>
        <member name="M:TVA.Configuration.EncryptSettingAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:TVA.Configuration.EncryptSettingAttribute"/>; defaults to <c><see cref="P:TVA.Configuration.EncryptSettingAttribute.Encrypt"/> = true</c>.
            </summary>
        </member>
        <member name="M:TVA.Configuration.EncryptSettingAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:TVA.Configuration.EncryptSettingAttribute"/> with the specified <paramref name="encrypt"/> value.
            </summary>
            <param name="encrypt">
            Assigns flag that determines if the property or field this <see cref="T:TVA.Configuration.EncryptSettingAttribute"/>
            modifies should be encrypted when serialized to the configuration file.
            </param>
        </member>
        <member name="P:TVA.Configuration.EncryptSettingAttribute.Encrypt">
            <summary>
            Gets or sets flag that determines if the property or field this <see cref="T:TVA.Configuration.EncryptSettingAttribute"/>
            modifies should be encrypted when serialized to the configuration file.
            </summary>
        </member>
        <member name="P:TVA.Configuration.EncryptSettingAttribute.PrivateKey">
            <summary>
            Gets or sets optional encryption key that will be used on a setting for added security.
            </summary>
            <remarks>
            This key is not the actual key used for encryption, it is used for hash lookup of the actual AES key.
            If this key is not specified, the property name will be used for the hash lookup.
            </remarks>
        </member>
        <member name="T:TVA.Configuration.CategorizedSettingsElementCollection">
            <summary>
            Represents a collection of <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> objects.
            </summary>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.SetCryptoKey(System.String)">
            <summary>
            Sets the key to be used for encrypting and decrypting setting values.
            </summary>
            <param name="cryptoKey">New crypto key.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.IndexOf(TVA.Configuration.CategorizedSettingsElement)">
            <summary>
            Gets the index of the specified <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.
            </summary>
            <param name="setting">The <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object whose index is to be retrieved.</param>
            <returns>Index of the specified <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object if found; otherwise -1.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.Add(System.String,System.Object)">
            <summary>
            Adds a new <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object if one does not exist.
            </summary>
            <param name="name">Name of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <param name="value">Value of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.Add(System.String,System.Object,System.String)">
            <summary>
            Adds a new <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object if one does not exist.
            </summary>
            <param name="name">Name of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <param name="value">Value of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <param name="description">Description of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.Add(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Adds a new <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object if one does not exist.
            </summary>
            <param name="name">Name of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <param name="value">Value of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <param name="description">Description of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <param name="encryptValue">true if the Value of <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object is to be encrypted; otherwise false.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.Add(System.String,System.Object,System.String,System.Boolean,TVA.Configuration.SettingScope)">
            <summary>
            Adds a new <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object if one does not exist.
            </summary>
            <param name="name">Name of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <param name="value">Value of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <param name="description">Description of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <param name="encryptValue">true if the Value of <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object is to be encrypted; otherwise false.</param>
            <param name="scope">One of the <see cref="T:TVA.Configuration.SettingScope"/> values.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.Add(TVA.Configuration.CategorizedSettingsElement)">
            <summary>
            Adds a new <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object if one does not exist.
            </summary>
            <param name="setting">The <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object to add.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.Remove(System.String)">
            <summary>
            Removes a <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object if it exists.
            </summary>
            <param name="name">Name of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object to remove.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.Remove(TVA.Configuration.CategorizedSettingsElement)">
            <summary>
            Removes a <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object if it exists.
            </summary>
            <param name="setting">The <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object to remove.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object at the specified index location.
            </summary>
            <param name="index">Index location of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object to remove.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.Clear">
            <summary>
            Removes all existing <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> objects.
            </summary>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.
            </summary>
            <returns>Instance of <see cref="T:TVA.Configuration.CategorizedSettingsElement"/>.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.
            </summary>
            <param name="elementName">Name identifying the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</param>
            <returns>Instance of <see cref="T:TVA.Configuration.CategorizedSettingsElement"/>.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key for a <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.
            </summary>
            <param name="element"><see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object whose key is to be retrieved.</param>
            <returns>String key value for a <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object.</returns>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElementCollection.Name">
            <summary>
            Gets or sets the name of the <see cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/>.
            </summary>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElementCollection.Section">
            <summary>
            Gets or sets the <see cref="T:TVA.Configuration.CategorizedSettingsSection"/> to which this <see cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/> belongs.
            </summary>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object at the specified index.
            </summary>
            <param name="index">Zero-based index for the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object to retrieve.</param>
            <returns>The <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object at the specified index if it exists; otherwise null.</returns>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElementCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object with the specified name.
            </summary>
            <param name="name">Name of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object to retrieve.</param>
            <returns>The <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object with the specified name if it exists; otherwise null.</returns>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElementCollection.Item(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object with the specified name.
            </summary>
            <param name="name">Name of the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object to retrieve.</param>
            <param name="ensureExistance">true if the <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object is to be created if it does not exist; otherwise false.</param>
            <returns>The <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> object with the specified name if it exists; otherwise null.</returns>
        </member>
        <member name="T:TVA.Configuration.CategorizedSettingsBase">
            <summary>
            Represents the base class for application settings that are synchronized with a categorized section in a configuration file.
            </summary>
            <remarks>
            <para>
            In order to make custom types serializable for the configuration file, implement a <see cref="T:System.ComponentModel.TypeConverter"/> for the type.<br/>
            See <a href="http://msdn.microsoft.com/en-us/library/ayybcxe5.aspx">MSDN</a> for details.
            </para>
            <example>
            Here is an example class derived from <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> that automatically
            serializes its fields and properties to the configuration file.
            <code>
               public enum MyEnum
                {
                    One,
                    Two,
                    Three
                }
            
                public class MySettings : CategorizedSettingsBase
                {
                    // Private property fields (private fields will not be serialized)
                    private double m_doubleVal;
            
                    // Public settings fields
                    public bool BoolVal = true;
                    public int IntVal = 1;
                    public float FloatVal = 3.14F;
                    public string StrVal = "This is a test...";
                    public MyEnum EnumVal = MyEnum.Three;
                    
                    [SettingName("UserOptions"), EncryptSetting()]
                    public string Password = "default";
            
                    // Mark this field to not be serialized to configuration file...
                    [SerializeSetting(false)]
                    public decimal DecimalVal;
            
                    public MySettings()
                        : base("GeneralSettings") {}
            
                    [Category("OtherSettings"), Description("My double value setting description."), DefaultValue(1.159D)]
                    public double DoubleVal
                    {
                        get
                        {
                            return m_doubleVal;
                        }
                        set
                        {
                            m_doubleVal = value;
                        }
                    }
            
                    [SerializeSetting(false)]
                    public bool DontSerializeMe { get; set; }
                }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> class for the application's configuration file.
            </summary>
            <param name="categoryName">Name of default category to use to get and set settings from configuration file.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> class for the application's configuration file.
            </summary>
            <param name="categoryName">Name of default category to use to get and set settings from configuration file.</param>
            <param name="useCategoryAttributes">Determines if category attributes will be used for category names.</param>
            <param name="requireSerializeSettingAttribute">
            Assigns flag that determines if <see cref="T:TVA.Configuration.SerializeSettingAttribute"/> is required
            to exist before a field or property is serialized to the configuration file.
            </param>
            <remarks>
            If <paramref name="useCategoryAttributes"/> is false, all settings will be placed in section labeled by the
            <paramref name="categoryName"/> value; otherwise, if a <see cref="T:System.ComponentModel.CategoryAttribute"/> exists on a field or
            property then the member value will serialized into the configuration file in a section labeled the same
            as the <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> value and if the attribute doesn't exist the member value
            will serialized into the section labeled by the <paramref name="categoryName"/> value.
            </remarks>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.#ctor(TVA.Configuration.ConfigurationFile,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> class for the application's configuration file.
            </summary>
            <param name="configFile">Configuration file used for accessing settings.</param>
            <param name="categoryName">Name of default category to use to get and set settings from configuration file.</param>
            <param name="useCategoryAttributes">Determines if category attributes will be used for category names.</param>
            <param name="requireSerializeSettingAttribute">
            Assigns flag that determines if <see cref="T:TVA.Configuration.SerializeSettingAttribute"/> is required
            to exist before a field or property is serialized to the configuration file.
            </param>
            <param name="initialize">Determines if <see cref="M:TVA.Configuration.SettingsBase.Initialize"/> method should be called from constructor.</param>
            <remarks>
            <para>
            If <paramref name="useCategoryAttributes"/> is false, all settings will be placed in section labeled by the
            <paramref name="categoryName"/> value; otherwise, if a <see cref="T:System.ComponentModel.CategoryAttribute"/> exists on a field or
            property then the member value will serialized into the configuration file in a section labeled the same
            as the <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> value and if the attribute doesn't exist the member value
            will serialized into the section labeled by the <paramref name="categoryName"/> value.
            </para>
            <para>
            Note that some .NET languages (e.g., Visual Basic) will not initialize member elements before call to constuctor,
            in this case <paramref name="initialize"/> should be set to <c>false</c>, then the <see cref="M:TVA.Configuration.SettingsBase.Initialize"/>
            method should be called manually after all properties have been initialized. Alternately, consider using the
            <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the fields or properties and this will be used to initialize the values.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.CreateSetting(System.String,System.String,System.String)">
            <summary>
            Create setting in configuration file if it doesn't already exist.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.RetrieveSetting(System.String,System.String)">
            <summary>
            Retrieves setting from configuration file.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <returns>Setting value.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.StoreSetting(System.String,System.String,System.String)">
            <summary>
            Stores setting to configuration file.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.PersistSettings">
            <summary>
            Persist any pending changes to configuration file.
            This method is for internal use.
            </summary>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.GetCategoryName(System.String)">
            <summary>
            Gets the category name to use for the specified field or property.
            </summary>
            <param name="name">Field or property name.</param>
            <returns><see cref="P:System.ComponentModel.CategoryAttribute.Category"/> applied to specified field or property; or <see cref="P:TVA.Configuration.CategorizedSettingsBase.CategoryName"/> if attribute does not exist.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> cannot be null or empty.</exception>
            <remarks>
            <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> will only be returned if <see cref="P:TVA.Configuration.CategorizedSettingsBase.UseCategoryAttributes"/> is <c>true</c>; otherwise
            <see cref="P:TVA.Configuration.CategorizedSettingsBase.CategoryName"/> value will be returned.
            </remarks>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.GetDescription(System.String)">
            <summary>
            Gets the description specified by <see cref="T:System.ComponentModel.DescriptionAttribute"/>, if any, applied to the specified field or property. 
            </summary>
            <param name="name">Field or property name.</param>
            <returns>Description applied to specified field or property; or null if one does not exist.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> cannot be null or empty.</exception>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsBase.GetSettingScope(System.String)">
            <summary>
            Gets the <see cref="T:TVA.Configuration.SettingScope"/> specified by <see cref="T:System.Configuration.UserScopedSettingAttribute"/>, if any, applied to the specified field or property. 
            </summary>
            <param name="name">Field or property name.</param>
            <returns>Description applied to specified field or property; or null if one does not exist.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> cannot be null or empty.</exception>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsBase.ConfigFile">
            <summary>
            Gets or sets reference to working configuration file.
            </summary>
            <exception cref="T:System.NullReferenceException">value cannot be null.</exception>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsBase.CategoryName">
            <summary>
            Gets or sets default category name of section used to access settings in configuration file.
            </summary>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsBase.UseCategoryAttributes">
            <summary>
            Gets or sets value that determines whether a <see cref="T:System.ComponentModel.CategoryAttribute"/> applied to a field or property
            will be used for the category name.
            </summary>
            <remarks>
            If <see cref="P:TVA.Configuration.CategorizedSettingsBase.UseCategoryAttributes"/> is false, all settings will be placed in section labeled by the
            <see cref="P:TVA.Configuration.CategorizedSettingsBase.CategoryName"/> value; otherwise, if a <see cref="T:System.ComponentModel.CategoryAttribute"/> exists on a field or
            property then the member value will serialized into the configuration file in a section labeled the same
            as the <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> value and if the attribute doesn't exist the member value
            will serialized into the section labeled by the <see cref="P:TVA.Configuration.CategorizedSettingsBase.CategoryName"/> value.
            </remarks>
        </member>
        <member name="T:TVA.Adapters.NamespaceDoc">
            <summary>
            Contains classes that facilitate the development of adapter-driven architecture.
            </summary>
        </member>
        <member name="T:TVA.Windows.Forms.ScreenArea">
            <summary>Returns screen area statistics and capture functionality for all connected screens.</summary>
        </member>
        <member name="M:TVA.Windows.Forms.ScreenArea.Capture">
            <summary>
            Performs screen capture over all monitors.
            </summary>
            <returns>Captured screen image over all monitors.</returns>
            <remarks>
            Size captured will be for total width and height of all screens relative to their arrangement.
            An image square will be created large enough to cover all screens for the capture.
            </remarks>
        </member>
        <member name="M:TVA.Windows.Forms.ScreenArea.Capture(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Performs screen capture over all monitors.
            </summary>
            <param name="imageFormat">Desired <see cref="T:System.Drawing.Imaging.ImageFormat"/> for captured <see cref="T:System.Drawing.Bitmap"/>.</param>
            <returns>Captured screen image over all monitors.</returns>
            <remarks>
            Size captured will be for total width and height of all screens relative to their arrangement.
            An image square will be created large enough to cover all screens for the capture.
            </remarks>
        </member>
        <member name="M:TVA.Windows.Forms.ScreenArea.Capture(System.Windows.Forms.Screen)">
            <summary>
            Performs screen capture for given <see cref="T:System.Windows.Forms.Screen"/>.
            </summary>
            <param name="captureScreen">A <see cref="T:System.Windows.Forms.Screen"/> object to capture.</param>
            <returns>Captured screen image for given <see cref="T:System.Windows.Forms.Screen"/>.</returns>
        </member>
        <member name="M:TVA.Windows.Forms.ScreenArea.Capture(System.Windows.Forms.Screen,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Performs screen capture for given <see cref="T:System.Windows.Forms.Screen"/> and <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="captureScreen">Desired <see cref="T:System.Windows.Forms.Screen"/> to capture</param>
            <param name="imageFormat">Desired <see cref="T:System.Drawing.Imaging.ImageFormat"/> for captured <see cref="T:System.Drawing.Bitmap"/>.</param>
            <returns>Captured screen image for given <see cref="T:System.Windows.Forms.Screen"/>.</returns>
        </member>
        <member name="M:TVA.Windows.Forms.ScreenArea.Capture(System.Drawing.Rectangle)">
            <summary>
            Performs a screen capture the given <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="captureArea">Screen area <see cref="T:System.Drawing.Rectangle"/> to capture.</param>
            <returns>Captured screen image for given area.</returns>
        </member>
        <member name="M:TVA.Windows.Forms.ScreenArea.Capture(System.Drawing.Rectangle,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Performs a screen capture the given <see cref="T:System.Drawing.Rectangle"/> and <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="captureArea">Screen area <see cref="T:System.Drawing.Rectangle"/> to capture.</param>
            <param name="imageFormat">Desired <see cref="T:System.Drawing.Imaging.ImageFormat"/> for captured <see cref="T:System.Drawing.Bitmap"/>.</param>
            <returns>Captured screen image for given area.</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.LeftMostBound">
            <summary>
            Gets the least "x" coordinate of all screens on the system
            </summary>
            <returns>The smallest visible "x" screen coordinate</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.RightMostBound">
            <summary>
            Gets the greatest "x" coordinate of all screens on the system
            </summary>
            <returns>The largest visible "x" screen coordinate</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.TopMostBound">
            <summary>
            Gets the least "y" coordinate of all screens on the system
            </summary>
            <returns>The smallest visible "y" screen coordinate</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.BottomMostBound">
            <summary>
            Gets the greatest "y" coordinate of all screens on the system
            </summary>
            <returns>The largest visible "y" screen coordinate</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.MaximumWidth">
            <summary>
            Gets the width of the screen with the highest resolution.
            </summary>
            <returns>The width of the screen with the highest resolution.</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.MinimumWidth">
            <summary>
            Gets the width of the screen with the lowest resolution.
            </summary>
            <returns>The width of the screen with the lowest resolution.</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.MaximumHeight">
            <summary>
            Gets the height of the screen with the highest resolution.
            </summary>
            <returns>The height of the screen with the highest resolution.</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.MinimumHeight">
            <summary>
            Gets the height of the screen with the lowest resolution.
            </summary>
            <returns>The height of the screen with the lowest resolution.</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.TotalWidth">
            <summary>
            Gets the total width of all the screens relative to their arrangement.
            </summary>
            <returns>The total width of all the screens relative to their arrangement.</returns>
        </member>
        <member name="P:TVA.Windows.Forms.ScreenArea.TotalHeight">
            <summary>
            Gets the total height of all the screens relative to their arrangement.
            </summary>
            <returns>The total height of all the screens relative to their arrangement.</returns>
        </member>
        <member name="T:TVA.IO.Compression.NamespaceDoc">
            <summary>
            Contains classes and extension functions used to simplify and standardize using compression in applications.
            </summary>
        </member>
        <member name="T:TVA.Interop.VBArrayDescriptor">
            <summary>
            Represents an old style Visual Basic array descriptor.
            </summary>
            <remarks>
            This class is used to mimic the binary array descriptor used when an array is serialized
            into a file using older Visual Basic applications (VB 6 and prior), this way old VB apps
            can still deserialize an array stored in a file written by a .NET application and vice versa.
            </remarks>
        </member>
        <member name="M:TVA.Interop.VBArrayDescriptor.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Interop.VBArrayDescriptor"/> class.
            </summary>
            <param name="arrayLengths">Length of array per dimension.</param>
            <param name="arrayLowerBounds">Lower bound of array per dimension.</param>
        </member>
        <member name="M:TVA.Interop.VBArrayDescriptor.ZeroBasedOneDimensionalArray(System.Int32)">
            <summary>
            Returns a <see cref="T:TVA.Interop.VBArrayDescriptor"/> object for a one dimensional array with zero-based index.
            </summary>
            <param name="arrayLength">Length of the array.</param>
            <returns>A <see cref="T:TVA.Interop.VBArrayDescriptor"/> object.</returns>
        </member>
        <member name="M:TVA.Interop.VBArrayDescriptor.OneBasedOneDimensionalArray(System.Int32)">
            <summary>
            Returns a <see cref="T:TVA.Interop.VBArrayDescriptor"/> object for a one dimensional array with one-based index.
            </summary>
            <param name="arrayLength">Length of the array.</param>
            <returns>A <see cref="T:TVA.Interop.VBArrayDescriptor"/> object.</returns>
        </member>
        <member name="M:TVA.Interop.VBArrayDescriptor.ZeroBasedTwoDimensionalArray(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:TVA.Interop.VBArrayDescriptor"/> object for a two dimensional array with zero-based index.
            </summary>
            <param name="dimensionOneLength">Length of array in dimension one.</param>
            <param name="dimensionTwoLength">Length of array in dimension two.</param>
            <returns>A <see cref="T:TVA.Interop.VBArrayDescriptor"/> object.</returns>
        </member>
        <member name="M:TVA.Interop.VBArrayDescriptor.OneBasedTwoDimensionalArray(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:TVA.Interop.VBArrayDescriptor"/> object for a two dimensional array with one-based index.
            </summary>
            <param name="dimensionOneLength">Length of array in dimension one.</param>
            <param name="dimensionTwoLength">Length of array in dimension two.</param>
            <returns>A <see cref="T:TVA.Interop.VBArrayDescriptor"/> object.</returns>
        </member>
        <member name="P:TVA.Interop.VBArrayDescriptor.BinaryImage">
            <summary>
            Gets a serialized version of <see cref="T:TVA.Interop.VBArrayDescriptor"/>.
            </summary>
        </member>
        <member name="P:TVA.Interop.VBArrayDescriptor.BinaryLength">
            <summary>
            Gets the length of serialized <see cref="T:TVA.Interop.VBArrayDescriptor"/>.
            </summary>
        </member>
        <member name="T:TVA.IdentifiableItem`2">
            <summary>
            Represents an identifiable item.
            </summary>
            <typeparam name="TId">Type of the identifier to be used for identification.</typeparam>
            <typeparam name="TItem">Type of the item that is to be made identifiable.</typeparam>
        </member>
        <member name="M:TVA.IdentifiableItem`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.IdentifiableItem`2"/> class.
            </summary>
            <param name="id">The identifier of the <paramref name="item"/>.</param>
            <param name="item">The item being assigned the <paramref name="id"/> to make it identifiable.</param>
        </member>
        <member name="P:TVA.IdentifiableItem`2.ID">
            <summary>
            Gets or sets the identifier of the <see cref="P:TVA.IdentifiableItem`2.Item"/>.
            </summary>
        </member>
        <member name="P:TVA.IdentifiableItem`2.Item">
            <summary>
            Gets or sets the item being made identifiable by assigning it an <see cref="P:TVA.IdentifiableItem`2.ID"/>.
            </summary>
        </member>
        <member name="T:TVA.Units.Voltage">
            <summary>Represents an electromotive force (i.e., voltage) measurement, in volts, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a voltage in volts; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other voltage representations, specifically
            abvolt and statvolt. Metric conversions are handled simply by applying the needed <see cref="T:TVA.Units.SI"/>
            conversion factor, for example:
            <example>
            Convert volts to megavolts:
            <code>
            public double GetMegavolts(Voltage volts)
            {
                return volts / SI.Mega;
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Voltage.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Voltage"/>.
            </summary>
            <param name="value">New voltage value in volts.</param>
        </member>
        <member name="M:TVA.Units.Voltage.ToAbvolts">
            <summary>
            Gets the <see cref="T:TVA.Units.Voltage"/> value in abvolts.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Voltage"/> in abvolts.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.ToStatvolts">
            <summary>
            Gets the <see cref="T:TVA.Units.Voltage"/> value in statvolts.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Voltage"/> in statvolts.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Voltage"/>.</exception>
        </member>
        <member name="M:TVA.Units.Voltage.CompareTo(TVA.Units.Voltage)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Voltage"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Voltage"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Voltage"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.Equals(TVA.Units.Voltage)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Voltage"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Voltage"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Voltage.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Voltage"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Voltage"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Voltage.MinValue"/> or greater than <see cref="F:TVA.Units.Voltage.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Voltage.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Voltage"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Voltage"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Voltage.MinValue"/> or greater than <see cref="F:TVA.Units.Voltage.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Voltage.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Voltage"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Voltage"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Voltage.MinValue"/> or greater than <see cref="F:TVA.Units.Voltage.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Voltage.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Voltage"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Voltage"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Voltage.MinValue"/> or greater than <see cref="F:TVA.Units.Voltage.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Voltage.TryParse(System.String,TVA.Units.Voltage@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Voltage"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Voltage"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paravolt is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Voltage.MinValue"/> or greater than <see cref="F:TVA.Units.Voltage.MaxValue"/>.
            This paravolt is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Voltage@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Voltage"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Voltage"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paravolt is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Voltage.MinValue"/> or
            greater than <see cref="F:TVA.Units.Voltage.MaxValue"/>. This paravolt is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Voltage.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Equality(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Inequality(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_LessThan(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_LessThanOrEqual(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_GreaterThan(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_GreaterThanOrEqual(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Implicit(System.Double)~TVA.Units.Voltage">
            <summary>
            Implicitly converts value, represented in volts, to a <see cref="T:TVA.Units.Voltage"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Voltage"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Implicit(TVA.Units.Voltage)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Voltage"/>, represented in volts, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Voltage"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Modulus(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Voltage"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Addition(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Voltage"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Subtraction(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Voltage"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Multiply(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Voltage"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Division(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Voltage"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.op_Exponent(TVA.Units.Voltage,TVA.Units.Voltage)">
            <summary>
            Returns result of first value raised to voltage of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Voltage"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Voltage"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result.</returns>
        </member>
        <member name="F:TVA.Units.Voltage.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Voltage"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Voltage.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Voltage"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Voltage.FromAbvolts(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Voltage"/> value from the specified <paramref name="value"/> in abvolts.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Voltage"/> value in abvolts.</param>
            <returns>New <see cref="T:TVA.Units.Voltage"/> object from the specified <paramref name="value"/> in abvolts.</returns>
        </member>
        <member name="M:TVA.Units.Voltage.FromStatvolts(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Voltage"/> value from the specified <paramref name="value"/> in statvolts.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Voltage"/> value in statvolts.</param>
            <returns>New <see cref="T:TVA.Units.Voltage"/> object from the specified <paramref name="value"/> in statvolts.</returns>
        </member>
        <member name="T:TVA.Units.SI2">
            <summary>
            Defines constant factors based on 1024 for related binary SI units of measure used in computational measurements.
            </summary>
            <remarks>
            See <a href="http://physics.nist.gov/cuu/Units/binary.html">NIST Reference</a> for information on IEC standard names.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Exa">
            <summary>
            1 exa, binary (E) = 1,152,921,504,606,846,976
            </summary>
            <remarks>
            This is the common name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Exbi">
            <summary>
            1 exbi (Ei) = 1,152,921,504,606,846,976
            </summary>
            <remarks>
            This is the IEC standard name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Peta">
            <summary>
            1 peta, binary (P) = 1,125,899,906,842,624
            </summary>
            <remarks>
            This is the common name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Pebi">
            <summary>
            1 pebi (Pi) = 1,125,899,906,842,624
            </summary>
            <remarks>
            This is the IEC standard name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Tera">
            <summary>
            1 tera, binary (T) = 1,099,511,627,776
            </summary>
            <remarks>
            This is the common name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Tebi">
            <summary>
            1 tebi (Ti) = 1,099,511,627,776
            </summary>
            <remarks>
            This is the IEC standard name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Giga">
            <summary>
            1 giga, binary (G) = 1,073,741,824
            </summary>
            <remarks>
            This is the common name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Gibi">
            <summary>
            1 gibi (Gi) = 1,073,741,824
            </summary>
            <remarks>
            This is the IEC standard name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Mega">
            <summary>
            1 mega, binary (M) = 1,048,576
            </summary>
            <remarks>
            This is the common name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Mebi">
            <summary>
            1 mebi (Mi) = 1,048,576
            </summary>
            <remarks>
            This is the IEC standard name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Kilo">
            <summary>
            1 kilo, binary (K) = 1,024
            </summary>
            <remarks>
            This is the common name.
            </remarks>
        </member>
        <member name="F:TVA.Units.SI2.Kibi">
            <summary>
            1 kibi (Ki) = 1,024
            </summary>
            <remarks>
            This is the IEC standard name.
            </remarks>
        </member>
        <member name="M:TVA.Units.SI2.ToScaledString(System.Int64,System.String)">
            <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and common named representation (e.g., KB, MB, GB, TB, etc.).
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
            <remarks>
            <see cref="P:TVA.Units.SI2.Symbols"/> array is used for displaying SI symbol prefix for <paramref name="unitName"/> and
            three decimal places are used for displayed <paramref name="totalUnits"/> precision.
            </remarks>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="M:TVA.Units.SI2.ToScaledString(System.Int64,System.String,System.String)">
            <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and common named representation (e.g., KB, MB, GB, TB, etc.).
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="format">A numeric string format for scaled <paramref name="totalUnits"/>.</param>
            <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
            <remarks>
            <see cref="P:TVA.Units.SI2.Symbols"/> array is used for displaying SI symbol prefix for <paramref name="unitName"/>.
            </remarks>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="M:TVA.Units.SI2.ToScaledString(System.Int64,System.Int32,System.String)">
            <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and common named representation (e.g., KB, MB, GB, TB, etc.).
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="decimalPlaces">Number of decimal places to display.</param>
            <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
            <remarks>
            <see cref="P:TVA.Units.SI2.Symbols"/> array is used for displaying SI symbol prefix for <paramref name="unitName"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="decimalPlaces"/> cannot be negative.</exception>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="M:TVA.Units.SI2.ToScaledIECString(System.Int64,System.String)">
            <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and IEC named representation (e.g., KiB, MiB, GiB, TiB, etc.).
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
            <remarks>
            <see cref="P:TVA.Units.SI2.IECSymbols"/> array is used for displaying SI symbol prefix for <paramref name="unitName"/> and
            three decimal places are used for displayed <paramref name="totalUnits"/> precision.
            </remarks>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="M:TVA.Units.SI2.ToScaledIECString(System.Int64,System.String,System.String)">
            <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and IEC named representation (e.g., KiB, MiB, GiB, TiB, etc.).
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="format">A numeric string format for scaled <paramref name="totalUnits"/>.</param>
            <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
            <remarks>
            <see cref="P:TVA.Units.SI2.IECSymbols"/> array is used for displaying SI symbol prefix for <paramref name="unitName"/>.
            </remarks>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="M:TVA.Units.SI2.ToScaledIECString(System.Int64,System.Int32,System.String)">
            <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            and IEC named representation (e.g., KiB, MiB, GiB, TiB, etc.).
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="decimalPlaces">Number of decimal places to display.</param>
            <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
            <remarks>
            <see cref="P:TVA.Units.SI2.IECSymbols"/> array is used for displaying SI symbol prefix for <paramref name="unitName"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="decimalPlaces"/> cannot be negative.</exception>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="M:TVA.Units.SI2.ToScaledString(System.Int64,System.String,System.String,System.String[])">
            <summary>
            Turns the given number of units (e.g., bytes) into a textual representation with an appropriate unit scaling
            given string array of factor names or symbols.
            </summary>
            <param name="totalUnits">Total units to represent textually.</param>
            <param name="format">A numeric string format for scaled <paramref name="totalUnits"/>.</param>
            <param name="unitName">Name of unit display (e.g., you could use "B" for bytes).</param>
            <param name="symbolNames">SI factor symbol or name array to use during textual conversion.</param>
            <remarks>
            The <paramref name="symbolNames"/> array needs one string entry for each defined SI item ordered from
            least (<see cref="F:TVA.Units.SI2.Kilo"/>) to greatest (<see cref="F:TVA.Units.SI2.Exa"/>), see <see cref="P:TVA.Units.SI2.Names"/> or <see cref="P:TVA.Units.SI2.Symbols"/>
            arrays for examples.
            </remarks>
            <returns>A <see cref="T:System.String"/> representation of the number of units.</returns>
        </member>
        <member name="P:TVA.Units.SI2.Names">
            <summary>
            Gets an array of all the defined common binary unit factor SI names ordered from least (<see cref="F:TVA.Units.SI2.Kilo"/>) to greatest (<see cref="F:TVA.Units.SI2.Exa"/>).
            </summary>
        </member>
        <member name="P:TVA.Units.SI2.Symbols">
            <summary>
            Gets an array of all the defined common binary unit factor SI prefix symbols ordered from least (<see cref="F:TVA.Units.SI2.Kilo"/>) to greatest (<see cref="F:TVA.Units.SI2.Exa"/>).
            </summary>
        </member>
        <member name="P:TVA.Units.SI2.IECNames">
            <summary>
            Gets an array of all the defined IEC binary unit factor SI names ordered from least (<see cref="F:TVA.Units.SI2.Kibi"/>) to greatest (<see cref="F:TVA.Units.SI2.Exbi"/>).
            </summary>
        </member>
        <member name="P:TVA.Units.SI2.IECSymbols">
            <summary>
            Gets an array of all the defined IEC binary unit factor SI prefix symbols ordered from least (<see cref="F:TVA.Units.SI2.Kibi"/>) to greatest (<see cref="F:TVA.Units.SI2.Exbi"/>).
            </summary>
        </member>
        <member name="P:TVA.Units.SI2.Factors">
            <summary>
            Gets an array of all the defined binary SI unit factors ordered from least (<see cref="F:TVA.Units.SI2.Kilo"/>) to greatest (<see cref="F:TVA.Units.SI2.Exa"/>).
            </summary>
        </member>
        <member name="T:TVA.Units.Charge">
            <summary>Represents an electric charge measurement, in coulombs (i.e., ampere-seconds), as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a charge in coulombs; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other charge representations, specifically
            ampere-hours, abcoulomb (a.k.a., an electromagnetic unit), statcoulomb (a.k.a., electrostatic unit or franklin), atomic unit of charge
            and faraday. Metric conversions are handled simply by applying the needed <see cref="T:TVA.Units.SI"/> conversion factor, for example:
            <example>
            Convert charge, in coulombs, to kilocoulombs:
            <code>
            public double GetKilocoulombs(Charge coulombs)
            {
                return coulombs / SI.Kilo;
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Charge.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Charge"/>.
            </summary>
            <param name="value">New charge value in coulombs.</param>
        </member>
        <member name="M:TVA.Units.Charge.ToAmpereHours">
            <summary>
            Gets the <see cref="T:TVA.Units.Energy"/> value in ampere-hours.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Energy"/> in ampere-hours.</returns>
        </member>
        <member name="M:TVA.Units.Charge.ToAbcoulombs">
            <summary>
            Gets the <see cref="T:TVA.Units.Charge"/> value in abcoulombs.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Charge"/> in abcoulombs.</returns>
        </member>
        <member name="M:TVA.Units.Charge.ToStatcoulombs">
            <summary>
            Gets the <see cref="T:TVA.Units.Charge"/> value in statcoulombs.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Charge"/> in statcoulombs.</returns>
        </member>
        <member name="M:TVA.Units.Charge.ToAtomicUnitsOfCharge">
            <summary>
            Gets the <see cref="T:TVA.Units.Charge"/> value in atomic units of charge.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Charge"/> in atomic units of charge.</returns>
        </member>
        <member name="M:TVA.Units.Charge.ToFaraday">
            <summary>
            Gets the <see cref="T:TVA.Units.Charge"/> value in faraday.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Charge"/> in faraday.</returns>
        </member>
        <member name="M:TVA.Units.Charge.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Charge"/>.</exception>
        </member>
        <member name="M:TVA.Units.Charge.CompareTo(TVA.Units.Charge)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Charge"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Charge"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Charge"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.Equals(TVA.Units.Charge)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Charge"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Charge"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Charge.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Charge"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Charge"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Charge.MinValue"/> or greater than <see cref="F:TVA.Units.Charge.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Charge.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Charge"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Charge"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Charge.MinValue"/> or greater than <see cref="F:TVA.Units.Charge.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Charge.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Charge"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Charge"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Charge.MinValue"/> or greater than <see cref="F:TVA.Units.Charge.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Charge.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Charge"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Charge"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Charge.MinValue"/> or greater than <see cref="F:TVA.Units.Charge.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Charge.TryParse(System.String,TVA.Units.Charge@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Charge"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Charge"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paracoulomb is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Charge.MinValue"/> or greater than <see cref="F:TVA.Units.Charge.MaxValue"/>.
            This paracoulomb is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Charge.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Charge@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Charge"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Charge"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paracoulomb is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Charge.MinValue"/> or
            greater than <see cref="F:TVA.Units.Charge.MaxValue"/>. This paracoulomb is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Charge.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Equality(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Inequality(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_LessThan(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_LessThanOrEqual(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_GreaterThan(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_GreaterThanOrEqual(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Implicit(System.Double)~TVA.Units.Charge">
            <summary>
            Implicitly converts value, represented in coulombs, to a <see cref="T:TVA.Units.Charge"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Charge"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Implicit(TVA.Units.Charge)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Charge"/>, represented in coulombs, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Charge"/> value.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Modulus(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Charge"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Addition(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Charge"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Subtraction(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Charge"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Multiply(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Charge"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Division(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Charge"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Charge.op_Exponent(TVA.Units.Charge,TVA.Units.Charge)">
            <summary>
            Returns result of first value raised to charge of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Charge"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Charge"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> as the result.</returns>
        </member>
        <member name="F:TVA.Units.Charge.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Charge"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Charge.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Charge"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Charge.FromAmpereHours(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Charge"/> value from the specified <paramref name="value"/> in ampere-hours.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Charge"/> value in ampere-hours.</param>
            <returns>New <see cref="T:TVA.Units.Charge"/> object from the specified <paramref name="value"/> in ampere-hours.</returns>
        </member>
        <member name="M:TVA.Units.Charge.FromAbcoulombs(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Charge"/> value from the specified <paramref name="value"/> in abcoulombs.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Charge"/> value in abcoulombs.</param>
            <returns>New <see cref="T:TVA.Units.Charge"/> object from the specified <paramref name="value"/> in abcoulombs.</returns>
        </member>
        <member name="M:TVA.Units.Charge.FromStatcoulombs(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Charge"/> value from the specified <paramref name="value"/> in statcoulombs.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Charge"/> value in statcoulombs.</param>
            <returns>New <see cref="T:TVA.Units.Charge"/> object from the specified <paramref name="value"/> in statcoulombs.</returns>
        </member>
        <member name="M:TVA.Units.Charge.FromAtomicUnitsOfCharge(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Charge"/> value from the specified <paramref name="value"/> in atomic units of charge.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Charge"/> value in atomic units of charge.</param>
            <returns>New <see cref="T:TVA.Units.Charge"/> object from the specified <paramref name="value"/> in atomic units of charge.</returns>
        </member>
        <member name="M:TVA.Units.Charge.FromFaraday(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Charge"/> value from the specified <paramref name="value"/> in faraday.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Charge"/> value in faraday.</param>
            <returns>New <see cref="T:TVA.Units.Charge"/> object from the specified <paramref name="value"/> in faraday.</returns>
        </member>
        <member name="T:TVA.Units.Angle">
            <summary>Represents an angle, in radians, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing an angle in radians; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other angle representations, specifically
            degrees, grads (a.k.a., grade, gradian and gon), arcminutes (a.k.a., minute of arc and MOA),
            arcseconds (a.k.a., second of arc) and angular mil (a.k.a. mil).
            <example>
            This example converts degrees to grads:
            <code>
            public double GetGrads(double degrees)
            {
                return Angle.FromDegrees(degrees).ToGrads();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Angle.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Angle"/>.
            </summary>
            <param name="value">New angle value in radians.</param>
        </member>
        <member name="M:TVA.Units.Angle.ToDegrees">
            <summary>
            Gets the <see cref="T:TVA.Units.Angle"/> value in degrees.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Angle"/> in degrees.</returns>
        </member>
        <member name="M:TVA.Units.Angle.ToGrads">
            <summary>
            Gets the <see cref="T:TVA.Units.Angle"/> value in grads.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Angle"/> in grads.</returns>
        </member>
        <member name="M:TVA.Units.Angle.ToArcMinutes">
            <summary>
            Gets the <see cref="T:TVA.Units.Angle"/> value in arcminutes.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Angle"/> in arcminutes.</returns>
        </member>
        <member name="M:TVA.Units.Angle.ToArcSeconds">
            <summary>
            Gets the <see cref="T:TVA.Units.Angle"/> value in arcseconds.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Angle"/> in arcseconds.</returns>
        </member>
        <member name="M:TVA.Units.Angle.ToAngularMil">
            <summary>
            Gets the <see cref="T:TVA.Units.Angle"/> value in angular mil.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Angle"/> in angular mil.</returns>
        </member>
        <member name="M:TVA.Units.Angle.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Angle"/>.</exception>
        </member>
        <member name="M:TVA.Units.Angle.CompareTo(TVA.Units.Angle)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Angle"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">An <see cref="T:TVA.Units.Angle"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Angle"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.Equals(TVA.Units.Angle)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Angle"/> value.
            </summary>
            <param name="obj">An <see cref="T:TVA.Units.Angle"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Angle.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Angle"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            An <see cref="T:TVA.Units.Angle"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Angle.MinValue"/> or greater than <see cref="F:TVA.Units.Angle.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Angle.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Angle"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            An <see cref="T:TVA.Units.Angle"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Angle.MinValue"/> or greater than <see cref="F:TVA.Units.Angle.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Angle.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Angle"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            An <see cref="T:TVA.Units.Angle"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Angle.MinValue"/> or greater than <see cref="F:TVA.Units.Angle.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Angle.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Angle"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            An <see cref="T:TVA.Units.Angle"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Angle.MinValue"/> or greater than <see cref="F:TVA.Units.Angle.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Angle.TryParse(System.String,TVA.Units.Angle@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Angle"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Angle"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Angle.MinValue"/> or greater than <see cref="F:TVA.Units.Angle.MaxValue"/>.
            This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Angle.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Angle@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Angle"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Angle"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Angle.MinValue"/> or
            greater than <see cref="F:TVA.Units.Angle.MaxValue"/>. This parameter is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Angle.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Equality(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the operation result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Inequality(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the operation result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_LessThan(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the operation result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_LessThanOrEqual(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the operation result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_GreaterThan(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the operation result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_GreaterThanOrEqual(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the operation result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Implicit(System.Double)~TVA.Units.Angle">
            <summary>
            Implicitly converts value, represented in radians, to an <see cref="T:TVA.Units.Angle"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>An <see cref="T:TVA.Units.Angle"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Implicit(TVA.Units.Angle)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Angle"/>, represented in radians, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">An <see cref="T:TVA.Units.Angle"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Modulus(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Angle"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Addition(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Angle"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Subtraction(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Angle"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Multiply(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Angle"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Division(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Angle"/> as the result.</returns>
        </member>
        <member name="M:TVA.Units.Angle.op_Exponent(TVA.Units.Angle,TVA.Units.Angle)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Angle"/> as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Angle"/> as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> as the result.</returns>
        </member>
        <member name="F:TVA.Units.Angle.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Angle"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Angle.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Angle"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Angle.FromDegrees(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Angle"/> value from the specified <paramref name="value"/> in degrees.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Angle"/> value in degrees.</param>
            <returns>New <see cref="T:TVA.Units.Angle"/> object from the specified <paramref name="value"/> in degrees.</returns>
        </member>
        <member name="M:TVA.Units.Angle.FromGrads(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Angle"/> value from the specified <paramref name="value"/> in grads.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Angle"/> value in grads.</param>
            <returns>New <see cref="T:TVA.Units.Angle"/> object from the specified <paramref name="value"/> in grads.</returns>
        </member>
        <member name="M:TVA.Units.Angle.FromArcMinutes(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Angle"/> value from the specified <paramref name="value"/> in arcminutes.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Angle"/> value in arcminutes.</param>
            <returns>New <see cref="T:TVA.Units.Angle"/> object from the specified <paramref name="value"/> in arcminutes.</returns>
        </member>
        <member name="M:TVA.Units.Angle.FromArcSeconds(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Angle"/> value from the specified <paramref name="value"/> in arcseconds.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Angle"/> value in arcseconds.</param>
            <returns>New <see cref="T:TVA.Units.Angle"/> object from the specified <paramref name="value"/> in arcseconds.</returns>
        </member>
        <member name="M:TVA.Units.Angle.FromAngularMil(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Angle"/> value from the specified <paramref name="value"/> in angular mil.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Angle"/> value in angular mil.</param>
            <returns>New <see cref="T:TVA.Units.Angle"/> object from the specified <paramref name="value"/> in angular mil.</returns>
        </member>
        <member name="T:TVA.Net.Smtp.NamespaceDoc">
            <summary>
            Contains classes used to simplify and standardize operations related to sending e-mail messages.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpResponse">
            <summary>
            Defines a FTP response.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.InvalidCode">
            <summary>
            FTP response code for invalid code.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.DataChannelOpenedTransferStart">
            <summary>
            FTP response code for data channel opened, transfer start.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.FileOkBeginOpenDataChannel">
            <summary>
            FTP response code for file OK, begin open data channel.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.ServiceReady">
            <summary>
            FTP response code for service ready.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.ClosingDataChannel">
            <summary>
            FTP response code for closing data channel.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.EnterPassiveMode">
            <summary>
            FTP response code for enter passive mode.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.RequestFileActionComplete">
            <summary>
            FTP response code for request file action complete.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.UserLoggedIn">
            <summary>
            FTP response code for user logged in.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.UserAcceptedWaitingPass">
            <summary>
            FTP response code for user accepted waiting pass.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.RequestFileActionPending">
            <summary>
            FTP response code for request file action pending.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.ServiceUnavailable">
            <summary>
            FTP response code for service unavailable.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpResponse.TransferAborted">
            <summary>
            FTP response code for transfer aborted.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpResponse.Message">
            <summary>
            Gets FTP response message.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpResponse.Respones">
            <summary>
            Gets FTP response queue.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpResponse.Code">
            <summary>
            Gets FTP response code.
            </summary>
        </member>
        <member name="T:TVA.IProvideStatus">
            <summary>
            Defines an interface for any object to allow it to provide a name and status
            that can be displayed for informational purposes.
            </summary>
        </member>
        <member name="P:TVA.IProvideStatus.Name">
            <summary>
            Gets the name of the object providing status information.
            </summary>
        </member>
        <member name="P:TVA.IProvideStatus.Status">
            <summary>
            Gets the current status details about object providing status information.
            </summary>
        </member>
        <member name="T:TVA.IO.MultipleDestinationExporter">
             <summary>
             Handles the exporting of a file to multiple destinations that are defined in the config file.
             </summary>
             <remarks>
             This class is useful for updating the same file on multiple servers (e.g., load balanced web server).
             </remarks>
             <example>
             This example shows the use <see cref="T:TVA.IO.MultipleDestinationExporter"/> for exporting data to multiple locations:
             <code>
             using System;
             using TVA.IO;
            
             class Program
             {
                 static MultipleDestinationExporter s_exporter;
            
                 static void Main(string[] args)
                 {
                     s_exporter = new MultipleDestinationExporter();
                     s_exporter.Initialized += s_exporter_Initialized;
                     ExportDestination[] defaultDestinations = new ExportDestination[] 
                     {
                         new ExportDestination(@"\\server1\share\exportFile.txt", false, "domain", "user1", "password1"), 
                         new ExportDestination(@"\\server2\share\exportFile.txt", false, "domain", "user2", "password2")
                     };
                     // Initialize with the destinations where data is to be exported.
                     s_exporter.Initialize(defaultDestinations);
            
                     Console.ReadLine();
                 }
            
                 static void s_exporter_Initialized(object sender, EventArgs e)
                 {
                     // Export data to all defined locations after initialization.
                     s_exporter.ExportData("TEST DATA");
                 }
             }
             </code>
             This example shows the config file entry that can be used to specify the <see cref="T:TVA.IO.ExportDestination"/> 
             used by the <see cref="T:TVA.IO.MultipleDestinationExporter"/> when exporting data:
             <code>
             <![CDATA[
             <exportDestinations>
               <add name="ExportTimeout" value="-1" description="Total allowed time for all exports to execute in milliseconds."
                 encrypted="false" />
               <add name="ExportCount" value="2" description="Total number of export files to produce."
                 encrypted="false" />
               <add name="ExportDestination1" value="\\server1\share\" description="Root path for export destination. Use UNC path (\\server\share) with no trailing slash for network shares."
                 encrypted="false" />
               <add name="ExportDestination1.ConnectToShare" value="True" description="Set to True to attempt authentication to network share."
                 encrypted="false" />
               <add name="ExportDestination1.Domain" value="domain" description="Domain used for authentication to network share (computer name for local accounts)."
                 encrypted="false" />
               <add name="ExportDestination1.UserName" value="user1" description="User name used for authentication to network share."
                 encrypted="false" />
               <add name="ExportDestination1.Password" value="l2qlAwAPihJjoThH+G53BUxzYsIkTE2yNBHLtd1WA3hysDhwDB82ouJb9n35QtG8"
                 description="Encrypted password used for authentication to network share."
                 encrypted="true" />
               <add name="ExportDestination1.FileName" value="exportFile.txt" description="Path and file name of data export (do not include drive letter or UNC share). Prefix with slash when using UNC paths (\path\filename.txt)."
                 encrypted="false" />
               <add name="ExportDestination2" value="\\server2\share\" description="Root path for export destination. Use UNC path (\\server\share) with no trailing slash for network shares."
                 encrypted="false" />
               <add name="ExportDestination2.ConnectToShare" value="True" description="Set to True to attempt authentication to network share."
                 encrypted="false" />
               <add name="ExportDestination2.Domain" value="domain" description="Domain used for authentication to network share (computer name for local accounts)."
                 encrypted="false" />
               <add name="ExportDestination2.UserName" value="user2" description="User name used for authentication to network share."
                 encrypted="false" />
               <add name="ExportDestination2.Password" value="l2qlAwAPihJjoThH+G53BYT6BXHQr13D6Asdibl0rDmlrgRXvJmCwcP8uvkFRHr9"
                 description="Encrypted password used for authentication to network share."
                 encrypted="true" />
               <add name="ExportDestination2.FileName" value="exportFile.txt" description="Path and file name of data export (do not include drive letter or UNC share). Prefix with slash when using UNC paths (\path\filename.txt)."
                 encrypted="false" />
             </exportDestinations>
             ]]>
             </code>
             </example>
             <seealso cref="T:TVA.IO.ExportDestination"/>
        </member>
        <member name="T:TVA.Configuration.IPersistSettings">
            <summary>
            Defines as interface that specifies that this object can persists settings to a config file.
            </summary>
        </member>
        <member name="M:TVA.Configuration.IPersistSettings.SaveSettings">
            <summary>
            Saves settings to the config file.
            </summary>
        </member>
        <member name="M:TVA.Configuration.IPersistSettings.LoadSettings">
            <summary>
            Loads saved settings from the config file.
            </summary>
        </member>
        <member name="P:TVA.Configuration.IPersistSettings.PersistSettings">
            <summary>
            Determines whether the object settings are to be persisted to the config file.
            </summary>
        </member>
        <member name="P:TVA.Configuration.IPersistSettings.SettingsCategory">
            <summary>
            Gets or sets the category name under which the object settings are persisted in the config file.
            </summary>
        </member>
        <member name="F:TVA.IO.MultipleDestinationExporter.DefaultExportTimeout">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.MultipleDestinationExporter.ExportTimeout"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.MultipleDestinationExporter.DefaultPersistSettings">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.MultipleDestinationExporter.PersistSettings"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.MultipleDestinationExporter.DefaultSettingsCategory">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.MultipleDestinationExporter.SettingsCategory"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.MultipleDestinationExporter.DefaultMaximumRetryAttempts">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.MultipleDestinationExporter.MaximumRetryAttempts"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.MultipleDestinationExporter.DefaultRetryDelayInterval">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.MultipleDestinationExporter.RetryDelayInterval"/> property.
            </summary>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.IO.MultipleDestinationExporter"/> class.
            </summary>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.IO.MultipleDestinationExporter"/> class.
            </summary>
            <param name="container"><see cref="T:System.ComponentModel.IContainer"/> object that contains the <see cref="T:TVA.IO.MultipleDestinationExporter"/>.</param>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.IO.MultipleDestinationExporter"/> class.
            </summary>
            <param name="settingsCategory">The config file settings category under which the export destinations are defined.</param>
            <param name="exportTimeout">The total allowed time in milliseconds for each export to execute.</param>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.BeginInit">
            <summary>
            Performs necessary operations before the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.IO.MultipleDestinationExporter.BeginInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.EndInit">
            <summary>
            Performs necessary operations after the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.IO.MultipleDestinationExporter.EndInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.SaveSettings">
            <summary>
            Saves settings for the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object to the config file if the <see cref="P:TVA.IO.MultipleDestinationExporter.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.IO.MultipleDestinationExporter.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.LoadSettings">
            <summary>
            Loads saved settings for the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object from the config file if the <see cref="P:TVA.IO.MultipleDestinationExporter.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.IO.MultipleDestinationExporter.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.Initialize">
            <summary>
            Initializes (or reinitializes) <see cref="T:TVA.IO.MultipleDestinationExporter"/> from configuration settings.
            </summary>
            <remarks>
            If not being used as a component (i.e., user creates their own instance of this class), this method
            must be called in order to initialize exports.  Event if used as a component this method can be
            called at anytime to reintialize the exports with new configuration information.
            </remarks>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.Initialize(System.Collections.Generic.IEnumerable{TVA.IO.ExportDestination})">
            <summary>
            Initializes (or reinitializes) <see cref="T:TVA.IO.MultipleDestinationExporter"/> from configuration settings.
            </summary>
            <param name="defaultDestinations">Provides a default set of export destinations if none exist in configuration settings.</param>
            <remarks>
            If not being used as a component (i.e., user creates their own instance of this class), this method
            must be called in order to initialize exports.  Even if used as a component this method can be
            called at anytime to reintialize the exports with new configuration information.
            </remarks>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.OnInitialized">
            <summary>
            Raises the <see cref="E:TVA.IO.MultipleDestinationExporter.Initialized"/> event.
            </summary>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.OnStatusMessage(System.String,System.Object[])">
            <summary>
            Raises the <see cref="E:TVA.IO.MultipleDestinationExporter.StatusMessage"/> event.
            </summary>
            <param name="status">Status message to report.</param>
            <param name="args"><see cref="M:System.String.Format(System.String,System.Object[])"/> parameters used for status message.</param>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.OnProcessException(System.Exception)">
            <summary>
            Raises <see cref="E:TVA.IO.MultipleDestinationExporter.ProcessException"/> event.
            </summary>
            <param name="ex">Processing <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.ExportData(System.String)">
            <summary>
            Start multiple file export.
            </summary>
            <param name="fileData">Text based data to export to each destination.</param>
            <remarks>
            This is assumed to be the full content of the file to export. This class does not queue data since
            the export is not intended to append to an existing file but rather replace an existing one.
            </remarks>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.ExportData(System.Byte[])">
            <summary>
            Start multiple file export.
            </summary>
            <param name="fileData">Binary data to export to each destination.</param>
            <remarks>
            This is assumed to be the full content of the file to export. This class does not queue data since
            the export is not intended to append to an existing file but rather replace an existing one.
            </remarks>
        </member>
        <member name="E:TVA.IO.MultipleDestinationExporter.Initialized">
            <summary>
            Occurs when the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object has been initialized.
            </summary>
        </member>
        <member name="E:TVA.IO.MultipleDestinationExporter.StatusMessage">
            <summary>
            Occurs when status information for the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object is being reported.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the status message being reported by the <see cref="T:TVA.IO.MultipleDestinationExporter"/>.
            </remarks>
        </member>
        <member name="E:TVA.IO.MultipleDestinationExporter.ProcessException">
            <summary>
            Event is raised when there is an exception encountered while processing.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the exception that was thrown.
            </remarks>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.ExportTimeout">
            <summary>
            Gets or sets the total allowed time in milliseconds for each export to execute.
            </summary>
            <remarks>
            Set to Timeout.Infinite (-1) for no timeout.
            </remarks>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.MaximumRetryAttempts">
            <summary>
            Gets or sets the maximum number of retries that will be attempted during an export if the export fails.
            </summary>
            <remarks>
            Total file export attempts = 1 + <see cref="P:TVA.IO.MultipleDestinationExporter.MaximumRetryAttempts"/>. Set to zero to only attempt export once.
            </remarks>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.RetryDelayInterval">
            <summary>
            Gets or sets the interval to wait, in milliseconds, before retrying an export if the export fails.
            </summary>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.PersistSettings">
            <summary>
            Gets or sets a boolean value that indicates whether the settings of <see cref="T:TVA.IO.MultipleDestinationExporter"/> object are 
            to be saved to the config file.
            </summary>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.SettingsCategory">
            <summary>
            Gets or sets the category under which the settings of <see cref="T:TVA.IO.MultipleDestinationExporter"/> object are to be saved
            to the config file if the <see cref="P:TVA.IO.MultipleDestinationExporter.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.TextEncoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding"/> to be used to encode text data being exported.
            </summary>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object is currently enabled.
            </summary>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.TotalExports">
            <summary>
            Gets the total number exports performed successfully.
            </summary>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.ExportDestinations">
            <summary>
            Gets a list of currently defined <see cref="T:TVA.IO.ExportDestination"/>.
            </summary>
            <remarks>
            Use the <see cref="M:TVA.IO.MultipleDestinationExporter.Initialize(System.Collections.Generic.IEnumerable{TVA.IO.ExportDestination})"/> method to change the export destination collection.
            </remarks>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.Name">
            <summary>
            Gets the unique identifier of the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object.
            </summary>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:TVA.IO.MultipleDestinationExporter"/> object.
            </summary>
        </member>
        <member name="T:TVA.IO.MultipleDestinationExporter.ExportState">
            <summary>
            Defines state information for an export.
            </summary>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.ExportState.#ctor">
            <summary>
            Creates a new <see cref="T:TVA.IO.MultipleDestinationExporter.ExportState"/>.
            </summary>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.ExportState.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.IO.MultipleDestinationExporter.ExportState"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.ExportState.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.IO.MultipleDestinationExporter.ExportState"/> object.
            </summary>
        </member>
        <member name="M:TVA.IO.MultipleDestinationExporter.ExportState.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.IO.MultipleDestinationExporter.ExportState"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.ExportState.SourceFileName">
            <summary>
            Gets or sets the source file name for the <see cref="T:TVA.IO.MultipleDestinationExporter.ExportState"/>.
            </summary>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.ExportState.DestinationFileName">
            <summary>
            Gets or sets the destination file name for the <see cref="T:TVA.IO.MultipleDestinationExporter.ExportState"/>.
            </summary>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.ExportState.WaitHandle">
            <summary>
            Gets or sets the event wait handle for the <see cref="T:TVA.IO.MultipleDestinationExporter.ExportState"/>.
            </summary>
        </member>
        <member name="P:TVA.IO.MultipleDestinationExporter.ExportState.Timeout">
            <summary>
            Gets or sets a flag that is used to determine if export process has timed out.
            </summary>
        </member>
        <member name="T:TVA.Adapters.AdapterLoader`1">
            <summary>
            Represents a generic loader of adapters.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of adapters to be loaded.</typeparam>
            <example>
            This example show how to use the <see cref="T:TVA.Adapters.AdapterLoader`1"/> to isolate adapters in seperate <see cref="T:System.AppDomain"/>s and monitor their resource usage:
            <code>
            using System;
            using System.Collections.Generic;
            using System.Text;
            using System.Threading;
            using TVA;
            using TVA.Adapters;
            using TVA.Security.Cryptography;
            using TVA.Units;
            
            class Program
            {
                static AdapterLoader&lt;PublishAdapterBase&gt; s_adapterLoader;
            
                static void Main(string[] args)
                {
                    // Enable app domain resource monitoring.
                    AppDomain.MonitoringIsEnabled = true;
            
                    // Load adapters that mimic data publishing.
                    s_adapterLoader = new AdapterLoader&lt;PublishAdapterBase&gt;();
                    s_adapterLoader.IsolateAdapters = true;
                    s_adapterLoader.MonitorAdapters = true;
                    s_adapterLoader.AllowableProcessMemoryUsage = 200 * SI2.Mega;
                    s_adapterLoader.AllowableProcessProcessorUsage = 50;
                    s_adapterLoader.AllowableAdapterMemoryUsage = 100 * SI2.Mega;
                    s_adapterLoader.AllowableAdapterProcessorUsage = 25;
                    s_adapterLoader.AdapterLoaded += OnAdapterLoaded;
                    s_adapterLoader.AdapterUnloaded += OnAdapterUnloaded;
                    s_adapterLoader.AdapterResourceUsageExceeded += OnAdapterResourceUsageExceeded;
                    s_adapterLoader.Initialize();
            
                    // Take user input to alter adapter working state.
                    string userInput;
                    Console.WriteLine("Possible commands:");
                    Console.WriteLine("  Connect - Connects all disconnected adapters");
                    Console.WriteLine("  Disconnect - Disconnects all connected adapters");
                    Console.WriteLine("  Exit - Exits this application\r\n");
                    while (string.Compare(userInput = Console.ReadLine(), "Exit", true) != 0)
                    {
                        switch (userInput.ToLower())
                        {
                            case "connect":
                                // Connect all adapters.
                                Console.Write("Connecting adapters...");
                                foreach (PublishAdapterBase adapter in s_adapterLoader.Adapters)
                                {
                                    adapter.Enabled = true;
                                }
                                Console.WriteLine("done.\r\n");
                                break;
                            case "disconnect":
                                // Disconnect all adapters.
                                Console.Write("Disconnecting adapters...");
                                foreach (PublishAdapterBase adapter in s_adapterLoader.Adapters)
                                {
                                    adapter.Enabled = false;
                                }
                                Console.WriteLine("done.\r\n");
                                break;
                        }
                    }
            
                    // Shutdown.
                    s_adapterLoader.Dispose();
                }
            
                static void OnAdapterLoaded(object sender, EventArgs&lt;PublishAdapterBase&gt; e)
                {
                    Console.WriteLine("{0} has been loaded\r\n", e.Argument.GetType().Name);
                }
            
                static void OnAdapterUnloaded(object sender, EventArgs&lt;PublishAdapterBase&gt; e)
                {
                    Console.WriteLine("{0} has been unloaded\r\n", e.Argument.GetType().Name);
                }
            
                static void OnAdapterResourceUsageExceeded(object sender, TVA.EventArgs&lt;PublishAdapterBase&gt; e)
                {
                    Console.WriteLine("{0} status:", e.Argument.Name);
                    Console.WriteLine(e.Argument.Status);
            
                    // Remove the adapter in order to reclaim the resources used by it.
                    lock (s_adapterLoader.Adapters)
                    {
                        s_adapterLoader.Adapters.Remove(e.Argument);
                    }
                }
            }
            
            /// &lt;summary&gt;
            /// Base adapter class.
            /// &lt;/summary&gt;
            public abstract class PublishAdapterBase : Adapter
            {
                public PublishAdapterBase()
                {
                    Data = new List&lt;byte[]&gt;();
                }
            
                public List&lt;byte[]&gt; Data { get; set; }
            
                public override void Initialize()
                {
                    base.Initialize();
                    new Thread(Publish).Start();
                    Enabled = true;
                }
            
                protected abstract void Publish();
            }
            
            /// &lt;summary&gt;
            /// Adapter that does not manage memory well.
            /// &lt;/summary&gt;
            public class PublisAdapterA : PublishAdapterBase
            {
                protected override void Publish()
                {
                    while (true)
                    {
                        for (int i = 0; i &lt; 10000; i++)
                        {
                            Data.Add(new byte[10]);
                        }
                        Thread.Sleep(100);
            
                        if (Enabled)
                            Data.RemoveRange(0, Data.Count / 2);
                    }
                }
            }
            
            /// &lt;summary&gt;
            /// Adapter that uses the processor in excess.
            /// &lt;/summary&gt;
            public class PublishAdapterB : PublishAdapterBase
            {
                protected override void Publish()
                {
                    string text = string.Empty;
                    System.Random random = new System.Random();
                    while (true)
                    {
                        for (int i = 0; i &lt; 10; i++)
                        {
                            for (int j = 0; j &lt; 4; j++)
                            {
                                text += (char)random.Next(256);
                            }
                            Data.Add(Encoding.ASCII.GetBytes(text.Encrypt("C1pH3r", CipherStrength.Aes256)).BlockCopy(0, 1));
                        }
                        Thread.Sleep(10);
            
                        if (Enabled)
                            Data.RemoveRange(0, Data.Count / 2);
                    }
                }
            }
            </code>
            </example>
            <seealso cref="T:TVA.Adapters.Adapter"/>
            <seealso cref="T:TVA.Adapters.IAdapter"/>
        </member>
        <member name="F:TVA.Adapters.AdapterLoader`1.DefaultAdapterDirectory">
            <summary>
            Specified the default value for the <see cref="P:TVA.Adapters.AdapterLoader`1.AdapterDirectory"/> property.
            </summary>
        </member>
        <member name="F:TVA.Adapters.AdapterLoader`1.DefaultWatchForAdapters">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Adapters.AdapterLoader`1.WatchForAdapters"/> property.
            </summary>
        </member>
        <member name="F:TVA.Adapters.AdapterLoader`1.DefaultIsolateAdapters">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Adapters.AdapterLoader`1.IsolateAdapters"/> property.
            </summary>
        </member>
        <member name="F:TVA.Adapters.AdapterLoader`1.DefaultMonitorAdapters">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Adapters.AdapterLoader`1.MonitorAdapters"/> property.
            </summary>
        </member>
        <member name="F:TVA.Adapters.AdapterLoader`1.DefaultAllowableProcessMemoryUsage">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableProcessMemoryUsage"/> property
            </summary>
        </member>
        <member name="F:TVA.Adapters.AdapterLoader`1.DefaultAllowableProcessProcessorUsage">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableProcessProcessorUsage"/> property.
            </summary>
        </member>
        <member name="F:TVA.Adapters.AdapterLoader`1.DefaultAllowableAdapterMemoryUsage">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableAdapterMemoryUsage"/> property.
            </summary>
        </member>
        <member name="F:TVA.Adapters.AdapterLoader`1.DefaultAllowableAdapterProcessorUsage">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableAdapterProcessorUsage"/> property.
            </summary>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Adapters.AdapterLoader`1"/> class.
            </summary>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Adapters.AdapterLoader`1"/> is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Adapters.AdapterLoader`1"/>.
            </summary>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.Initialize">
            <summary>
            Initializes the <see cref="T:TVA.Adapters.AdapterLoader`1"/>.
            </summary>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes the <see cref="T:TVA.Adapters.AdapterLoader`1"/>.
            </summary>
            <param name="adapterTypes">Collection of adapter <see cref="T:System.Type"/>s from which <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> are to be created.</param>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.ProcessAdapter(System.Type)">
            <summary>
            Processes the <paramref name="adapterType"/> by creating its instance and initializing it.
            </summary>
            <param name="adapterType"><see cref="T:System.Type"/> of the adapter to be instantiated and initialized.</param>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.MonitorAdapterResources">
            <summary>
            Monitors the resource utilization of <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/>.
            </summary>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.GetMemoryUsage(System.Diagnostics.Process)">
            <summary>
            Gets the memory usage in bytes of the specified <paramref name="process"/>.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> whose memory usage is to be determined.</param>
            <returns>Memory usage in bytes of the specified <paramref name="process"/>.</returns>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.GetProcessorUsage(System.Diagnostics.Process)">
            <summary>
            Gets the % processor usage of the specified <paramref name="process"/>.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> whose processot usage is to be determined.</param>
            <returns>Processor usage in % of the specified <paramref name="process"/>.</returns>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.ExecuteAdapterOperation(`0,System.Object)">
            <summary>
            Executes an operation on the <paramref name="adapter"/> with the given <paramref name="data"/>.
            </summary>
            <param name="adapter">Adapter on which an operation is to be executed.</param>
            <param name="data">Data to be used when executing an operation.</param>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Adapters.AdapterLoader`1"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.OnAdapterCreated(`0)">
            <summary>
            Raises the <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterCreated"/> event.
            </summary>
            <param name="adapter">Adapter instance to send to <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterCreated"/> event.</param>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.OnAdapterLoaded(`0)">
            <summary>
            Raises the <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterLoaded"/> event.
            </summary>
            <param name="adapter">Adapter instance to send to <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterLoaded"/> event.</param>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.OnAdapterUnloaded(`0)">
            <summary>
            Raises the <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterUnloaded"/> event.
            </summary>
            <param name="adapter">Adapter instance to send to <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterUnloaded"/> event.</param>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.OnAdapterResourceUsageExceeded(`0)">
            <summary>
            Raises the <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterResourceUsageExceeded"/> event.
            </summary>
            <param name="adapter">Adapter instance to send to <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterResourceUsageExceeded"/> event.</param>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.OnAdapterLoadException(System.Type,System.Exception)">
            <summary>
            Raises the <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterLoadException"/> event.
            </summary>
            <param name="adapter"><see cref="T:System.Type"/> to send to <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterLoadException"/> event.</param>
            <param name="exception"><see cref="T:System.Exception"/> to send to <see cref="E:TVA.Adapters.AdapterLoader`1.AdapterLoadException"/> event.</param>
        </member>
        <member name="M:TVA.Adapters.AdapterLoader`1.OnOperationExecutionException(`0,System.Exception)">
            <summary>
            Raises the <see cref="E:TVA.Adapters.AdapterLoader`1.OperationExecutionException"/> event.
            </summary>
            <param name="adapter">Adapter instance to send to <see cref="E:TVA.Adapters.AdapterLoader`1.OperationExecutionException"/> event.</param>
            <param name="exception"><see cref="T:System.Exception"/> to send to <see cref="E:TVA.Adapters.AdapterLoader`1.OperationExecutionException"/> event.</param>
        </member>
        <member name="E:TVA.Adapters.AdapterLoader`1.AdapterCreated">
            <summary>
            Occurs when a new adapter is found and instantiated.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the adapter that was created.
            </remarks>
        </member>
        <member name="E:TVA.Adapters.AdapterLoader`1.AdapterLoaded">
            <summary>
            Occurs when a new adapter is loaded to the <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> list.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the adapter that was loaded.
            </remarks>
        </member>
        <member name="E:TVA.Adapters.AdapterLoader`1.AdapterUnloaded">
            <summary>
            Occurs when an existing adapter is unloaded from the <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> list.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the adapter that was unloaded.
            </remarks>
        </member>
        <member name="E:TVA.Adapters.AdapterLoader`1.AdapterResourceUsageExceeded">
            <summary>
            Occurs when an adapter has exceeded either the <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableAdapterMemoryUsage"/> or <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableAdapterProcessorUsage"/>.
            </summary>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the adapter that exceeded the allowable system resource utlization.
        </member>
        <member name="E:TVA.Adapters.AdapterLoader`1.AdapterLoadException">
            <summary>
            Occurs when an <see cref="T:System.Exception"/> is encountered when loading an adapter.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`2.Argument1"/> is the <see cref="T:System.Type"/> of adapter that was being loaded.<br/>
            <see cref="F:TVA.EventArgs`2.Argument2"/> is the <see cref="T:System.Exception"/> encountered when loading the adapter.
            </remarks>
        </member>
        <member name="E:TVA.Adapters.AdapterLoader`1.OperationExecutionException">
            <summary>
            Occurs when an <see cref="T:System.Exception"/> is encountered while executing a queued operation on one the <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/>.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`2.Argument1"/> is the adapter on which the operation was being executed.<br/>
            <see cref="F:TVA.EventArgs`2.Argument2"/> is the <see cref="T:System.Exception"/> encountered when executing an operation on the adapter.
            </remarks>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.AdapterDirectory">
            <summary>
            Gets or sets the directory where <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> are located.
            </summary>
            <remarks>
            When an empty string is assigned to <see cref="P:TVA.Adapters.AdapterLoader`1.AdapterDirectory"/>, <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> are loaded from the directory where application is executing.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The value being assigned is a null string.</exception>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.WatchForAdapters">
            <summary>
            Gets or sets a boolean value that indicates whether new assemblies added at runtime will be processed for <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/>.
            </summary>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.IsolateAdapters">
            <summary>
            Gets or sets a boolean value that indicates whether <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> are loaded in seperate <see cref="T:System.AppDomain"/> for isolated execution.
            </summary>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.MonitorAdapters">
            <summary>
            Gets or sets a boolean value that indicates whether resource utilization of <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> executing in <see cref="P:TVA.Adapters.AdapterLoader`1.IsolateAdapters">isolation</see> is to be monitored.
            </summary>
            <remarks>
            Use <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableProcessMemoryUsage"/>, <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableProcessProcessorUsage"/>, <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableAdapterMemoryUsage"/> and 
            <see cref="P:TVA.Adapters.AdapterLoader`1.AllowableAdapterProcessorUsage"/> properties to configure how adapter resource utilization is to be monitored.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> do not implement the <see cref="T:TVA.Adapters.IAdapter"/> interface.</exception>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.AllowableProcessMemoryUsage">
            <summary>
            Gets or sets the processor time in % the current process is allowed to use before the internal monitoring process starts looking for offending <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value being assigned is zero or negative.</exception>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.AllowableProcessProcessorUsage">
            <summary>
            Gets or sets the memory in bytes the current process is allowed to use before the internal monitoring process starts looking for offending <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value being assigned is zero or negative.</exception>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.AllowableAdapterMemoryUsage">
            <summary>
            Gets or sets the processor time in % the <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> are allowed to use before being flagged as culprits by the internal monitoring process.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value being assigned is zero or negative.</exception>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.AllowableAdapterProcessorUsage">
            <summary>
            Gets or sets the memory in bytes the <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/> are allowed to use before being flagged as culprits by the internal monitoring process.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value being assigned is zero or negative.</exception>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.Adapters.AdapterLoader`1"/> is currently enabled.
            </summary>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.Adapters">
            <summary>
            Gets a list of adapters loaded from the <see cref="P:TVA.Adapters.AdapterLoader`1.AdapterDirectory"/>.
            </summary>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.Name">
            <summary>
            Gets the unique identifier of the <see cref="T:TVA.Adapters.AdapterLoader`1"/>.
            </summary>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:TVA.Adapters.AdapterLoader`1"/>.
            </summary>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.AdapterWatcher">
            <summary>
            Gets the <see cref="T:System.IO.FileSystemWatcher"/> object watching for new adapter assemblies added at runtime.
            </summary>
        </member>
        <member name="P:TVA.Adapters.AdapterLoader`1.OperationQueue">
            <summary>
            Gets the <see cref="T:TVA.Collections.ProcessQueue`1"/> object to be used for queuing operations to be executed on <see cref="P:TVA.Adapters.AdapterLoader`1.Adapters"/>.
            </summary>
        </member>
        <member name="T:TVA.USTimeZones">
            <summary>
            Defines a few common United States time zones.
            </summary>
        </member>
        <member name="P:TVA.USTimeZones.Atlantic">
            <summary>
            Gets the Atlantic time zone.
            </summary>
            <remarks>This time zone is used by the Commonwealth of Puerto Rico and the United States Virgin Islands.</remarks>
        </member>
        <member name="P:TVA.USTimeZones.Eastern">
            <summary>
            Gets the Eastern time zone.
            </summary>
        </member>
        <member name="P:TVA.USTimeZones.Central">
            <summary>
            Gets the Central time zone.
            </summary>
        </member>
        <member name="P:TVA.USTimeZones.Mountain">
            <summary>
            Gets the Mountain time zone.
            </summary>
        </member>
        <member name="P:TVA.USTimeZones.Pacific">
            <summary>
            Gets the Pacific time zone.
            </summary>
        </member>
        <member name="P:TVA.USTimeZones.Alaskan">
            <summary>
            Gets the Alaskan time zone.
            </summary>
        </member>
        <member name="P:TVA.USTimeZones.Hawaiian">
            <summary>
            Gets the Hawaiian time zone.
            </summary>
        </member>
        <member name="P:TVA.USTimeZones.WestPacific">
            <summary>
            Gets the West Pacific time zone.
            </summary>
            <remarks>
            <para>This time zone is used by Guam and the Commonwealth of the Northern Mariana Islands.</para>
            <para>This is also known as the Chamorro time zone.</para>
            </remarks>
        </member>
        <member name="P:TVA.USTimeZones.Samoa">
            <summary>
            Gets the Samoa time zone.
            </summary>
            <remarks>This time zone is used by the American Samoa.</remarks>
        </member>
        <member name="T:TVA.Serialization">
            <summary>
            Common serialization related functions.
            </summary>
        </member>
        <member name="M:TVA.Serialization.CloneObject``1(``0)">
            <summary>
            Creates a clone of a serializable object.
            </summary>
            <typeparam name="T">The type of the cloned object.</typeparam>
            <param name="sourceObject">The type source to be cloned.</param>
            <returns>A clone of <paramref name="sourceObject"/>.</returns>
        </member>
        <member name="M:TVA.Serialization.GetObject``1(System.String)">
            <summary>
            Performs XML deserialization on the XML string and returns the typed object for it.
            </summary>
            <remarks>
            This function will throw an error during deserialization if the input data is invalid,
            consider using TryGetObject to prevent needing to implement exception handling.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            An error occurred during deserialization. The original exception is available using 
            the InnerException property.
            </exception>
            <typeparam name="T">The type of the object to create from the serialized string <paramref name="serializedObject"/>.</typeparam>
            <param name="serializedObject">A <see cref="T:System.String"/> representing the object (<paramref name="serializedObject"/>) to de-serialize.</param>
            <returns>A type T based on <paramref name="serializedObject"/>.</returns>
        </member>
        <member name="M:TVA.Serialization.TryGetObject``1(System.String,``0@)">
            <summary>
            Attempts XML deserialization on the XML string and returns the typed object for it.
            </summary>
            <typeparam name="T">The generic type T that is to be deserialized.</typeparam>
            <param name="serializedObject"><see cref="T:System.String"/> that contains the serialized representation of the object.</param>
            <param name="deserializedObject">An object of type T that is passed in as the container to hold the de-serialized object from the string <paramref name="serializedObject"/>.</param>
            <returns><see cref="T:System.Boolean"/> value indicating if the de-serialization was successful.</returns>
        </member>
        <member name="M:TVA.Serialization.GetObject``1(System.Byte[])">
            <summary>
            Performs binary deserialization on the byte array and returns the typed object for it.
            </summary>
            <remarks>
            This function will throw an error during deserialization if the input data is invalid,
            consider using TryGetObject to prevent needing to implement exception handling.
            </remarks>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Serialized object data is invalid or length is 0.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <typeparam name="T">The type of the object to create from the serialized byte array <paramref name="serializedObject"/>.</typeparam>
            <param name="serializedObject">A <see cref="T:System.Byte"/> array representing the object (<paramref name="serializedObject"/>) to de-serialize.</param>
            <returns>A type T based on <paramref name="serializedObject"/>.</returns>
        </member>
        <member name="M:TVA.Serialization.TryGetObject``1(System.Byte[],``0@)">
            <summary>
            Attempts binary deserialization on the byte array and returns the typed object for it.
            </summary>
            <param name="serializedObject">A <see cref="T:System.Byte"/> array representing the object (<paramref name="serializedObject"/>) to de-serialize.</param>
            <param name="deserializedObject">A byref type T that is passed in to be hold the de-serialized object.</param>
            <typeparam name="T">The generic type T that is to be deserialized.</typeparam>
            <returns>A <see cref="T:System.Boolean"/> which indicates whether the de-serialization process was successful.</returns>
        </member>
        <member name="M:TVA.Serialization.GetObject(System.Byte[])">
            <summary>
            Performs binary deserialization on the byte array and returns the object for it.
            </summary>
            <remarks>
            This function will throw an error during deserialization if the input data is invalid,
            consider using TryGetObject to prevent needing to implement exception handling.
            </remarks>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Serialized object data is invalid or length is 0.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <param name="serializedObject">A <see cref="T:System.Byte"/> array representing the object (<paramref name="serializedObject"/>) to de-serialize.</param>
            <returns>An <see cref="T:System.Object"/> based on <paramref name="serializedObject"/>.</returns>
        </member>
        <member name="M:TVA.Serialization.TryGetObject(System.Byte[],System.Object@)">
            <summary>
            Attempts binary deserialization on the byte array and returns the typed object for it.
            </summary>
            <param name="serializedObject">A <see cref="T:System.Byte"/> array representing the object (<paramref name="serializedObject"/>) to de-serialize.</param>
            <param name="deserializedObject">A byref <see cref="T:System.Object"></see> that is passed in to be hold the de-serialized object.</param>
            <returns>A <see cref="T:System.Boolean"/> which indicates whether the de-serialization process was successful.</returns>
        </member>
        <member name="M:TVA.Serialization.GetString(System.Object)">
            <summary>
            Performs XML serialization on the serializable object and returns the output as string.
            </summary>
            <param name="serializableObject">The serializable object.</param>
            <returns>An XML representation of the object if the specified object can be serialized; otherwise an empty string.</returns>
        </member>
        <member name="M:TVA.Serialization.GetBytes(System.Object)">
            <summary>
            Performs binary serialization on the serializable object and returns the output as byte array.
            </summary>
            <param name="serializableObject">The serializable object.</param>
            <returns>A byte array representation of the object if the specified object can be serialized; otherwise an empty array.</returns>
        </member>
        <member name="M:TVA.Serialization.GetStream(System.Object)">
            <summary>
            Performs binary serialization on the serializable object and returns the serialized object as a stream.
            </summary>
            <param name="serializableObject">The serializable object.</param>
            <returns>A memory stream representation of the object if the specified object can be serialized; otherwise an empty stream.</returns>
        </member>
        <member name="T:TVA.Parsing.MultiSourceFrameImageParserBase`3">
            <summary>
            This class defines a basic implementation of parsing functionality suitable for automating the parsing of multiple
            binary data streams, each represented as frames with common headers and returning the parsed data via an event.
            </summary>
            <remarks>
            <para>
            This class is more specific than the <see cref="T:TVA.Parsing.BinaryImageParserBase"/> in that it can automate the parsing of a
            particular protocol that is formatted as a series of frames that have a common method of identification.
            Automation of type creation occurs by loading implementations of common types that implement the
            <see cref="T:TVA.Parsing.ISupportFrameImage`1"/> interface. The common method of identification is handled by
            creating a class derived from the <see cref="T:TVA.Parsing.ICommonHeader`1"/> which primarily includes a
            TypeID property, but also should include any state information needed to parse a particular frame if necessary.
            Derived classes override the <see cref="M:TVA.Parsing.FrameImageParserBase`2.ParseCommonHeader(System.Byte[],System.Int32,System.Int32)"/>
            method in order to parse the <see cref="T:TVA.Parsing.ICommonHeader`1"/> from a provided binary image.
            </para>
            </remarks>
            <typeparam name="TSourceIdentifier">Type of identifier for the data source.</typeparam>
            <typeparam name="TTypeIdentifier">Type of identifier used to distinguish output types.</typeparam>
            <typeparam name="TOutputType">Type of the interface or class used to represent outputs.</typeparam>
        </member>
        <member name="T:TVA.Parsing.FrameImageParserBase`2">
            <summary>
            This class defines a basic implementation of parsing functionality suitable for automating the parsing of
            a binary data stream represented as frames with common headers and returning the parsed data via an event.
            </summary>
            <remarks>
            <para>
            This parser is designed as a write-only stream such that data can come from any source.
            </para>
            <para>
            This class is more specific than the <see cref="T:TVA.Parsing.BinaryImageParserBase"/> in that it can automate the parsing of
            a particular protocol that is formatted as a series of frames that have a common method of identification.
            Automation of type creation occurs by loading implementations of common types that implement the
            <see cref="T:TVA.Parsing.ISupportFrameImage`1"/> interface. The common method of identification is handled by
            creating a class derived from the <see cref="T:TVA.Parsing.ICommonHeader`1"/> which primarily includes a
            TypeID property, but also should include any state information needed to parse a particular frame if
            necessary. Derived classes simply override the <see cref="M:TVA.Parsing.FrameImageParserBase`2.ParseCommonHeader(System.Byte[],System.Int32,System.Int32)"/> function in order to parse
            the <see cref="T:TVA.Parsing.ICommonHeader`1"/> from a provided binary image.
            </para>
            </remarks>
            <typeparam name="TTypeIdentifier">Type of identifier used to distinguish output types.</typeparam>
            <typeparam name="TOutputType">Type of the interface or class used to represent outputs.</typeparam>
        </member>
        <member name="T:TVA.Parsing.BinaryImageParserBase">
            <summary>
            This class defines the fundamental functionality for parsing any stream of binary data.
            </summary>
            <remarks>
            This parser is designed as a write-only stream such that data can come from any source.
            </remarks>
        </member>
        <member name="T:TVA.Parsing.IBinaryImageParser">
            <summary>
            This interface represents the protocol independent representation of a streaming data parser.
            </summary>
        </member>
        <member name="M:TVA.Parsing.IBinaryImageParser.Start">
            <summary>
            Start the streaming data parser.
            </summary>
        </member>
        <member name="M:TVA.Parsing.IBinaryImageParser.Stop">
            <summary>
            Stops the streaming data parser.
            </summary>
        </member>
        <member name="M:TVA.Parsing.IBinaryImageParser.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes onto the <see cref="T:TVA.Parsing.IBinaryImageParser"/> stream for parsing.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="E:TVA.Parsing.IBinaryImageParser.DataDiscarded">
            <summary>
            Occurs when data image fails deserialized due to an exception.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the remaining portion of the binary image that failed to parse.
            </remarks>
        </member>
        <member name="E:TVA.Parsing.IBinaryImageParser.ParsingException">
            <summary>
            Occurs when an <see cref="T:System.Exception"/> is encountered while attempting to parse data.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the <see cref="T:System.Exception"/> encountered while parsing data.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.IBinaryImageParser.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the data parser is currently enabled.
            </summary>
        </member>
        <member name="P:TVA.Parsing.IBinaryImageParser.TotalProcessedBuffers">
            <summary>
            Gets the total number of buffer images processed so far.
            </summary>
        </member>
        <member name="F:TVA.Parsing.BinaryImageParserBase.DefaultProtocolSyncBytes">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Parsing.BinaryImageParserBase.ProtocolSyncBytes"/> property.
            </summary>
        </member>
        <member name="F:TVA.Parsing.BinaryImageParserBase.StreamInitialized">
            <summary>
            Tracks if data stream has been initialized.
            </summary>
            <remarks>
            Only relevant if <see cref="P:TVA.Parsing.BinaryImageParserBase.ProtocolUsesSyncBytes"/> is true.
            </remarks>
        </member>
        <member name="F:TVA.Parsing.BinaryImageParserBase.UnparsedBuffer">
            <summary>
            Remaining unparsed buffer from last parsing execution, if any.
            </summary>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Parsing.BinaryImageParserBase"/> class.
            </summary>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.Start">
            <summary>
            Start the streaming data parser.
            </summary>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.Stop">
            <summary>
            Stops the streaming data parser.
            </summary>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.Parse(TVA.Parsing.ISupportBinaryImage)">
            <summary>
            Parses the object implementing the <see cref="T:TVA.Parsing.ISupportBinaryImage"/> interface.
            </summary>
            <param name="image">Object to be parsed that implements the <see cref="T:TVA.Parsing.ISupportBinaryImage"/> interface.</param>
            <remarks>
            This function takes the binary image from <see cref="T:TVA.Parsing.ISupportBinaryImage"/> and writes the buffer to the <see cref="T:TVA.Parsing.BinaryImageParserBase"/> stream for parsing.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes onto the stream for parsing.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data
            to be written to the underlying device.
            </summary>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">Cannnot read from WriteOnly stream.</exception>
            <param name="buffer">Array of <see cref="T:System.Byte"/>s.</param>
            <param name="count">An <see cref="T:System.Int32"/> value for the offset.</param>
            <param name="offset">An <see cref="T:System.Int32"/> value for the count.</param>
            <returns>An <see cref="T:System.Int32"/> as the number of bytes read. Well. It would, if implemented.</returns>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">WriteOnly stream has no position.</exception>
            <param name="offset">A <see cref="T:System.Int64"/> value for the offset.</param>
            <param name="origin">A <see cref="T:System.IO.SeekOrigin"/>.</param>
            <returns>Returns a <see cref="T:System.Int64"/> value indicating the point that was seeked to.</returns>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.SetLength(System.Int64)">
            <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">WriteOnly stream has no length.</exception>
            <param name="value">A <see cref="T:System.Int64"/> value.</param>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.ParseFrame(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Protocol specific frame parsing algorithm.
            </summary>
            <param name="buffer">Buffer containing data to parse.</param>
            <param name="offset">Offset index into buffer that represents where to start parsing.</param>
            <param name="length">Maximum length of valid data from offset.</param>
            <returns>The length of the data that was parsed.</returns>
            <remarks>
            <para>
            Implementors can choose to focus on parsing a single frame in the buffer even if there are other frames available in the buffer.
            Base class will continue to move through buffer on behalf of derived class until all the buffer has been processed.  Just return
            the total amount of data was parsed and the remaining unparsed will be prepended to next received buffer.
            </para>
            <para>
            Derived implementations should return an integer value that represents the length of the data that was parsed, and zero if not
            enough data was able to be parsed. Note that exceptions are expensive when parsing fast moving streaming data and a good coding
            practice for implementations of this method will be to not throw an exception when there is not enough data to parse the data,
            instead check the <paramref name="length"/> property to insure there is enough data in buffer to represent the desired image. If
            there is not enough data to represent the image return zero and the base class will prepend buffer onto next incoming set of data.
            </para>
            <para>
            Because of the expense incurred when an exception is thrown, any exceptions encounted in the derived implementations of this method
            will cause the current data buffer to be discarded and a <see cref="E:TVA.Parsing.BinaryImageParserBase.ParsingException"/> event to be raised.  Doing this prevents
            exceptions from being thrown repeatedly for the same data. If your code implementation recognizes a malformed image, raise a custom
            event to indicate this instead of throwing as exception and keep moving through the buffer.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.OnDataDiscarded(System.Byte[])">
            <summary>
            Raises the <see cref="E:TVA.Parsing.BinaryImageParserBase.DataDiscarded"/> event.
            </summary>
            <param name="buffer">Source buffer that contains output that failed to parse.</param>
        </member>
        <member name="M:TVA.Parsing.BinaryImageParserBase.OnParsingException(System.Exception)">
            <summary>
            Raises the <see cref="E:TVA.Parsing.BinaryImageParserBase.ParsingException"/> event.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> that was encountered during parsing.</param>
        </member>
        <member name="E:TVA.Parsing.BinaryImageParserBase.DataDiscarded">
            <summary>
            Occurs when data image fails deserialized due to an exception.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the remaining portion of the binary image that failed to parse.
            </remarks>
        </member>
        <member name="E:TVA.Parsing.BinaryImageParserBase.ParsingException">
            <summary>
            Occurs when an <see cref="T:System.Exception"/> is encountered while attempting to parse data.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the <see cref="T:System.Exception"/> encountered while parsing data.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the data parser is currently enabled.
            </summary>
            <remarks>
            Setting <see cref="P:TVA.Parsing.BinaryImageParserBase.Enabled"/> to true will start the <see cref="T:TVA.Parsing.BinaryImageParserBase"/> if it is not started,
            setting to false will stop the <see cref="T:TVA.Parsing.BinaryImageParserBase"/> if it is started.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.ProtocolUsesSyncBytes">
            <summary>
            Gets flag that determines if this protocol parsing implementation uses synchronization bytes.
            </summary>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.ProtocolSyncBytes">
            <summary>
            Gets or sets synchronization bytes for this parsing implementation, if used.
            </summary>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.RunTime">
            <summary>
            Gets the total amount of time, in seconds, that the <see cref="T:TVA.Parsing.BinaryImageParserBase"/> has been active.
            </summary>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.TotalProcessedBuffers">
            <summary>
            Gets the total number of buffer images processed so far.
            </summary>
            <returns>Total number of buffer images processed so far.</returns>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <remarks>
            The <see cref="T:TVA.Parsing.BinaryImageParserBase"/> is implemented as a WriteOnly stream, so this defaults to false.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <remarks>
            The <see cref="T:TVA.Parsing.BinaryImageParserBase"/> is implemented as a WriteOnly stream, so this defaults to false.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <remarks>
            The <see cref="T:TVA.Parsing.BinaryImageParserBase"/> is implemented as a WriteOnly stream, so this defaults to true.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.Status">
            <summary>
            Gets current status of <see cref="T:TVA.Parsing.BinaryImageParserBase"/>.
            </summary>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.Name">
            <summary>
            Gets the name of <see cref="T:TVA.Parsing.BinaryImageParserBase"/>.
            </summary>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.Length">
            <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">WriteOnly stream has no length.</exception>
        </member>
        <member name="P:TVA.Parsing.BinaryImageParserBase.Position">
            <summary>
            The parser is designed as a write only stream, so this method is not implemented.
            </summary>
            <exception cref="T:System.NotImplementedException">WriteOnly stream has no position.</exception>
        </member>
        <member name="T:TVA.Parsing.IFrameImageParser`2">
            <summary>
            This interface represents a basic implementation of parsing functionality suitable for automating the parsing of
            a binary data stream represented as frames with common headers and returning the parsed data via an event.
            </summary>
            <typeparam name="TTypeIdentifier">Type of identifier used to distinguish output types.</typeparam>
            <typeparam name="TOutputType">Type of the interface or class used to represent outputs.</typeparam>
        </member>
        <member name="E:TVA.Parsing.IFrameImageParser`2.DataParsed">
            <summary>
            Occurs when a data image is deserialized successfully to one of the output types that the data
            image represents.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the object that was deserialized from the binary image.
            </remarks>
        </member>
        <member name="E:TVA.Parsing.IFrameImageParser`2.OutputTypeNotFound">
            <summary>
            Occurs when matching a output type for deserializing the data image cound not be found.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the ID of the output type that could not be found.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.FrameImageParserBase`2.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Parsing.FrameImageParserBase`2"/> class.
            </summary>
        </member>
        <member name="M:TVA.Parsing.FrameImageParserBase`2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Parsing.FrameImageParserBase`2"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Parsing.FrameImageParserBase`2.Start">
            <summary>
            Start the data parser.
            </summary>
            <remarks>
            This overload loads public types from assemblies in the application binaries directory that implement the parser's output type.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.FrameImageParserBase`2.Start(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Starts the data parser given the specified type implementations.
            </summary>
            <param name="implementations">Output type implementations to establish for the parser.</param>
        </member>
        <member name="M:TVA.Parsing.FrameImageParserBase`2.ParseFrame(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Output type specific frame parsing algorithm.
            </summary>
            <param name="buffer">Buffer containing data to parse.</param>
            <param name="offset">Offset index into buffer that represents where to start parsing.</param>
            <param name="length">Maximum length of valid data from offset.</param>
            <returns>The length of the data that was parsed.</returns>
        </member>
        <member name="M:TVA.Parsing.FrameImageParserBase`2.ParseCommonHeader(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses a common header instance that implements <see cref="T:TVA.Parsing.ICommonHeader`1"/> for the output type represented
            in the binary image.
            </summary>
            <param name="buffer">Buffer containing data to parse.</param>
            <param name="offset">Offset index into buffer that represents where to start parsing.</param>
            <param name="length">Maximum length of valid data from offset.</param>
            <returns>The <see cref="T:TVA.Parsing.ICommonHeader`1"/> which includes a type ID for the <see cref="T:System.Type"/> to be parsed.</returns>
            <remarks>
            <para>
            Derived classes need to provide a common header instance (i.e., class that implements <see cref="T:TVA.Parsing.ICommonHeader`1"/>)
            for the output types; this will primarily include an ID of the <see cref="T:System.Type"/> that the data image represents.  This parsing is
            only for common header information, actual parsing will be handled by output type via its <see cref="M:TVA.Parsing.ISupportBinaryImage.Initialize(System.Byte[],System.Int32,System.Int32)"/>
            method. This header image should also be used to add needed complex state information about the output type being parsed if needed.
            </para>
            <para>
            If there is not enough buffer available to parse common header (as determined by <paramref name="length"/>), return null.  Also, if
            the protocol allows frame length to be determined at the time common header is being parsed and there is not enough buffer to parse
            the entire frame, it will be optimal to prevent further parsing by returning null.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Parsing.FrameImageParserBase`2.OnDataParsed(`1)">
            <summary>
            Raises the <see cref="E:TVA.Parsing.FrameImageParserBase`2.DataParsed"/> event.
            </summary>
            <param name="obj">The object that was deserialized from binary image.</param>
        </member>
        <member name="M:TVA.Parsing.FrameImageParserBase`2.OnOutputTypeNotFound(`0)">
            <summary>
            Raises the <see cref="E:TVA.Parsing.FrameImageParserBase`2.OutputTypeNotFound"/> event.
            </summary>
            <param name="id">The ID of the output type that was not found.</param>
        </member>
        <member name="M:TVA.Parsing.FrameImageParserBase`2.OnDuplicateTypeHandlerEncountered(System.Type,`0)">
            <summary>
            Raises the <see cref="E:TVA.Parsing.FrameImageParserBase`2.DuplicateTypeHandlerEncountered"/> event.
            </summary>
            <param name="duplicateType">The <see cref="T:System.Type"/> that defines a type ID that has already been defined.</param>
            <param name="id">The ID of the output type that was defined more than once.</param>
        </member>
        <member name="E:TVA.Parsing.FrameImageParserBase`2.DataParsed">
            <summary>
            Occurs when a data image is deserialized successfully to one of the output types that the data
            image represents.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the object that was deserialized from the binary image.
            </remarks>
        </member>
        <member name="E:TVA.Parsing.FrameImageParserBase`2.OutputTypeNotFound">
            <summary>
            Occurs when matching an output type for deserializing the data image cound not be found.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the ID of the output type that could not be found.
            </remarks>
        </member>
        <member name="E:TVA.Parsing.FrameImageParserBase`2.DuplicateTypeHandlerEncountered">
            <summary>
            Occurs when more than one type has been defined that can deserialize the specified output type.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`2.Argument1"/> is the <see cref="T:System.Type"/> that defines a type ID that has already been defined.<br/>
            <see cref="F:TVA.EventArgs`2.Argument2"/> is the ID of the output type that was defined more than once.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.FrameImageParserBase`2.Status">
            <summary>
            Gets current status of <see cref="T:TVA.Parsing.FrameImageParserBase`2"/>.
            </summary>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Parsing.MultiSourceFrameImageParserBase`3"/> class.
            </summary>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Parsing.MultiSourceFrameImageParserBase`3"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Start">
            <summary>
            Start the streaming data parser.
            </summary>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Stop">
            <summary>
            Stops the streaming data parser.
            </summary>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Parse(`0,System.Byte[])">
            <summary>
            Queues a sequence of bytes, from the specified data source, onto the stream for parsing.
            </summary>
            <param name="source">ID of the data source.</param>
            <param name="buffer">An array of bytes to queue for parsing</param>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Parse(`0,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Queues a sequence of bytes, from the specified data source, onto the stream for parsing.
            </summary>
            <param name="source">ID of the data source.</param>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the queue.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Parse(`0,TVA.Parsing.ISupportBinaryImage)">
            <summary>
            Queues the object implementing the <see cref="T:TVA.Parsing.ISupportBinaryImage"/> interface, from the specified data source, onto the stream for parsing.
            </summary>
            <param name="source">ID of the data source.</param>
            <param name="image">Object to be parsed that implements the <see cref="T:TVA.Parsing.ISupportBinaryImage"/> interface.</param>
            <remarks>
            This method takes the binary image from <see cref="T:TVA.Parsing.ISupportBinaryImage"/> and writes the buffer to the <see cref="T:TVA.Parsing.BinaryImageParserBase"/> stream for parsing.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.PurgeBuffer(`0)">
            <summary>
            Clears the internal buffer of unparsed data received from the specified <paramref name="source"/>.
            </summary>
            <param name="source">ID of the data source.</param>
            <remarks>
            This method can be used to ensure that partial data received from the <paramref name="source"/> is not kept in memory indefinitely.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Parse(TVA.Parsing.ISupportBinaryImage)">
            <summary>
            Not implemented. Consumers should call the <see cref="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Parse(`0,TVA.Parsing.ISupportBinaryImage)"/> method instead to make sure data source ID gets tracked with data buffer.
            </summary>
            <exception cref="T:System.NotImplementedException">This method should not be called directly.</exception>
            <param name="image">A <see cref="T:TVA.Parsing.ISupportBinaryImage"/>.</param>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not implemented. Consumers should call the <see cref="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Parse(`0,System.Byte[],System.Int32,System.Int32)"/> method instead to make sure data source ID gets tracked with data buffer.
            </summary>
            <exception cref="T:System.NotImplementedException">This method should not be called directly.</exception>
            <param name="buffer">A <see cref="T:System.Byte"/> array.</param>
            <param name="count">An <see cref="T:System.Int32"/> for the offset.</param>
            <param name="offset">An <see cref="T:System.Int32"/> for the count.</param>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be parsed immediately.
            </summary>
            <remarks>
            <para>
            If the user has called <see cref="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Start"/> method, this method will process all remaining buffers on the calling thread until all
            queued buffers have been parsed - the <see cref="T:TVA.Parsing.MultiSourceFrameImageParserBase`3"/>
            will then be automatically stopped. This method is typically called on shutdown to make sure any remaining queued buffers get
            parsed before the class instance is destructed.
            </para>
            <para>
            It is possible for items to be queued while the flush is executing. The flush will continue to parse buffers as quickly
            as possible until the internal buffer queue is empty. Unless the user stops queueing data to be parsed (i.e. calling the
            <see cref="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.Parse(`0,System.Byte[])"/> method), the flush call may never return (not a happy situtation on shutdown).
            </para>
            <para>
            The <see cref="T:TVA.Parsing.MultiSourceFrameImageParserBase`3"/> does not clear queue prior to destruction.
            If the user fails to call this method before the class is destructed, there may be data that remains unparsed in the internal buffer.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.CreateBufferQueue">
            <summary>
            Creates the internal buffer queue.
            </summary>
            <remarks>
            <para>
            This method is virtual to allow derived classes to customize the style of processing queue used when consumers
            choose to implement an internal buffer queue.  Default type is a real-time queue with the default settings.
            When overriding, use the <see cref="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.ParseQueuedBuffers(TVA.IdentifiableItem{`0,System.Byte[]}[])"/> method for the <see cref="T:TVA.Collections.ProcessQueue`1"/>) item
            processing delegate.
            </para>
            <para>
            Note that current design only supports synchronous parsing - consumer overriding this method to return
            an asynchronous (i.e., multi-threaded) process queue will need to redesign the processing delegate.
            </para>
            </remarks>
            <returns>New internal buffer processing queue (i.e., a new <see cref="T:TVA.Collections.ProcessQueue`1"/>).</returns>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.ParseQueuedBuffers(TVA.IdentifiableItem{`0,System.Byte[]}[])">
            <summary>
            This method is used by the internal <see cref="T:TVA.Collections.ProcessQueue`1"/> to process all queued data buffers.
            </summary>
            <param name="buffers">Source identifiable buffers to process.</param>
            <remarks>
            This is the item processing delegate to use when overriding the <see cref="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.CreateBufferQueue"/> method.
            </remarks>
        </member>
        <member name="M:TVA.Parsing.MultiSourceFrameImageParserBase`3.OnDataParsed(`0,System.Collections.Generic.List{`2})">
            <summary>
            Raises the <see cref="E:TVA.Parsing.MultiSourceFrameImageParserBase`3.DataParsed"/> event.
            </summary>
            <param name="sourceID">Data source ID.</param>
            <param name="parsedData">List of parsed events.</param>
        </member>
        <member name="E:TVA.Parsing.MultiSourceFrameImageParserBase`3.DataParsed">
            <summary>
            Occurs when a data image is deserialized successfully to one or more objects of the <see cref="T:System.Type"/> 
            that the data image was for.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`2.Argument1"/> is the ID of the source for the data image.<br/>
            <see cref="F:TVA.EventArgs`2.Argument2"/> is a list of objects deserialized from the data image.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.MultiSourceFrameImageParserBase`3.QueuedBuffers">
            <summary>
            Gets the total number of buffers that are currently queued for processing, if any.
            </summary>
        </member>
        <member name="P:TVA.Parsing.MultiSourceFrameImageParserBase`3.CurrentStatistics">
            <summary>
            Gets the current run-time statistics of the <see cref="T:TVA.Parsing.MultiSourceFrameImageParserBase`3"/>.
            </summary>
        </member>
        <member name="P:TVA.Parsing.MultiSourceFrameImageParserBase`3.Status">
            <summary>
            Gets current status of <see cref="T:TVA.Parsing.MultiSourceFrameImageParserBase`3"/>.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpAsyncResult">
            <summary>
            Asynchronous transfer result.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpAsyncResult.Complete">
            <summary>
            FTP transfer result completed index.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpAsyncResult.Fail">
            <summary>
            FTP transfer result failed index.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.FtpAsyncResult.Abort">
            <summary>
            FTP transfer result aborted index.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpAsyncResult.IsSuccess">
            <summary>
            Returns true if asynchronous transfer completed successfully.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpAsyncResult.IsFailed">
            <summary>
            Returns true if asynchronous transfer failed.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpAsyncResult.IsAborted">
            <summary>
            Returns true if asynchronous transfer was aborted.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpAsyncResult.ResponseCode">
            <summary>
            Gets response code from asynchronous transfer.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpAsyncResult.Message">
            <summary>
            Gets any message associated with asynchronous transfer.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.Phrase">
            <summary>
            Defines a repeatable series of notes that can be added to a song over and over,
            for example, the phrase of music defining the chorus.
            </summary>
        </member>
        <member name="M:TVA.Media.Music.Phrase.#ctor">
            <summary>
            Constructs a new <see cref="T:TVA.Media.Music.Phrase"/>.
            </summary>
        </member>
        <member name="M:TVA.Media.Music.Phrase.AddPhrase(TVA.Media.Music.Phrase)">
            <summary>
            Add another predefined phrase of notes to this phrase.
            </summary>
            <param name="phrase">Phrase to add.</param>
        </member>
        <member name="M:TVA.Media.Music.Phrase.AddNotes(TVA.Media.Music.Note[])">
            <summary>
            Add a series of notes to the phrase.
            </summary>
            <param name="notes">Notes to add.</param>
        </member>
        <member name="P:TVA.Media.Music.Phrase.Notes">
            <summary>
            Series of notes that define the phrase.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.Dynamic">
            <summary>
            Defines the relative intensity (i.e., volume) of a musical line.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Dynamic.Undefined">
            <summary>No dynamic is defined.</summary>
        </member>
        <member name="F:TVA.Media.Music.Dynamic.Pianissimo">
            <summary>pp - very soft.</summary>
        </member>
        <member name="F:TVA.Media.Music.Dynamic.Piano">
            <summary>p - soft.</summary>
        </member>
        <member name="F:TVA.Media.Music.Dynamic.MezzoPiano">
            <summary>mp - half soft as <see cref="F:TVA.Media.Music.Dynamic.Piano"/>.</summary>
        </member>
        <member name="F:TVA.Media.Music.Dynamic.MezzoForte">
            <summary>mf - half loud as <see cref="F:TVA.Media.Music.Dynamic.Forte"/>.</summary>
            <remarks>This is the default dynamic level.</remarks>
        </member>
        <member name="F:TVA.Media.Music.Dynamic.Forte">
            <summary>f - loud.</summary>
        </member>
        <member name="F:TVA.Media.Music.Dynamic.Fortissimo">
            <summary>ff - very loud.</summary>
        </member>
        <member name="T:TVA.IO.LogFileFullOperation">
            <summary>
            Specifies the operation to be performed on the <see cref="T:TVA.IO.LogFile"/> when it is full.
            </summary>
        </member>
        <member name="F:TVA.IO.LogFileFullOperation.Truncate">
            <summary>
            Truncates the existing entries in the <see cref="T:TVA.IO.LogFile"/> to make space for new entries.
            </summary>
        </member>
        <member name="F:TVA.IO.LogFileFullOperation.Rollover">
            <summary>
            Rolls over to a new <see cref="T:TVA.IO.LogFile"/>, and keeps the full <see cref="T:TVA.IO.LogFile"/> for reference.
            </summary>
        </member>
        <member name="T:TVA.IO.LogFile">
             <summary>
             Represents a file that can be used for logging messages in real-time.
             </summary>
             <example>
             This example shows how to use <see cref="T:TVA.IO.LogFile"/> for logging messages:
             <code>
             using System;
             using TVA.IO;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     LogFile log = new LogFile();
                     log.Initialize();                       // Initialize the log file.
                     log.Open();                             // Open the log file.
                     log.WriteTimestampedLine("Test entry"); // Write message to the log file.
                     log.Flush();                            // Flush message to the log file.
                     log.Close();                            // Close the log file.
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:TVA.IO.LogFile.MinFileSize">
            <summary>
            Specifies the minimum size for a <see cref="T:TVA.IO.LogFile"/>.
            </summary>
        </member>
        <member name="F:TVA.IO.LogFile.MaxFileSize">
            <summary>
            Specifies the maximum size for a <see cref="T:TVA.IO.LogFile"/>.
            </summary>
        </member>
        <member name="F:TVA.IO.LogFile.DefaultFileName">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.LogFile.FileName"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.LogFile.DefaultFileSize">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.LogFile.FileSize"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.LogFile.DefaultFileFullOperation">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.LogFile.FileFullOperation"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.LogFile.DefaultPersistSettings">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.LogFile.PersistSettings"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.LogFile.DefaultSettingsCategory">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.LogFile.SettingsCategory"/> property.
            </summary>
        </member>
        <member name="M:TVA.IO.LogFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.IO.LogFile"/> class.
            </summary>
        </member>
        <member name="M:TVA.IO.LogFile.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.IO.LogFile"/> class.
            </summary>
            <param name="container"><see cref="T:System.ComponentModel.IContainer"/> object that contains the <see cref="T:TVA.IO.LogFile"/>.</param>
        </member>
        <member name="M:TVA.IO.LogFile.Initialize">
            <summary>
            Initializes the <see cref="T:TVA.IO.LogFile"/> object.
            </summary>
            <remarks>
            <see cref="M:TVA.IO.LogFile.Initialize"/> is to be called by user-code directly only if the <see cref="T:TVA.IO.LogFile"/> 
            object is not consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.IO.LogFile.BeginInit">
            <summary>
            Performs necessary operations before the <see cref="T:TVA.IO.LogFile"/> object properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.IO.LogFile.BeginInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.IO.LogFile"/> object is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.IO.LogFile.EndInit">
            <summary>
            Performs necessary operations after the <see cref="T:TVA.IO.LogFile"/> object properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.IO.LogFile.EndInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.IO.LogFile"/> object is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.IO.LogFile.SaveSettings">
            <summary>
            Saves settings for the <see cref="T:TVA.IO.LogFile"/> object to the config file if the <see cref="P:TVA.IO.LogFile.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.IO.LogFile.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.IO.LogFile.LoadSettings">
            <summary>
            Loads saved settings for the <see cref="T:TVA.IO.LogFile"/> object from the config file if the <see cref="P:TVA.IO.LogFile.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.IO.LogFile.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.IO.LogFile.Open">
            <summary>
            Opens the <see cref="T:TVA.IO.LogFile"/> for use if it is closed.
            </summary>
        </member>
        <member name="M:TVA.IO.LogFile.Close">
            <summary>
            Closes the <see cref="T:TVA.IO.LogFile"/> if it is open.
            </summary>
            <remarks>
            Forces queued log entries to be flushed to the <see cref="T:TVA.IO.LogFile"/>.
            </remarks>
        </member>
        <member name="M:TVA.IO.LogFile.Close(System.Boolean)">
            <summary>
            Closes the <see cref="T:TVA.IO.LogFile"/> if it is open.
            </summary>
            <param name="flushQueuedEntries">true, if queued log entries are to be written to the <see cref="T:TVA.IO.LogFile"/>; otherwise, false.</param>
        </member>
        <member name="M:TVA.IO.LogFile.Flush">
            <summary>
            Forces queued log entries to be written to the <see cref="T:TVA.IO.LogFile"/>.
            </summary>
        </member>
        <member name="M:TVA.IO.LogFile.Write(System.String)">
            <summary>
            Queues the text for writing to the <see cref="T:TVA.IO.LogFile"/>.
            </summary>
            <param name="text">The text to be written to the <see cref="T:TVA.IO.LogFile"/>.</param>
        </member>
        <member name="M:TVA.IO.LogFile.WriteLine(System.String)">
            <summary>
            Queues the text for writing to the <see cref="T:TVA.IO.LogFile"/>.
            </summary>
            <param name="text">The text to be written to the log file.</param>
            <remarks>
            In addition to the specified text, a "newline" character will be appended to the text.
            </remarks>
        </member>
        <member name="M:TVA.IO.LogFile.WriteTimestampedLine(System.String)">
            <summary>
            Queues the text for writing to the log file.
            </summary>
            <param name="text">The text to be written to the log file.</param>
            <remarks>
            In addition to the specified text, a timestamp will be prepended, and a "newline" character will appended to the text.
            </remarks>
        </member>
        <member name="M:TVA.IO.LogFile.ReadText">
            <summary>
            Reads and returns the text from the <see cref="T:TVA.IO.LogFile"/>.
            </summary>
            <returns>The text read from the <see cref="T:TVA.IO.LogFile"/>.</returns>
        </member>
        <member name="M:TVA.IO.LogFile.ReadLines">
            <summary>
            Reads text from the <see cref="T:TVA.IO.LogFile"/> and returns a list of lines created by seperating the text by the "newline"
            characters if and where present.
            </summary>
            <returns>A list of lines from the text read from the <see cref="T:TVA.IO.LogFile"/>.</returns>
        </member>
        <member name="M:TVA.IO.LogFile.OnFileFull">
            <summary>
            Raises the <see cref="E:TVA.IO.LogFile.FileFull"/> event.
            </summary>
        </member>
        <member name="M:TVA.IO.LogFile.OnLogException(System.Exception)">
            <summary>
            Raises the <see cref="E:TVA.IO.LogFile.LogException"/> event.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> to send to <see cref="E:TVA.IO.LogFile.LogException"/> event.</param>
        </member>
        <member name="M:TVA.IO.LogFile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.IO.LogFile"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.IO.LogFile.ReOpen">
            <summary>
            Re-opens the file if currently open.
            </summary>
        </member>
        <member name="E:TVA.IO.LogFile.FileFull">
            <summary>
            Occurs when the <see cref="T:TVA.IO.LogFile"/> is full.
            </summary>
        </member>
        <member name="E:TVA.IO.LogFile.LogException">
            <summary>
            Occurs when an <see cref="T:System.Exception"/> is encountered while writing entries to the <see cref="T:TVA.IO.LogFile"/>.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the <see cref="T:System.Exception"/> encountered during writing of log entries.
            </remarks>
        </member>
        <member name="P:TVA.IO.LogFile.FileName">
            <summary>
            Gets or sets the name of the <see cref="T:TVA.IO.LogFile"/>, including the file extension.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
        </member>
        <member name="P:TVA.IO.LogFile.FileSize">
             <summary>
             Gets or sets the size of the <see cref="T:TVA.IO.LogFile"/> in MB.
             </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value being assigned outside the <see cref="F:TVA.IO.LogFile.MinFileSize"/> and <see cref="F:TVA.IO.LogFile.MaxFileSize"/> range.</exception>
        </member>
        <member name="P:TVA.IO.LogFile.FileFullOperation">
            <summary>
            Gets or sets the type of operation to be performed when the <see cref="T:TVA.IO.LogFile"/> is full.
            </summary>
        </member>
        <member name="P:TVA.IO.LogFile.PersistSettings">
            <summary>
            Gets or sets a boolean value that indicates whether the settings of <see cref="T:TVA.IO.LogFile"/> object are 
            to be saved to the config file.
            </summary>
        </member>
        <member name="P:TVA.IO.LogFile.SettingsCategory">
            <summary>
            Gets or sets the category under which the settings of <see cref="T:TVA.IO.LogFile"/> object are to be saved
            to the config file if the <see cref="P:TVA.IO.LogFile.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
        </member>
        <member name="P:TVA.IO.LogFile.TextEncoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding"/> to be used to encode the messages being logged.
            </summary>
        </member>
        <member name="P:TVA.IO.LogFile.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.IO.LogFile"/> object is currently enabled.
            </summary>
        </member>
        <member name="P:TVA.IO.LogFile.IsOpen">
            <summary>
            Gets a boolean value that indicates whether the <see cref="T:TVA.IO.LogFile"/> is open.
            </summary>
        </member>
        <member name="P:TVA.IO.LogFile.Name">
            <summary>
            Gets the unique identifier of the <see cref="T:TVA.IO.LogFile"/> object.
            </summary>
        </member>
        <member name="P:TVA.IO.LogFile.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:TVA.IO.LogFile"/> object.
            </summary>
        </member>
        <member name="T:TVA.InitializationException">
            <summary>
            The exception that is thrown when an object fails to initialize properly.
            </summary>
        </member>
        <member name="M:TVA.InitializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.InitializationException"/> class.
            </summary>
        </member>
        <member name="M:TVA.InitializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.InitializationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:TVA.InitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.InitializationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:TVA.Console.NamespaceDoc">
            <summary>
            Contains classes used for parsing command line parameters and managing console applications.
            </summary>
        </member>
        <member name="T:TVA.Configuration.SettingNameAttribute">
            <summary>
            Represents an attribute that defines the setting name of a property or field in a class derived from
            <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> or <see cref="T:TVA.Configuration.AppSettingsBase"/> when serializing the value
            to the configuration file.
            </summary>
            <remarks>
            This attribute allows consumers to override the name of the setting going into the configuration file,
            if the attribute doesn't exist the property or field name is used.
            </remarks>
        </member>
        <member name="M:TVA.Configuration.SettingNameAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:TVA.Configuration.SettingNameAttribute"/> with the specified <paramref name="name"/> value.
            </summary>
            <param name="name">Assigns name used to serialize setting into config file.</param>
        </member>
        <member name="P:TVA.Configuration.SettingNameAttribute.Name">
            <summary>
            Gets the name used to serialize field or property into config file.
            </summary>
        </member>
        <member name="T:TVA.ComplexNumber">
            <summary>
            Represents a complex number.
            </summary>
        </member>
        <member name="M:TVA.ComplexNumber.#ctor(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:TVA.ComplexNumber"/> from the given rectangular values. 
            </summary>
            <param name="real">The real component of the <see cref="T:TVA.ComplexNumber"/>.</param>
            <param name="imaginary">The imaginary component of the <see cref="T:TVA.ComplexNumber"/>.</param>
        </member>
        <member name="M:TVA.ComplexNumber.#ctor(TVA.Units.Angle,System.Double)">
            <summary>
            Creates a <see cref="T:TVA.ComplexNumber"/> from the given polar values.
            </summary>
            <param name="angle">The angle component, in radians, of the <see cref="T:TVA.ComplexNumber"/>.</param>
            <param name="magnitude">The magnitude (or absolute value) component of the <see cref="T:TVA.ComplexNumber"/>.</param>
        </member>
        <member name="M:TVA.ComplexNumber.#ctor(TVA.ComplexNumber)">
            <summary>
            Creates a <see cref="T:TVA.ComplexNumber"/> from the given <see cref="T:TVA.ComplexNumber"/>.
            </summary>
            <param name="z"><see cref="T:TVA.ComplexNumber"/> to be copied.</param>
        </member>
        <member name="M:TVA.ComplexNumber.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of ComplexNumber and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.ComplexNumber.Equals(TVA.ComplexNumber)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Int24 value.
            </summary>
            <param name="obj">A <see cref="T:TVA.ComplexNumber"/> to compare to this instance.</param>
            <returns>
            True if <paramref name="obj"/> has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.ComplexNumber.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.ComplexNumber.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this <see cref="T:TVA.ComplexNumber"/> instance.
            </returns>
        </member>
        <member name="M:TVA.ComplexNumber.op_Implicit(System.Double)~TVA.ComplexNumber">
            <summary>
            Implicitly converts a <see cref="T:System.Double"/> to a <see cref="T:TVA.ComplexNumber"/>.
            </summary>
            <param name="value">Operand.</param>
            <returns>ComplexNumber representing the result of the operation.</returns>
        </member>
        <member name="M:TVA.ComplexNumber.op_Equality(TVA.ComplexNumber,TVA.ComplexNumber)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean representing the result of the addition operation.</returns>
        </member>
        <member name="M:TVA.ComplexNumber.op_Inequality(TVA.ComplexNumber,TVA.ComplexNumber)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean representing the result of the inequality operation.</returns>
        </member>
        <member name="M:TVA.ComplexNumber.op_UnaryNegation(TVA.ComplexNumber)">
            <summary>
            Returns the negated value.
            </summary>
            <param name="z">Left hand operand.</param>
            <returns>ComplexNumber representing the result of the unary negation operation.</returns>
        </member>
        <member name="M:TVA.ComplexNumber.op_Addition(TVA.ComplexNumber,TVA.ComplexNumber)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>ComplexNumber representing the result of the addition operation.</returns>
        </member>
        <member name="M:TVA.ComplexNumber.op_Subtraction(TVA.ComplexNumber,TVA.ComplexNumber)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>ComplexNumber representing the result of the subtraction operation.</returns>
        </member>
        <member name="M:TVA.ComplexNumber.op_Multiply(TVA.ComplexNumber,TVA.ComplexNumber)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>ComplexNumber representing the result of the multiplication operation.</returns>
        </member>
        <member name="M:TVA.ComplexNumber.op_Division(TVA.ComplexNumber,TVA.ComplexNumber)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>ComplexNumber representing the result of the division operation.</returns>
        </member>
        <member name="M:TVA.ComplexNumber.Pow(TVA.ComplexNumber,System.Double)">
            <summary>
            Returns specified <see cref="T:TVA.ComplexNumber"/> raised to the specified power.
            </summary>
            <param name="z">Complex number to be raised to power <paramref name="y"/>.</param>
            <param name="y">Power to raise <see cref="T:TVA.ComplexNumber"/> <paramref name="z"/>.</param>
             <returns>ComplexNumber representing the result of the operation.</returns>
        </member>
        <member name="P:TVA.ComplexNumber.Real">
            <summary>
            Gets or sets the real component of this <see cref="T:TVA.ComplexNumber"/>.
            </summary>
        </member>
        <member name="P:TVA.ComplexNumber.Imaginary">
            <summary>
            Gets or sets the imaginary component of this <see cref="T:TVA.ComplexNumber"/>.
            </summary>
        </member>
        <member name="P:TVA.ComplexNumber.Magnitude">
            <summary>
            Gets or sets the magnitude (a.k.a. the modulus or absolute value) of this <see cref="T:TVA.ComplexNumber"/>.
            </summary>
        </member>
        <member name="P:TVA.ComplexNumber.Angle">
            <summary>
            Gets or sets the <see cref="P:TVA.ComplexNumber.Angle"/> (a.k.a. the argument) in radians of this <see cref="T:TVA.ComplexNumber"/>.
            </summary>
        </member>
        <member name="P:TVA.ComplexNumber.Conjugate">
            <summary>
            Gets the complex conjugate of this <see cref="T:TVA.ComplexNumber"/>.
            </summary>
        </member>
        <member name="P:TVA.ComplexNumber.AllAssigned">
            <summary>
            Gets a boolean value indicating if each composite value of the <see cref="T:TVA.ComplexNumber"/> (i.e., real and imaginary) has been assigned a value.
            </summary>
            <returns>True, if all composite values have been assigned a value; otherwise, false.</returns>
        </member>
        <member name="P:TVA.ComplexNumber.NoneAssigned">
            <summary>
            Gets a boolean value indicating if each composite value of the <see cref="T:TVA.ComplexNumber"/> (i.e., real and imaginary) has not been assigned a value.
            </summary>
            <returns>True, if none of the composite values have been assigned a value; otherwise, false.</returns>
        </member>
        <member name="T:TVA.Collections.ProcessQueueStatistics">
            <summary>
            Represents the statistics of a <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.IsEnabled">
            <summary>
            Gets indicator that the <see cref="T:TVA.Collections.ProcessQueue`1"/> is currently enabled.
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.IsProcessing">
            <summary>
            Gets indicator that the <see cref="T:TVA.Collections.ProcessQueue`1"/> is actively processing items.
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.ProcessingInterval">
            <summary>
            Gets the interval, in milliseconds, on which new items begin processing.
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.ProcessTimeout">
            <summary>
            Gets the maximum time, in milliseconds, allowed for processing an item.
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.ThreadingMode">
            <summary>
            Gets the current <see cref="T:TVA.Collections.QueueThreadingMode"/> for the <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., synchronous or asynchronous).
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.ProcessingStyle">
            <summary>
            Gets the item <see cref="T:TVA.Collections.QueueProcessingStyle"/> for the <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., one at a time or many at once).
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.RunTime">
            <summary>
            Gets the total amount of time, in seconds, that the process <see cref="T:TVA.Collections.ProcessQueue`1"/> has been active.
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.ActiveThreads">
            <summary>
            Gets the current number of active threads.
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.QueueCount">
            <summary>
            Gets the number of elements queued for processing in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.ItemsBeingProcessed">
            <summary>
            Gets the total number of items currently being processed.
            </summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueueStatistics.TotalProcessedItems">
            <summary>
            Gets the total number of items processed so far.
            </summary>
        </member>
        <member name="T:TVA.BinaryValue">
            <summary>
            Represents a binary data sample stored as a byte array ordered in the
            endianness of the OS, but implicitly castable to most common native types.
            </summary>
        </member>
        <member name="M:TVA.BinaryValue.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new binary value, ordered in the endianness of the OS, from the given byte array.</summary>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <param name="startIndex">The offset in the buffer where the data starts.</param>
            <param name="length">The number of data bytes that make up the binary value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of the <paramref name="buffer"/> -or-
            <paramref name="length"/> is less than 0 -or-
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify a valid region in the <paramref name="buffer"/>
            </exception>
            <remarks>This constructor assumes a type code of Empty to represent "undefined".</remarks>
        </member>
        <member name="M:TVA.BinaryValue.#ctor(System.Byte[])">
            <summary>Creates a new binary value, ordered in the endianness of the OS, from the given byte array.</summary>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <remarks>This constructor assumes a type code of Empty to represent "undefined".</remarks>
        </member>
        <member name="M:TVA.BinaryValue.#ctor(System.TypeCode,System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new binary value, ordered in the endianness of the OS, from the given byte array.</summary>
            <param name="typeCode">The type code of the native value that the binary value represents.</param>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <param name="startIndex">The offset in the buffer where the data starts.</param>
            <param name="length">The number of data bytes that make up the binary value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of the <paramref name="buffer"/> -or-
            <paramref name="length"/> is less than 0 -or-
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify a valid region in the <paramref name="buffer"/>
            </exception>
        </member>
        <member name="M:TVA.BinaryValue.#ctor(System.TypeCode,System.Byte[])">
            <summary>Creates a new binary value, ordered in the endianness of the OS, from the given byte array.</summary>
            <param name="typeCode">The type code of the native value that the binary value represents.</param>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
        </member>
        <member name="M:TVA.BinaryValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.ConvertToType(System.TypeCode)">
            <summary>
            Returns a <see cref="T:TVA.BinaryValue"/> representation of source value converted to specified <see cref="T:System.TypeCode"/>.
            </summary>
            <param name="typeCode">Desired <see cref="T:System.TypeCode"/> for destination value.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of source value converted to specified <see cref="T:System.TypeCode"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Unable to convert binary value to specified type.</exception>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~System.Byte">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:System.Byte"/>.</param>
            <returns>A <see cref="T:System.Byte"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(System.Byte)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Byte"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~System.Int16">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:System.Int16"/>.</param>
            <returns>A <see cref="T:System.Int16"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(System.Int16)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Int16"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Int16"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~System.UInt16">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:System.UInt16"/>.</param>
            <returns>A <see cref="T:System.UInt16"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(System.UInt16)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.UInt16"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt16"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~TVA.Int24">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:TVA.Int24"/>.</param>
            <returns>A <see cref="T:TVA.Int24"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.Int24)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:TVA.Int24"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~TVA.UInt24">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:TVA.UInt24"/>.</param>
            <returns>A <see cref="T:TVA.UInt24"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.UInt24)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:TVA.UInt24"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~System.Int32">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:System.Int32"/>.</param>
            <returns>A <see cref="T:System.Int32"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(System.Int32)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Int32"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~System.UInt32">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:System.UInt32"/>.</param>
            <returns>A <see cref="T:System.UInt32"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(System.UInt32)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.UInt32"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt32"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~System.Int64">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:System.Int64"/>.</param>
            <returns>A <see cref="T:System.Int64"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(System.Int64)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Int64"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Int64"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~System.UInt64">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:System.UInt64"/>.</param>
            <returns>A <see cref="T:System.UInt64"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(System.UInt64)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.UInt64"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt64"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~System.Single">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:System.Single"/>.</param>
            <returns>A <see cref="T:System.Single"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(System.Single)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Single"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Single"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(TVA.BinaryValue)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.BinaryValue"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BinaryValue"/> to convert to <see cref="T:System.Double"/>.</param>
            <returns>A <see cref="T:System.Double"/> representation of <see cref="T:TVA.BinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BinaryValue.op_Implicit(System.Double)~TVA.BinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Double"/> to <see cref="T:TVA.BinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Double"/> to convert to <see cref="T:TVA.BinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BinaryValue"/> representation of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="T:TVA.Xml.NamespaceDoc">
            <summary>
            Contains extension functions used to simplify and standardize usage of standard Xml objects.
            </summary>
        </member>
        <member name="T:TVA.Word">
            <summary>
            Represents functions and extensions related to 16-bit words, 32-bit double-words and 64-bit quad-words.
            </summary>
        </member>
        <member name="M:TVA.Word.AlignWord(System.Int16)">
            <summary>
            Aligns word value on a 16-bit boundry.
            </summary>
            <param name="word">Word value to align.</param>
            <returns>Word value aligned to next 16-bit boundry.</returns>
        </member>
        <member name="M:TVA.Word.AlignWord(System.UInt16)">
            <summary>
            Aligns word value on a 16-bit boundry.
            </summary>
            <param name="word">Word value to align.</param>
            <returns>Word value aligned to next 16-bit boundry.</returns>
        </member>
        <member name="M:TVA.Word.AlignDoubleWord(System.Int32)">
            <summary>
            Aligns double-word value on a 32-bit boundry.
            </summary>
            <param name="doubleWord">Double-word value to align.</param>
            <returns>Double-word value aligned to next 32-bit boundry.</returns>
        </member>
        <member name="M:TVA.Word.AlignDoubleWord(System.UInt32)">
            <summary>
            Aligns double-word value on a 32-bit boundry.
            </summary>
            <param name="doubleWord">Double-word value to align.</param>
            <returns>Double-word value aligned to next 32-bit boundry.</returns>
        </member>
        <member name="M:TVA.Word.AlignQuadWord(System.Int64)">
            <summary>
            Aligns quad-word value on a 64-bit boundry.
            </summary>
            <param name="quadWord">Quad-word value to align.</param>
            <returns>Quad-word value aligned to next 64-bit boundry.</returns>
        </member>
        <member name="M:TVA.Word.AlignQuadWord(System.UInt64)">
            <summary>
            Aligns quad-word value on a 64-bit boundry.
            </summary>
            <param name="quadWord">Quad-word value to align.</param>
            <returns>Quad-word value aligned to next 64-bit boundry.</returns>
        </member>
        <member name="M:TVA.Word.HighNibble(System.Byte)">
            <summary>
            Returns the high-nibble (high 4-bits) from a byte.
            </summary>
            <param name="value">Byte value.</param>
            <returns>The high-nibble of the specified byte value.</returns>
        </member>
        <member name="M:TVA.Word.HighByte(System.UInt16)">
            <summary>
            Returns the high-byte from an unsigned word (UInt16).
            </summary>
            <param name="word">2-byte, 16-bit unsigned integer value.</param>
            <returns>The high-order byte of the specified 16-bit unsigned integer value.</returns>
            <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the byte value whose in-memory representation
            is the same as the right-most, most-significant-byte of the integer value.
            </remarks>
        </member>
        <member name="M:TVA.Word.HighWord(System.UInt32)">
            <summary>
            Returns the unsigned high-word (UInt16) from an unsigned double-word (UInt32).
            </summary>
            <param name="doubleWord">4-byte, 32-bit unsigned integer value.</param>
            <returns>The unsigned high-order word of the specified 32-bit unsigned integer value.</returns>
            <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the word value
            whose in-memory representation is the same as the right-most, most-significant-word
            of the integer value.
            </remarks>
        </member>
        <member name="M:TVA.Word.HighDword(System.UInt64)">
            <summary>
            Returns the unsigned high-double-word (UInt32) from an unsigned quad-word (UInt64).
            </summary>
            <param name="quadWord">8-byte, 64-bit unsigned integer value.</param>
            <returns>The high-order double-word of the specified 64-bit unsigned integer value.</returns>
            <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the word value
            whose in-memory representation is the same as the right-most, most-significant-word
            of the integer value.
            </remarks>
        </member>
        <member name="M:TVA.Word.LowNibble(System.Byte)">
            <summary>
            Returns the low-nibble (low 4-bits) from a byte.
            </summary>
            <param name="value">Byte value.</param>
            <returns>The low-nibble of the specified byte value.</returns>
        </member>
        <member name="M:TVA.Word.LowByte(System.UInt16)">
            <summary>
            Returns the low-byte from an unsigned word (UInt16).
            </summary>
            <param name="word">2-byte, 16-bit unsigned integer value.</param>
            <returns>The low-order byte of the specified 16-bit unsigned integer value.</returns>
            <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the byte value
            whose in-memory representation is the same as the left-most, least-significant-byte
            of the integer value.
            </remarks>
        </member>
        <member name="M:TVA.Word.LowWord(System.UInt32)">
            <summary>
            Returns the unsigned low-word (UInt16) from an unsigned double-word (UInt32).
            </summary>
            <param name="doubleWord">4-byte, 32-bit unsigned integer value.</param>
            <returns>The unsigned low-order word of the specified 32-bit unsigned integer value.</returns>
            <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the word value
            whose in-memory representation is the same as the left-most, least-significant-word
            of the integer value.
            </remarks>
        </member>
        <member name="M:TVA.Word.LowDword(System.UInt64)">
            <summary>
            Returns the unsigned low-double-word (UInt32) from an unsigned quad-word (UInt64).
            </summary>
            <param name="quadWord">8-byte, 64-bit unsigned integer value.</param>
            <returns>The low-order double-word of the specified 64-bit unsigned integer value.</returns>
            <remarks>
            On little-endian architectures (e.g., Intel platforms), this will be the word value
            whose in-memory representation is the same as the left-most, least-significant-word
            of the integer value.
            </remarks>
        </member>
        <member name="M:TVA.Word.MakeWord(System.Byte,System.Byte)">
            <summary>
            Makes an unsigned word (UInt16) from two bytes.
            </summary>
            <param name="high">High byte.</param>
            <param name="low">Low byte.</param>
            <returns>An unsigned 16-bit word made from the two specified bytes.</returns>
        </member>
        <member name="M:TVA.Word.MakeDword(System.UInt16,System.UInt16)">
            <summary>
            Makes an unsigned double-word (UInt32) from two unsigned words (UInt16).
            </summary>
            <param name="high">High word.</param>
            <param name="low">Low word.</param>
            <returns>An unsigned 32-bit double-word made from the two specified unsigned 16-bit words.</returns>
        </member>
        <member name="M:TVA.Word.MakeQword(System.UInt32,System.UInt32)">
            <summary>
            Makes an unsigned quad-word (UInt64) from two unsigned double-words (UInt32).
            </summary>
            <param name="high">High double-word.</param>
            <param name="low">Low double-word.</param>
            <returns>An unsigned 64-bit quad-word made from the two specified unsigned 32-bit double-words.</returns>
        </member>
        <member name="T:TVA.Validation.NumericRangeValidator">
            <summary>
            Represents a validator that can be used to ensure that a numeric value falls within a specific range.
            </summary>
        </member>
        <member name="T:TVA.Validation.IValidator">
            <summary>
            Defines a value validator.
            </summary>
        </member>
        <member name="M:TVA.Validation.IValidator.Validate(System.Object,System.String@)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> is valid.
            </summary>
            <param name="value">The value to be validated.</param>
            <param name="validationError">Error message returned if the <paramref name="value"/> is invalid.</param>
            <returns><strong>true</strong> if the <paramref name="value"/> is valid; otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:TVA.Validation.NumericRangeValidator.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Validation.NumericRangeValidator"/> class.
            </summary>
            <param name="minimum">The minimum allowed numeric value.</param>
            <param name="maximum">The maximum allowed numeric value.</param>
        </member>
        <member name="M:TVA.Validation.NumericRangeValidator.Validate(System.Object,System.String@)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> is a valid number that falls within the specified range.
            </summary>
            <param name="value">The value to be validated.</param>
            <param name="validationError">Error message returned if the <paramref name="value"/> is invalid.</param>
            <returns><strong>true</strong> if the <paramref name="value"/> is valid; otherwise <strong>false</strong>.</returns>
        </member>
        <member name="T:TVA.Validation.EmailAddressValidator">
            <summary>
            Represents a validator that can be used to ensure the validity of an email address.
            </summary>
        </member>
        <member name="M:TVA.Validation.EmailAddressValidator.Validate(System.Object,System.String@)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> is a valid email address.
            </summary>
            <param name="value">The value to be validated.</param>
            <param name="validationError">Error message returned if the <paramref name="value"/> is invalid.</param>
            <returns><strong>true</strong> if the <paramref name="value"/> is valid; otherwise <strong>false</strong>.</returns>
        </member>
        <member name="T:TVA.Collections.SettingsCollection">
            <summary>
            A collection of settings that can be represented as a string of key-value pairs for easy persistance and also provide built-in validation support for the settings.
            </summary>
            <example>
            This example shows how to use <see cref="T:TVA.Collections.SettingsCollection"/> for key-value pair type settings and apply validation to them:
            <code>
            using System;
            using System.Collections.Generic;
            using TVA.Collections;
            using TVA.Validation;
            
            class Program
            {
                static void Main(string[] args)
                {
                    // Initialize settings.
                    SettingsCollection settings = "Server=localhost;Port=5000";
                    // Add validation rules.
                    settings.Validation.AddValidation("Server", new NonNullStringValidator());
                    settings.Validation.AddValidation("Port", new NonNullStringValidator());
                    settings.Validation.AddValidation("Port", new NumericRangeValidator(1000, 2000));
            
                    // Validate settings.
                    string errors;
                    if (!settings.Validation.Validate(out errors))
                    {
                        // Show validation errors.
                        Console.WriteLine(string.Format("Settings: {0}\r\n", settings));
                        Console.WriteLine(errors);
                    }
                    else
                    {
                        // Show stored settings.
                        foreach (KeyValuePair&lt;string, string&gt; setting in settings)
                        {
                            Console.WriteLine(string.Format("Key={0}; Value={1}", setting.Key, setting.Value));
                        }
                    }
                    
                    Console.ReadLine();
                }
            }
            </code>
            </example>
            <seealso cref="T:TVA.Validation.ValidationService"/>
        </member>
        <member name="M:TVA.Collections.SettingsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Collections.SettingsCollection"/> class.
            </summary>
        </member>
        <member name="M:TVA.Collections.SettingsCollection.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Collections.SettingsCollection"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.StringComparer"/> to use when comparing keys or null to use the default <see cref="T:System.StringComparer"/>.</param>
        </member>
        <member name="M:TVA.Collections.SettingsCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Collections.SettingsCollection"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are to be copied to this <see cref="T:TVA.Collections.SettingsCollection"/>.</param>
        </member>
        <member name="M:TVA.Collections.SettingsCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Collections.SettingsCollection"/> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are to be copied to this <see cref="T:TVA.Collections.SettingsCollection"/>.</param>
            <param name="comparer">The <see cref="T:System.StringComparer"/> to use when comparing keys or null to use the default <see cref="T:System.StringComparer"/>.</param>
        </member>
        <member name="M:TVA.Collections.SettingsCollection.TryAdd(System.String,System.String)">
            <summary>
            Adds an element with the specified <paramref name="key"/> and <paramref name="value"/> if an element is not present with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <returns><strong>true</strong> if an element is added; otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:TVA.Collections.SettingsCollection.ToString">
            <summary>
            Gets the <see cref="T:System.String"/> representation of <see cref="T:TVA.Collections.SettingsCollection"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents <see cref="T:TVA.Collections.SettingsCollection"/>.</returns>
        </member>
        <member name="M:TVA.Collections.SettingsCollection.op_Implicit(TVA.Collections.SettingsCollection)~System.String">
            <summary>
            Implicitly converts <see cref="T:TVA.Collections.SettingsCollection"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:TVA.Collections.SettingsCollection"/> to convert.</param>
            <returns>A <see cref="T:System.String"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Collections.SettingsCollection.op_Implicit(System.String)~TVA.Collections.SettingsCollection">
            <summary>
            Implicitly converts <see cref="T:System.String"/> to <see cref="T:TVA.Collections.SettingsCollection"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to convert.</param>
            <returns>A <see cref="T:TVA.Collections.SettingsCollection"/> object representing the result.</returns>
        </member>
        <member name="P:TVA.Collections.SettingsCollection.Validation">
            <summary>
            Gets the <see cref="T:TVA.Validation.ValidationService"/> object used to perform validation on the <see cref="P:System.Collections.Generic.Dictionary`2.Values"/>.
            </summary>
        </member>
        <member name="T:TVA.NamespaceDoc">
            <summary>
            Contains fundamental classes that define commonly-used value and reference data types, interfaces, and basic type extension functions.
            </summary>
        </member>
        <member name="T:TVA.Media.SampleRate">
            <summary>
            Typical samples rates supported by wave files.
            </summary>
            <remarks>
            <para>
            Quantization of the analog waveform, or signal, is a real-time process operating over a continuous
            time-period which produces a “stream” of digital values. In order for the process to work you must
            define the rate at which new digital values are measured, or sampled, from the analog signal. The
            rate at which new values are measured is called the “sampling rate” (a.k.a., the sampling frequency).
            </para>
            <para>
            Audio based Compact Discs use a sampling rate of 44,100 Hz; this means the the Nyquist frequency is
            22,050 Hz (i.e., the upper bound on the highest frequency that the digital data can clearly represent
            without aliasing). This sample rate selection was no accident as the range of hearing for a healthy
            young person is approximately 20 to 20,000 Hz.
            </para>
            <para>
            In plain English, higher sampling rates will equate to higher quality sound reproduction but anything
            above 44,100 Hz will not be perceived as better quality by normal human beings.
            </para>
            </remarks>
        </member>
        <member name="F:TVA.Media.SampleRate.Hz8000">
            <summary>8000 samples per second</summary>
        </member>
        <member name="F:TVA.Media.SampleRate.Hz11025">
            <summary>11025 samples per second</summary>
        </member>
        <member name="F:TVA.Media.SampleRate.Hz12000">
            <summary>12000 samples per second</summary>
        </member>
        <member name="F:TVA.Media.SampleRate.Hz16000">
            <summary>16000 samples per second</summary>
        </member>
        <member name="F:TVA.Media.SampleRate.Hz22050">
            <summary>22050 samples per second</summary>
        </member>
        <member name="F:TVA.Media.SampleRate.Hz24000">
            <summary>24000 samples per second</summary>
        </member>
        <member name="F:TVA.Media.SampleRate.Hz32000">
            <summary>32000 samples per second</summary>
        </member>
        <member name="F:TVA.Media.SampleRate.Hz44100">
            <summary>44100 samples per second</summary>
            <remarks>This is the standard setting for CD audio quality</remarks>
        </member>
        <member name="F:TVA.Media.SampleRate.Hz48000">
            <summary>48000 samples per second</summary>
        </member>
        <member name="T:TVA.Media.BitsPerSample">
            <summary>
            Typical bit sizes supported by wave files.
            </summary>
            <remarks>
            Strictly speaking, “bits-per-sample” describes the total number of bits used
            to encode the amplitude (or volume) of a sampled signal.  The following table
            describes a few typical bit ranges and their possible resolution:
            <list type="table">
            <listheader>
                <term>Bit range</term>
                <description>Resolution</description>
            </listheader>
            <item>
                <term>8-bits (1 Byte)</term>
                <description>0 to 255</description>
            </item>
            <item>
                <term>16-bits (2 Bytes)</term>
                <description>-32,768 to 32,767</description>
            </item>
            <item>
                <term>24-bits (3 Bytes)</term>
                <description>-8,388,608 to 8,388,607</description>
            </item>
            <item>
                <term>32-bits (4 Bytes)</term>
                <description>-2,147,483,648 to 2,147,483,647</description>
            </item>
            </list>
            The net result is that more bits you use, the more resolution you can achieve in
            amplitude; hence “more bits = better sound quality” however you have to compromise
            for technical constraints because “more bits = more required space”.
            </remarks>
        </member>
        <member name="F:TVA.Media.BitsPerSample.Bits8">
            <summary>8-bits per sample</summary>
        </member>
        <member name="F:TVA.Media.BitsPerSample.Bits16">
            <summary>16-bits per sample</summary>
            <remarks>This is the standard setting for CD audio quality</remarks>
        </member>
        <member name="F:TVA.Media.BitsPerSample.Bits24">
            <summary>24-bits per sample</summary>
        </member>
        <member name="F:TVA.Media.BitsPerSample.Bits32">
            <summary>32-bits per sample</summary>
        </member>
        <member name="T:TVA.Media.DataChannels">
            <summary>
            Typical number of data channels used by wave files.
            </summary>
            <remarks>
            These are some common number of data channels, but wave files can support any number of data channels.
            </remarks>
        </member>
        <member name="F:TVA.Media.DataChannels.Mono">
            <summary>Defines a single (monaural) data sample channel</summary>
        </member>
        <member name="F:TVA.Media.DataChannels.Stereo">
            <summary>Defines two (stereo) data sample channels</summary>
            <remarks>This is the standard setting for CD audio quality</remarks>
        </member>
        <member name="F:TVA.Media.DataChannels.DolbySurround">
            <summary>Defines three data sample channels</summary>
            <remarks>3.0 Channel Surround (analog matrixed: Dolby Surround)</remarks>
        </member>
        <member name="F:TVA.Media.DataChannels.DolbyProLogic">
            <summary>Defines four data sample channels</summary>
            <remarks>4.0 Channel Surround (analog matrixed: Dolby Pro Logic)</remarks>
        </member>
        <member name="F:TVA.Media.DataChannels.DolbyDigital">
            <summary>Defines six data sample channels</summary>
            <remarks>5.1 Channel Surround (digital discrete: Dolby Digital, DTS, SDDS)</remarks>
        </member>
        <member name="T:TVA.Media.WaveFormat">
            <summary>
            Common WAVE audio encoding formats.
            </summary>
            <remarks>
            <para>
            Microsoft defines more than 130 different audio encoding formats for WAVE files.  Only the
            more common formats are defined here.
            </para>
            <para>
            Note that PCM (i.e., Pulse Code Modulation) is a universal audio encoding format.  It is a
            very common method of storing and transmitting uncompressed digital audio. Since it is a
            generic format, it can be read by most any audio application similar to the way a plain text
            file can be read by any word-processing program. PCM is used by Audio CDs and digital audio
            tapes (DATs). PCM is also a very common format for AIFF and WAV files.
            </para>
            </remarks>
        </member>
        <member name="F:TVA.Media.WaveFormat.Unknown">
            <summary>Wave format type is undefined.</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.PCM">
            <summary>Standard pulse-code modulation audio format</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.ADPCM">
            <summary>Adpative differential pulse-code modulation encoding algorithm</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.IeeeFloat">
            <summary>Floating point PCM encoding algorithm</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.ALaw">
            <summary>A-law encoding algorithm (used in Europe and the rest of the world)</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.MuLaw">
            <summary>μ-law encoding algorithm (used in North America and Japan)</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.DTS">
            <summary>Decode Timestamp encoding algorithm (used in MPEG-coded multimedia)</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.DRM">
            <summary>Digital Rights Management encoded format (for digital-audio content protected by Microsoft DRM).</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.Mpeg">
            <summary>MPEG Audio is a family of open standards for compressed audio that includes MP2, MP3 and AAC.</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.MpegLayer3">
            <summary>ISO MPEG-Layer 3 audio format.</summary>
        </member>
        <member name="F:TVA.Media.WaveFormat.WaveFormatExtensible">
            <summary>Use WAVEFORMATEXTENSIBLE structure.</summary>
            <remarks>
            This wave file format is used to identify multiple channels in the wave file for spatial positioning
            of speakers, see <see cref="F:TVA.Media.WaveFormat.WaveFormatExtensible"/> for more details.
            </remarks>
        </member>
        <member name="T:TVA.Media.WaveFile">
            <summary>
            Represents a waveform audio format file (WAV).
            </summary>
        </member>
        <member name="M:TVA.Media.WaveFile.#ctor">
            <summary>
            Creates a new empty in-memory wave file using standard CD quality settings.
            </summary>
        </member>
        <member name="M:TVA.Media.WaveFile.#ctor(TVA.Media.SampleRate,TVA.Media.BitsPerSample,TVA.Media.DataChannels)">
            <summary>
            Creates a new empty in-memory wave file in Pulse Code Modulation (PCM) audio format.
            </summary>
            <param name="sampleRate">Desired sample rate.</param>
            <param name="bitsPerSample">Desired bits-per-sample.</param>
            <param name="channels">Desired data channels.</param>
        </member>
        <member name="M:TVA.Media.WaveFile.#ctor(TVA.Media.SampleRate,TVA.Media.BitsPerSample,TVA.Media.DataChannels,TVA.Media.WaveFormat)">
            <summary>
            Creates a new empty in-memory wave file in specified audio format.
            </summary>
            <param name="sampleRate">Desired sample rate.</param>
            <param name="bitsPerSample">Desired bits-per-sample.</param>
            <param name="channels">Desired data channels.</param>
            <param name="audioFormat">Desired audio format.</param>
            <remarks>Consumer will need to apply appropriate data compression for non-PCM data formats.</remarks>
        </member>
        <member name="M:TVA.Media.WaveFile.#ctor(System.Int32,System.Int16,System.Int16)">
            <summary>
            Creates a new empty in-memory wave file in Pulse Code Modulation (PCM) audio format.
            </summary>
            <param name="sampleRate">Desired sample rate (e.g., 44100).</param>
            <param name="bitsPerSample">Desired bits-per-sample (e.g., 16).</param>
            <param name="channels">Desired data channels (e.g., 2 for stereo).</param>
        </member>
        <member name="M:TVA.Media.WaveFile.#ctor(System.Int32,System.Int16,System.Int16,System.UInt16)">
            <summary>
            Creates a new empty in-memory wave file in specified audio format.
            </summary>
            <param name="sampleRate">Desired sample rate (e.g., 44100).</param>
            <param name="bitsPerSample">Desired bits-per-sample (e.g., 16).</param>
            <param name="channels">Desired data channels (e.g., 2 for stereo).</param>
            <param name="audioFormat">Desired audio format (e.g., 0x1 for Pulse Code Modulation).</param>
            <remarks>
            Consumer will need to apply appropriate data compression for non-PCM data formats.
            </remarks>
        </member>
        <member name="M:TVA.Media.WaveFile.#ctor(TVA.Media.RiffHeaderChunk,TVA.Media.WaveFormatChunk,TVA.Media.WaveDataChunk)">
            <summary>
            Creates a new empty in-memory wave file using existing constituent chunks.
            </summary>
            <param name="waveData">A <see cref="T:TVA.Media.RiffHeaderChunk"/> header object.</param>
            <param name="waveFormat">A <see cref="T:TVA.Media.WaveFormatChunk"/> format object.</param>
            <param name="waveHeader">A <see cref="T:TVA.Media.WaveDataChunk"/> data object</param>
        </member>
        <member name="M:TVA.Media.WaveFile.AddSample(System.Double)">
            <summary>
            Add the sample to the wave file.
            </summary>
            <param name="sample">Sample to add to the wave file.</param>
            <remarks>
            <para>
            Sample is applied to all channels and cast to the appropriate size.  Sample should be scaled
            by <see cref="P:TVA.Media.WaveFile.AmplitudeScalar"/> for integer based wave file formats to make sure sample will
            fit into <see cref="P:TVA.Media.WaveFile.BitsPerSample"/> defined by wave file.
            </para>
            <para>
            If you have samples to apply to individual channels (e.g., for a stereo format), use the
            <see cref="M:TVA.Media.WaveFile.AddSamples(System.Double[])"/> method instead.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Media.WaveFile.AddSamples(System.Double[])">
            <summary>
            Adds a series of samples, one per channel, to the wave file.
            </summary>
            <param name="samples">Samples to add to the wave file.</param>
            <remarks>
            <para>
            You need to pass in one sample for each defined channel (e.g., if wave is configured for stereo
            you will need to pass in two parameters).
            </para>
            Each sample will be cast to the appropriate size.  Samples should be scaled by <see cref="P:TVA.Media.WaveFile.AmplitudeScalar"/>
            for integer based wave file formats to make sure samples will fit into <see cref="P:TVA.Media.WaveFile.BitsPerSample"/> defined
            by wave file.
            </remarks>
        </member>
        <member name="M:TVA.Media.WaveFile.AddSampleBlock(TVA.LittleBinaryValue[])">
            <summary>
            Adds a block of samples in native format to the wave file (e.g., if <see cref="P:TVA.Media.WaveFile.BitsPerSample"/> = 16,
            parameters need to be Int16 values). Note that <see cref="T:TVA.LittleBinaryValue"/> parameter type is
            implicitly castable to common native types, including floating points.
            </summary>
            <param name="samples">Samples to add to the wave file.</param>
            <remarks>
            <para>
            You need to pass in one sample for each defined channel (e.g., if wave is configured for stereo
            you will need to pass in two parameters).
            </para>
            You should only add values that match the wave file's <see cref="P:TVA.Media.WaveFile.BitsPerSample"/> (e.g., if wave file is
            configured for 16-bits only pass in Int16 values, casting if necessary).
            </remarks>
        </member>
        <member name="M:TVA.Media.WaveFile.Play">
            <summary>
            Plays the wave file using <see cref="T:System.Media.SoundPlayer"/>.
            </summary>
        </member>
        <member name="M:TVA.Media.WaveFile.Save(System.String)">
            <summary>
            Saves wave file to the specified file name.
            </summary>
            <param name="waveFileName">Desired destination file name for wave file.</param>
        </member>
        <member name="M:TVA.Media.WaveFile.Save(System.IO.Stream)">
            <summary>
            Saves wave file to the specified stream.
            </summary>
            <param name="destination">Destination stream for binary wave file data.</param>
        </member>
        <member name="M:TVA.Media.WaveFile.Reverse">
            <summary>
            Reverses the data samples in the wave file.
            </summary>
            <remarks>
            This is just used to reverse the sound in the file for effect.
            </remarks>
        </member>
        <member name="M:TVA.Media.WaveFile.Clone">
            <summary>
            Creates a deeply cloned copy of the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <returns>A deeply cloned copy of the <see cref="T:TVA.Media.WaveFile"/>.</returns>
        </member>
        <member name="M:TVA.Media.WaveFile.GetSampleTypeCode">
            <summary>
            Determines sample data type code based on defined <see cref="P:TVA.Media.WaveFile.BitsPerSample"/>
            and <see cref="P:TVA.Media.WaveFile.AudioFormat"/>.
            </summary>
            <returns>
            Sample type code based on defined <see cref="P:TVA.Media.WaveFile.BitsPerSample"/> and
            <see cref="P:TVA.Media.WaveFile.AudioFormat"/>.
            </returns>
        </member>
        <member name="M:TVA.Media.WaveFile.CastSample(System.Double)">
            <summary>
            Casts sample value to its equivalent native type based on defined <see cref="P:TVA.Media.WaveFile.BitsPerSample"/>
            and <see cref="P:TVA.Media.WaveFile.AudioFormat"/>.
            </summary>
            <param name="sample">Sample value.</param>
            <returns>
            Sample value cast to its equivalent native type based on defined <see cref="P:TVA.Media.WaveFile.BitsPerSample"/>
            and <see cref="P:TVA.Media.WaveFile.AudioFormat"/>.
            </returns>
        </member>
        <member name="M:TVA.Media.WaveFile.Load(System.String)">
            <summary>
            Creates a new in-memory wave loaded from an existing wave file.
            </summary>
            <param name="waveFileName">File name of WAV file to load.</param>
            <returns>In-memory representation of wave file.</returns>
        </member>
        <member name="M:TVA.Media.WaveFile.Load(System.IO.Stream)">
            <summary>
            Creates a new in-memory wave loaded from an existing wave audio stream.
            </summary>
            <param name="source">Stream of WAV formatted audio data to load.</param>
            <returns>In-memory representation of wave file.</returns>
        </member>
        <member name="M:TVA.Media.WaveFile.Combine(TVA.Media.WaveFile[])">
            <summary>
            Combines wave files together, all starting at the same time, into a single file.
            This has the effect of playing two sound tracks simultaneously.
            </summary>
            <param name="waveFiles">Wave files to combine</param>
            <returns>Combined wave files.</returns>
            <remarks>
            <para>
            This overload "equalizes" the volume of each source wave file.  To specify a desired volume for
            each combined wave file use the <see cref="M:TVA.Media.WaveFile.Combine(TVA.Media.WaveFile[],System.Double[])"/> overload that takes
            a series of volumes as a parameter.
            </para>
            <para>
            Resulting sounds will overlap; no truncation is performed. Final wave file length will equal length of
            longest source file.
            </para>
            <para>
            Combining sounds files with non-PCM based audio formats will have unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Media.WaveFile.Combine(TVA.Media.WaveFile[],System.Double[])">
            <summary>
            Combines wave files together, all starting at the same time, into a single file.
            This has the effect of playing two sound tracks simultaneously.
            </summary>
            <param name="waveFiles">Wave files to combine</param>
            <param name="volumes">Volume for each wave file (0.0 to 1.0)</param>
            <returns>Combined wave files.</returns>
            <remarks>
            <para>
            Cumulatively, volumes cannot exceed 1.0 - these volumes represent a fractional percentage
            of volume to be applied to each wave file.
            </para>
            <para>
            Resulting sounds will overlap; no truncation is performed. Final wave file length will equal length of
            longest source file.
            </para>
            <para>
            Combining sounds files with non-PCM based audio formats will have unexpected results.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Media.WaveFile.Append(TVA.Media.WaveFile[])">
            <summary>
            Appends wave files together, one after another, into a single file.
            </summary>
            <param name="waveFiles">Wave files to append</param>
            <returns>Combined wave files.</returns>
            <remarks>Each resulting wave file is appending behind the next.</remarks>
        </member>
        <member name="M:TVA.Media.WaveFile.CloneSampleBlock(TVA.LittleBinaryValue[])">
            <summary>
            Performs a deep clone of all the channel samples in a sample block.
            </summary>
            <param name="samples">Sample block to clone.</param>
            <returns>A deep clone of all the channel samples in a sample block.</returns>
        </member>
        <member name="P:TVA.Media.WaveFile.AudioFormat">
            <summary>
            Gets or sets audio format used by the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            PCM = 1 (i.e., linear quantization), values other than 1 typically indicate some form of compression.
            See <see cref="T:TVA.Media.WaveFormat"/> enumeration for more details.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFile.Channels">
            <summary>
            Gets or sets number of audio channels in the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            This property defines the number of channels (e.g., mono = 1, stereo = 2, etc.) defined
            in each sample block. See <see cref="T:TVA.Media.DataChannels"/> enumeration for more details.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFile.SampleRate">
            <summary>
            Gets or sets the sample rate (i.e., the number of samples per second) defined in the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            This property defines the number of samples per second defined in each second of data in
            the <see cref="T:TVA.Media.WaveFile"/>.  See <see cref="P:TVA.Media.WaveFile.SampleRate"/> enumeraion for more details.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFile.ByteRate">
            <summary>
            Gets or sets the byte rate used for buffer estimation.
            </summary>
            <remarks>
            <para>
            This property is not usually changed.  It will be automatically calculated for new wave files.
            </para>
            <para>
            This is typically just the arithmetic result of:
            <see cref="P:TVA.Media.WaveFile.SampleRate"/> * <see cref="P:TVA.Media.WaveFile.Channels"/> * <see cref="P:TVA.Media.WaveFile.BitsPerSample"/> / 8.
            However, this value can be changed as needed to accomodate better buffer estimations during
            data read cycle.
            </para>
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFile.BlockAlignment">
            <summary>
            Gets or sets the block size of a complete sample of data (i.e., samples for all channels of data at
            one instant in time).
            </summary>
            <remarks>
            <para>
            This property is not usually changed.  It will be automatically calculated for new wave files.
            </para>
            <para>
            This is typically just the arithmetic result of:
            <see cref="P:TVA.Media.WaveFile.Channels"/> * <see cref="P:TVA.Media.WaveFile.BitsPerSample"/> / 8.
            However, this value can be changed as needed to accomodate even block-alignment of non-standard
            <see cref="P:TVA.Media.WaveFile.BitsPerSample"/> values.
            </para>
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFile.BitsPerSample">
            <summary>
            Gets or sets number of bits-per-sample in the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            This property defines the number of bits-per-sample (e.g., 8, 16, 24, 32, etc.) used
            by each sample in a block of samples - effectively the data sample size. See
            <see cref="P:TVA.Media.WaveFile.BitsPerSample"/> enumeration for more details.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFile.AmplitudeScalar">
            <summary>
            Returns the amplitude scalar for the given bits per sample of the WaveFile (i.e., maximum value
            for given <see cref="P:TVA.Media.WaveFile.BitsPerSample"/>).
            </summary>
            <remarks>
            This defines a scaling factor (essentially a maximum value) used for integer based wave file
            formats.  Floating point wave file formats do not need such scaling.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFile.ExtraParametersSize">
            <summary>
            Gets the size of the <see cref="P:TVA.Media.WaveFile.ExtraParameters"/> buffer, if defined.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFile.ExtraParameters">
            <summary>
            Gets or sets any extra parameters defined in the format header of the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            See the <see cref="T:TVA.Media.WaveFormatExtensible"/> class for an example of usage of this property.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFile.SampleBlocks">
            <summary>
            Accesses each individual block of sample data indexed by time.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFile.HeaderChunk">
            <summary>
            Gets or sets the <see cref="T:TVA.Media.RiffHeaderChunk"/> of this <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFile.FormatChunk">
            <summary>
            Gets or sets the <see cref="T:TVA.Media.WaveFormatChunk"/> of this <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFile.DataChunk">
            <summary>
            Gets or sets the <see cref="T:TVA.Media.WaveDataChunk"/> of this <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
        </member>
        <member name="T:TVA.IO.Compression.CompressionStrength">
            <summary>
            Level of compression enumeration.
            </summary>
            <remarks>
            Compression strengths represent tradeoffs on speed of compression vs. effectiveness of compression.
            </remarks>
        </member>
        <member name="F:TVA.IO.Compression.CompressionStrength.NoCompression">
            <summary>Disables compression.</summary>
        </member>
        <member name="F:TVA.IO.Compression.CompressionStrength.Standard">
            <summary>Enables standard compression.</summary>
        </member>
        <member name="F:TVA.IO.Compression.CompressionStrength.MultiPass">
            <summary>Enables multi-pass compression to continue recompressing buffer as long as size continues to shrink.</summary>
        </member>
        <member name="T:TVA.IO.Compression.CompressionExtensions">
            <summary>
            Defines extension functions related to compression.
            </summary>
        </member>
        <member name="F:TVA.IO.Compression.CompressionExtensions.BufferSize">
            <summary>
            Default compression buffer size.
            </summary>
        </member>
        <member name="F:TVA.IO.Compression.CompressionExtensions.CompressionVersion">
            <summary>
            Needed version of this library to uncompress stream (1.0.0 stored as byte 100).
            </summary>
        </member>
        <member name="M:TVA.IO.Compression.CompressionExtensions.Compress(System.Byte[])">
            <summary>
            Compress a byte array using standard compression method.
            </summary>
            <param name="source">The <see cref="T:System.Byte"/> array to compress.</param>
            <returns>A compressed version of the source <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:TVA.IO.Compression.CompressionExtensions.Compress(System.Byte[],TVA.IO.Compression.CompressionStrength)">
            <summary>
            Compress a byte array using specified compression method.
            </summary>
            <param name="source">The <see cref="T:System.Byte"/> array to compress.</param>
            <param name="strength">The specified <see cref="T:TVA.IO.Compression.CompressionStrength"/>.</param>
            <returns>A compressed version of the source <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:TVA.IO.Compression.CompressionExtensions.Compress(System.Byte[],System.Int32,System.Int32,TVA.IO.Compression.CompressionStrength)">
            <summary>
            Compress a byte array using specified compression method.
            </summary>
            <param name="source">The <see cref="T:System.Byte"/> array to compress.</param>
            <param name="length">The number of bytes to read into the byte array for compression.</param>
            <param name="startIndex">An <see cref="T:System.Int32"/> representing the start index of the byte array.</param>
            <param name="strength">The specified <see cref="T:TVA.IO.Compression.CompressionStrength"/>.</param>
            <returns>A compressed version of the source <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:TVA.IO.Compression.CompressionExtensions.Compress(System.IO.Stream,TVA.IO.Compression.CompressionStrength)">
            <summary>
            Compress a stream using specified compression strength.
            </summary>
            <remarks>
            This returns a memory stream of the compressed results, if the incoming stream is
            very large this will consume a large amount memory.  In this case use the overload
            that takes the destination stream as a parameter instead.
            </remarks>
            <param name="source">The <see cref="T:System.IO.Stream"/> to compress.</param>
            <param name="strength">The <see cref="T:TVA.IO.Compression.CompressionStrength"/> of the compression.</param>
            <returns>Returns a <see cref="T:System.IO.MemoryStream"/> of the compressed <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:TVA.IO.Compression.CompressionExtensions.Compress(System.IO.Stream,System.IO.Stream,TVA.IO.Compression.CompressionStrength,System.Action{TVA.ProcessProgress{System.Int64}})">
            <summary>
            Compress a stream onto given output stream using specified compression strength.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> to compress.</param>
            <param name="strength">The <see cref="T:TVA.IO.Compression.CompressionStrength"/> of the compression.</param>
            <param name="destination">The <see cref="T:System.IO.Stream"/> destination.</param>
            <param name="progressHandler">The progress handler to check progress.</param>
        </member>
        <member name="M:TVA.IO.Compression.CompressionExtensions.Decompress(System.Byte[])">
            <summary>
            Decompress a byte array.
            </summary>
            <param name="source">The <see cref="T:System.Byte"/> array to decompress.</param>
            <returns>A decompressed version of the source <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:TVA.IO.Compression.CompressionExtensions.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompress a byte array.
            </summary>
            <param name="source">The <see cref="T:System.Byte"/> array to decompress.</param>
            <param name="length">The number of bytes to read into the byte array for compression.</param>
            <param name="startIndex">An <see cref="T:System.Int32"/> representing the start index of the byte array.</param>
            <returns>A decompressed <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:TVA.IO.Compression.CompressionExtensions.Decompress(System.IO.Stream)">
            <summary>
            Decompress a stream.
            </summary>
            <remarks>
            This returns a memory stream of the uncompressed results, if the incoming stream is
            very large this will consume a large amount memory.  In this case use the overload
            that takes the destination stream as a parameter instead.
            </remarks>
            <param name="source">A <see cref="T:System.IO.Stream"/> source to decompress.</param>
            <returns>A <see cref="T:System.IO.MemoryStream"/> representing the decompressed source.</returns>
        </member>
        <member name="M:TVA.IO.Compression.CompressionExtensions.Decompress(System.IO.Stream,System.IO.Stream,System.Action{TVA.ProcessProgress{System.Int64}})">
            <summary>
            Decompress a stream onto given output stream.
            </summary>
            <param name="source">A source <see cref="T:System.IO.Stream"/> to decompress.</param>
            <param name="destination">The destination <see cref="T:System.IO.Stream"/> to decompress to.</param>
            <param name="progressHandler">A <see cref="T:System.Action"/> handler to monitor the action's progress.</param>
        </member>
        <member name="T:TVA.IO.Checksums.Xor32">
            <summary>Calculates double-word length (32-bit) XOR-based check-sum on specified portion of a buffer.</summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor32.#ctor">
            <summary>
            Creates a new instance of the Xor32Bit class.
            The checksum starts off with a value of 0.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor32.Reset">
            <summary>
            Resets the checksum to the initial value.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor32.Update(System.UInt32)">
            <summary>
            Updates the checksum with a uint value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to use for the update.</param>
        </member>
        <member name="M:TVA.IO.Checksums.Xor32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:TVA.IO.Checksums.Xor32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:TVA.IO.Checksums.Xor32.Value">
            <summary>
            Returns the Xor 32-bit checksum computed so far.
            </summary>
        </member>
        <member name="T:TVA.IO.Checksums.CrcCCITT">
            <summary>Generates a 16-bit CRC-CCITT checksum.</summary>
            <remarks>
            This is a table based 16-bit CRC popular for modem protocols defined for use by the
            Consultative Committee on International Telegraphy and Telephony (CCITT) 
            </remarks>
        </member>
        <member name="M:TVA.IO.Checksums.CrcCCITT.#ctor">
            <summary>
            Creates a new instance of the CrcCCITT class.
            The checksum starts off with a value of 0xFFFF.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.CrcCCITT.Reset">
            <summary>
            Resets the CRC-CCITT data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.CrcCCITT.Update(System.Byte)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to use for the update.</param>
        </member>
        <member name="M:TVA.IO.Checksums.CrcCCITT.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">buffer an array of bytes</param>
        </member>
        <member name="M:TVA.IO.Checksums.CrcCCITT.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">The buffer which contains the data</param>
            <param name = "offset">The offset in the buffer where the data starts</param>
            <param name = "count">The number of data bytes to update the CRC with.</param>
        </member>
        <member name="P:TVA.IO.Checksums.CrcCCITT.Value">
            <summary>
            Returns the CRCCCITT data checksum computed so far.
            </summary>
        </member>
        <member name="T:TVA.IO.Checksums.ChecksumExtensions">
            <summary>Defines extension functions related to computing checksums.</summary>
        </member>
        <member name="M:TVA.IO.Checksums.ChecksumExtensions.Crc16Checksum(System.Byte[],System.Int32,System.Int32)">
            <summary>Calculates the CRC16 check-sum on specified portion of a buffer.</summary>
            <param name="data">Data buffer to perform check-sum on.</param>
            <param name="startIndex">Starts index in data buffer to begin check-sum.</param>
            <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform check-sum over.</param>
            <returns>Computed CRC16 checksum over the specified portion of the buffer.</returns>
        </member>
        <member name="M:TVA.IO.Checksums.ChecksumExtensions.CrcCCITTChecksum(System.Byte[],System.Int32,System.Int32)">
            <summary>Calculates the CRC-CCITT check-sum on specified portion of a buffer.</summary>
            <param name="data">Data buffer to perform check-sum on.</param>
            <param name="startIndex">Starts index in data buffer to begin check-sum.</param>
            <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform check-sum over.</param>
            <returns>Computed CRC-CCITT checksum over the specified portion of the buffer.</returns>
            <remarks>
            The CRC-CCITT is a table based 16-bit CRC popular for modem protocols defined for use by the
            Consultative Committee on International Telegraphy and Telephony (CCITT) 
            </remarks>
        </member>
        <member name="M:TVA.IO.Checksums.ChecksumExtensions.ModBusCrcChecksum(System.Byte[],System.Int32,System.Int32)">
            <summary>Calculates the CRC-ModBus check-sum on specified portion of a buffer.</summary>
            <param name="data">Data buffer to perform check-sum on.</param>
            <param name="startIndex">Starts index in data buffer to begin check-sum.</param>
            <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform check-sum over.</param>
            <returns>Computed CRC-ModBus checksum over the specified portion of the buffer.</returns>		
        </member>
        <member name="M:TVA.IO.Checksums.ChecksumExtensions.Crc32Checksum(System.Byte[],System.Int32,System.Int32)">
            <summary>Calculates the CRC32 check-sum on specified portion of a buffer.</summary>
            <param name="data">Data buffer to perform check-sum on.</param>
            <param name="startIndex">Starts index in data buffer to begin check-sum.</param>
            <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform check-sum over.</param>
            <returns>Computed CRC32 checksum over the specified portion of the buffer.</returns>
        </member>
        <member name="M:TVA.IO.Checksums.ChecksumExtensions.Xor8CheckSum(System.Byte[],System.Int32,System.Int32)">
            <summary>Calculates byte length (8-bit) XOR-based check-sum on specified portion of a buffer.</summary>
            <param name="data">Data buffer to perform XOR check-sum on.</param>
            <param name="startIndex">Starts index in data buffer to begin XOR check-sum.</param>
            <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform XOR check-sum over.</param>
            <returns>Byte length XOR check-sum.</returns>
        </member>
        <member name="M:TVA.IO.Checksums.ChecksumExtensions.Xor16CheckSum(System.Byte[],System.Int32,System.Int32)">
            <summary>Calculates word length (16-bit) XOR-based check-sum on specified portion of a buffer.</summary>
            <param name="data">Data buffer to perform XOR check-sum on.</param>
            <param name="startIndex">Starts index in data buffer to begin XOR check-sum.</param>
            <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform XOR check-sum overs</param>
            <returns>Word length XOR check-sum.</returns>
        </member>
        <member name="M:TVA.IO.Checksums.ChecksumExtensions.Xor32CheckSum(System.Byte[],System.Int32,System.Int32)">
            <summary>Calculates double-word length (32-bit) XOR-based check-sum on specified portion of a buffer.</summary>
            <param name="data">Data buffer to perform XOR check-sum on.</param>
            <param name="startIndex">Starts index in data buffer to begin XOR check-sum.</param>
            <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform XOR check-sum over.</param>
            <returns>Double-word length XOR check-sum.</returns>
        </member>
        <member name="M:TVA.IO.Checksums.ChecksumExtensions.Xor64CheckSum(System.Byte[],System.Int32,System.Int32)">
            <summary>Calculates quad-word length (64-bit) XOR-based check-sum on specified portion of a buffer.</summary>
            <param name="data">Data buffer to perform XOR check-sum on.</param>
            <param name="startIndex">Starts index in data buffer to begin XOR check-sum.</param>
            <param name="length">Total number of bytes from <paramref name="startIndex">startIndex</paramref> to
            perform XOR check-sum over.</param>
            <returns>Quad-word length XOR check-sum.</returns>
        </member>
        <member name="T:TVA.Int24">
            <summary>Represents a 3-byte, 24-bit signed integer.</summary>
            <remarks>
            <para>
            This class behaves like most other intrinsic signed integers but allows a 3-byte, 24-bit integer implementation
            that is often found in many digital-signal processing arenas and different kinds of protocol parsing.  A signed
            24-bit integer is typically used to save storage space on disk where its value range of -8388608 to 8388607 is
            sufficient, but the signed Int16 value range of -32768 to 32767 is too small.
            </para>
            <para>
            This structure uses an Int32 internally for storage and most other common expected integer functionality, so using
            a 24-bit integer will not save memory.  However, if the 24-bit signed integer range (-8388608 to 8388607) suits your
            data needs you can save disk space by only storing the three bytes that this integer actually consumes.  You can do
            this by calling the Int24.GetBytes function to return a three byte binary array that can be serialized to the desired
            destination and then calling the Int24.GetValue function to restore the Int24 value from those three bytes.
            </para>
            <para>
            All the standard operators for the Int24 have been fully defined for use with both Int24 and Int32 signed integers;
            you should find that without the exception Int24 can be compared and numerically calculated with an Int24 or Int32.
            Necessary casting should be minimal and typical use should be very simple - just as if you are using any other native
            signed integer.
            </para>
            </remarks>
        </member>
        <member name="F:TVA.Int24.BitMask">
            <summary>High byte bit-mask used when a 24-bit integer is stored within a 32-bit integer. This field is constant.</summary>
        </member>
        <member name="M:TVA.Int24.#ctor(TVA.Int24)">
            <summary>Creates 24-bit signed integer from an existing 24-bit signed integer.</summary>
            <param name="value">24-but signed integer to create new Int24 from.</param>
        </member>
        <member name="M:TVA.Int24.#ctor(System.Int32)">
            <summary>Creates 24-bit signed integer from a 32-bit signed integer.</summary>
            <param name="value">32-bit signed integer to use as new 24-bit signed integer value.</param>
            <exception cref="T:System.OverflowException">Source values outside 24-bit min/max range will cause an overflow exception.</exception>
        </member>
        <member name="M:TVA.Int24.#ctor(System.Byte[],System.Int32)">
            <summary>Creates 24-bit signed integer from three bytes at a specified position in a byte array.</summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <remarks>
            <para>You can use this constructor in-lieu of a System.BitConverter.ToInt24 function.</para>
            <para>Bytes endian order assumed to match that of currently executing process architecture (little-endian on Intel platforms).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is greater than <paramref name="value"/> length.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> length from <paramref name="startIndex"/> is too small to represent a <see cref="T:TVA.UInt24"/>.</exception>
        </member>
        <member name="M:TVA.Int24.GetBytes">
            <summary>Returns the Int24 value as an array of three bytes.</summary>
            <returns>An array of bytes with length 3.</returns>
            <remarks>
            <para>You can use this function in-lieu of a System.BitConverter.GetBytes function.</para>
            <para>Bytes will be returned in endian order of currently executing process architecture (little-endian on Intel platforms).</para>
            </remarks>
        </member>
        <member name="M:TVA.Int24.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not an Int32 or Int24.</exception>
        </member>
        <member name="M:TVA.Int24.CompareTo(TVA.Int24)">
            <summary>
            Compares this instance to a specified 24-bit signed integer and returns an indication of their
            relative values.
            </summary>
            <param name="value">An integer to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Int24.CompareTo(System.Int32)">
            <summary>
            Compares this instance to a specified 32-bit signed integer and returns an indication of their
            relative values.
            </summary>
            <param name="value">An integer to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Int24.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of Int32 or Int24 and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Int24.Equals(TVA.Int24)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Int24 value.
            </summary>
            <param name="obj">An Int24 value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Int24.Equals(System.Int32)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Int32 value.
            </summary>
            <param name="obj">An Int32 value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Int24.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Int24.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Int24.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Int24.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Int24.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Int24.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 24-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Int24.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its 24-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
            <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Int24.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its 24-bit
            signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Int24.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 24-bit
            signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A 24-bit signed integer equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Int24.TryParse(System.String,TVA.Int24@)">
            <summary>
            Converts the string representation of a number to its 24-bit signed integer equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the 24-bit signed integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than Int24.MinValue or greater than Int24.MaxValue.
            This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Int24.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Int24@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            24-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
            <param name="result">
            When this method returns, contains the 24-bit signed integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than Int24.MinValue or greater than
            Int24.MaxValue. This parameter is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Int24.GetTypeCode">
            <summary>
            Returns the System.TypeCode for value type System.Int32 (there is no defined type code for an Int24).
            </summary>
            <returns>The enumerated constant, System.TypeCode.Int32.</returns>
            <remarks>
            There is no defined Int24 type code and since an Int24 will easily fit inside an Int32, the
            Int32 type code is returned.
            </remarks>
        </member>
        <member name="M:TVA.Int24.op_Equality(TVA.Int24,TVA.Int24)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean value indicating equality.</returns>
        </member>
        <member name="M:TVA.Int24.op_Equality(System.Int32,TVA.Int24)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean value indicating equality.</returns>
        </member>
        <member name="M:TVA.Int24.op_Equality(TVA.Int24,System.Int32)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean value indicating equality.</returns>
        </member>
        <member name="M:TVA.Int24.op_Inequality(TVA.Int24,TVA.Int24)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating the result of the inequality.</returns>
        </member>
        <member name="M:TVA.Int24.op_Inequality(System.Int32,TVA.Int24)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating the result of the inequality.</returns>
        </member>
        <member name="M:TVA.Int24.op_Inequality(TVA.Int24,System.Int32)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating the result of the inequality.</returns>
        </member>
        <member name="M:TVA.Int24.op_LessThan(TVA.Int24,TVA.Int24)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was less than the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_LessThan(System.Int32,TVA.Int24)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was less than the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_LessThan(TVA.Int24,System.Int32)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was less than the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_LessThanOrEqual(TVA.Int24,TVA.Int24)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was less than the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_LessThanOrEqual(System.Int32,TVA.Int24)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was less than the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_LessThanOrEqual(TVA.Int24,System.Int32)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was less than the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_GreaterThan(TVA.Int24,TVA.Int24)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was greater than the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_GreaterThan(System.Int32,TVA.Int24)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was greater than the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_GreaterThan(TVA.Int24,System.Int32)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was greater than the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_GreaterThanOrEqual(TVA.Int24,TVA.Int24)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was greater than or equal to the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_GreaterThanOrEqual(System.Int32,TVA.Int24)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was greater than or equal to the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_GreaterThanOrEqual(TVA.Int24,System.Int32)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Boolean indicating whether the left value was greater than or equal to the right value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(System.Enum)~TVA.Int24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">Enum value that is converted.</param>
            <returns>Int24</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(System.String)~TVA.Int24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">String value that is converted.</param>
            <returns>Int24</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(System.Decimal)~TVA.Int24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">Decimal value that is converted.</param>
            <returns>Int24</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(System.Double)~TVA.Int24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">Double value that is converted.</param>
            <returns>Int24</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(System.Single)~TVA.Int24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">Float value that is converted.</param>
            <returns>Int24</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(System.Int64)~TVA.Int24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">Long value that is converted.</param>
            <returns>Int24</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(System.Int32)~TVA.Int24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">Integer value that is converted.</param>
            <returns>Int24</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(TVA.Int24)~System.Int16">
            <summary>
            Explicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">Int24 value that is converted.</param>
            <returns>Short</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(TVA.Int24)~System.UInt16">
            <summary>
            Explicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">Int24 value that is converted.</param>
            <returns>Unsigned Short</returns>
        </member>
        <member name="M:TVA.Int24.op_Explicit(TVA.Int24)~System.Byte">
            <summary>
            Explicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">Int24 value that is converted.</param>
            <returns>Byte</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(System.Byte)~TVA.Int24">
            <summary>
            Implicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">Byte value that is converted to an <see cref="T:TVA.Int24"/>.</param>
            <returns>An <see cref="T:TVA.Int24"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(System.Char)~TVA.Int24">
            <summary>
            Implicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">Char value that is converted to an <see cref="T:TVA.Int24"/>.</param>
            <returns>An <see cref="T:TVA.Int24"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(System.Int16)~TVA.Int24">
            <summary>
            Implicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value">Short value that is converted to an <see cref="T:TVA.Int24"/>.</param>
            <returns>An <see cref="T:TVA.Int24"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(TVA.Int24)~System.Int32">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value that is converted to an <see cref="T:System.Int32"/>.</param>
            <returns>An <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(TVA.Int24)~System.UInt32">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value that is converted to an unsigned integer.</param>
            <returns>Unsigned integer</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(TVA.Int24)~System.Int64">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value that is converted to an <see cref="T:System.Int64"/>.</param>
            <returns>An <see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(TVA.Int24)~System.UInt64">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value that is converted to an <see cref="T:System.UInt64"/>.</param>
            <returns>An <see cref="T:System.UInt64"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(TVA.Int24)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value that is converted to an <see cref="T:System.Double"/>.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(TVA.Int24)~System.Single">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value that is converted to an <see cref="T:System.Single"/>.</param>
            <returns>A <see cref="T:System.Single"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(TVA.Int24)~System.Decimal">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value that is converted to an <see cref="T:System.Decimal"/>.</param>
            <returns>A <see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Implicit(TVA.Int24)~System.String">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value that is converted to an <see cref="T:System.String"/>.</param>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_True(TVA.Int24)">
            <summary>
            Returns true if value is not zero.
            </summary>
            <param name="value">Int24 value to test.</param>
            <returns>Boolean to indicate whether the value was not equal to zero.</returns>
        </member>
        <member name="M:TVA.Int24.op_False(TVA.Int24)">
            <summary>
            Returns true if value is equal to zero.
            </summary>
            <param name="value">Int24 value to test.</param>
            <returns>Boolean to indicate whether the value was equal to zero.</returns>
        </member>
        <member name="M:TVA.Int24.op_OnesComplement(TVA.Int24)">
            <summary>
            Returns bitwise complement of value.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value as operand.</param>
            <returns><see cref="T:TVA.Int24"/> as result.</returns>
        </member>
        <member name="M:TVA.Int24.op_BitwiseAnd(TVA.Int24,TVA.Int24)">
            <summary>
            Returns logical bitwise AND of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Int24 as result of operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_BitwiseAnd(System.Int32,TVA.Int24)">
            <summary>
            Returns logical bitwise AND of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer as result of operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_BitwiseAnd(TVA.Int24,System.Int32)">
            <summary>
            Returns logical bitwise AND of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer as result of operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_BitwiseOr(TVA.Int24,TVA.Int24)">
            <summary>
            Returns logical bitwise OR of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Int24 as result of operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_BitwiseOr(System.Int32,TVA.Int24)">
            <summary>
            Returns logical bitwise OR of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer as result of operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_BitwiseOr(TVA.Int24,System.Int32)">
            <summary>
            Returns logical bitwise OR of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer as result of operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_ExclusiveOr(TVA.Int24,TVA.Int24)">
            <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer value of the resulting exclusive-OR operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_ExclusiveOr(System.Int32,TVA.Int24)">
            <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer value of the resulting exclusive-OR operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_ExclusiveOr(TVA.Int24,System.Int32)">
            <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer value of the resulting exclusive-OR operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_RightShift(TVA.Int24,System.Int32)">
            <summary>
            Returns value after right shifts of first value by the number of bits specified by second value.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value to shift.</param>
            <param name="shifts"><see cref="T:System.Int32"/> shifts indicates how many places to shift.</param>
            <returns>An <see cref="T:TVA.Int24"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_LeftShift(TVA.Int24,System.Int32)">
            <summary>
            Returns value after left shifts of first value by the number of bits specified by second value.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value to shift.</param>
            <param name="shifts"><see cref="T:System.Int32"/> shifts indicates how many places to shift.</param>
            <returns>An <see cref="T:TVA.Int24"/> value.</returns>
        </member>
        <member name="M:TVA.Int24.op_Modulus(TVA.Int24,TVA.Int24)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1"><see cref="T:TVA.Int24"/> value as numerator.</param>
            <param name="value2"><see cref="T:TVA.Int24"/> value as denominator.</param>
            <returns><see cref="T:TVA.Int24"/> as remainder</returns>
        </member>
        <member name="M:TVA.Int24.op_Modulus(System.Int32,TVA.Int24)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1"><see cref="T:System.Int32"/> value as numerator.</param>
            <param name="value2"><see cref="T:TVA.Int24"/> value as denominator.</param>
            <returns><see cref="T:System.Int32"/> as remainder</returns>
        </member>
        <member name="M:TVA.Int24.op_Modulus(TVA.Int24,System.Int32)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1"><see cref="T:TVA.Int24"/> value as numerator.</param>
            <param name="value2"><see cref="T:System.Int32"/> value as denominator.</param>
            <returns><see cref="T:System.Int32"/> as remainder</returns>
        </member>
        <member name="M:TVA.Int24.op_Addition(TVA.Int24,TVA.Int24)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Int24 result of addition.</returns>
        </member>
        <member name="M:TVA.Int24.op_Addition(System.Int32,TVA.Int24)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer result of addition.</returns>
        </member>
        <member name="M:TVA.Int24.op_Addition(TVA.Int24,System.Int32)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer result of addition.</returns>
        </member>
        <member name="M:TVA.Int24.op_Subtraction(TVA.Int24,TVA.Int24)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Int24 result of subtraction.</returns>
        </member>
        <member name="M:TVA.Int24.op_Subtraction(System.Int32,TVA.Int24)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer result of subtraction.</returns>
        </member>
        <member name="M:TVA.Int24.op_Subtraction(TVA.Int24,System.Int32)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer result of subtraction.</returns>
        </member>
        <member name="M:TVA.Int24.op_Increment(TVA.Int24)">
            <summary>
            Returns incremented value.
            </summary>
            <param name="value">The operand.</param>
            <returns>Int24 result of increment.</returns>
        </member>
        <member name="M:TVA.Int24.op_Decrement(TVA.Int24)">
            <summary>
            Returns decremented value.
            </summary>
            <param name="value">The operand.</param>
            <returns>Int24 result of decrement.</returns>
        </member>
        <member name="M:TVA.Int24.op_Multiply(TVA.Int24,TVA.Int24)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1"><see cref="T:TVA.Int24"/> value as left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Int24"/> value as right hand operand.</param>
            <returns><see cref="T:TVA.Int24"/> as result</returns>
        </member>
        <member name="M:TVA.Int24.op_Multiply(System.Int32,TVA.Int24)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1"><see cref="T:System.Int32"/> value as left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Int24"/> value as right hand operand.</param>
            <returns><see cref="T:System.Int32"/> as result</returns>
        </member>
        <member name="M:TVA.Int24.op_Multiply(TVA.Int24,System.Int32)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1"><see cref="T:TVA.Int24"/> value as left hand operand.</param>
            <param name="value2"><see cref="T:System.Int32"/> value as right hand operand.</param>
            <returns><see cref="T:System.Int32"/> as result</returns>
        </member>
        <member name="M:TVA.Int24.op_Division(TVA.Int24,TVA.Int24)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Int24 result of operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_Division(System.Int32,TVA.Int24)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer result of operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_Division(TVA.Int24,System.Int32)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Integer result of operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_Exponent(TVA.Int24,TVA.Int24)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Double that is the result of the operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_Exponent(System.Int32,TVA.Int24)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Double that is the result of the operation.</returns>
        </member>
        <member name="M:TVA.Int24.op_Exponent(TVA.Int24,System.Int32)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">Left hand operand.</param>
            <param name="value2">Right hand operand.</param>
            <returns>Double that is the result of the operation.</returns>
        </member>
        <member name="F:TVA.Int24.MaxValue">
            <summary>
            Represents the largest possible value of an Int24. This field is constant.
            </summary>
        </member>
        <member name="F:TVA.Int24.MinValue">
            <summary>
            Represents the smallest possible value of an Int24. This field is constant.
            </summary>
        </member>
        <member name="M:TVA.Int24.GetBytes(TVA.Int24)">
            <summary>Returns the specified Int24 value as an array of three bytes.</summary>
            <param name="value">Int24 value to convert to bytes.</param>
            <returns>An array of bytes with length 3.</returns>
            <remarks>
            <para>You can use this function in-lieu of a System.BitConverter.GetBytes(Int24) function.</para>
            <para>Bytes will be returned in endian order of currently executing process architecture (little-endian on Intel platforms).</para>
            </remarks>
        </member>
        <member name="M:TVA.Int24.GetValue(System.Byte[],System.Int32)">
            <summary>Returns a 24-bit signed integer from three bytes at a specified position in a byte array.</summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
            <remarks>
            <para>You can use this function in-lieu of a System.BitConverter.ToInt24 function.</para>
            <para>Bytes endian order assumed to match that of currently executing process architecture (little-endian on Intel platforms).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is greater than <paramref name="value"/> length.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> length from <paramref name="startIndex"/> is too small to represent an <see cref="T:TVA.Int24"/>.</exception>
        </member>
        <member name="T:TVA.DateTimeExtensions">
            <summary>
            Defines extension functions related to Date/Time manipulation.
            </summary>
        </member>
        <member name="M:TVA.DateTimeExtensions.UtcTimeIsValid(System.DateTime,System.Double,System.Double)">
            <summary>Determines if the specified UTC time is valid, by comparing it to the system clock.</summary>
            <param name="utcTime">UTC time to test for validity.</param>
            <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
            <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be
            valid.</param>
            <returns>True, if time is within the specified range.</returns>
            <remarks>
            <para>Time is considered valid if it exists within the specified lag time/lead time range of current
            time.</para>
            <para>Note that lag time and lead time must be greater than zero, but can be set to sub-second
            intervals.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can
            be less than one.</exception>
        </member>
        <member name="M:TVA.DateTimeExtensions.LocalTimeIsValid(System.DateTime,System.Double,System.Double)">
            <summary>Determines if the specified local time is valid, by comparing it to the system clock.</summary>
            <param name="localTime">Time to test for validity.</param>
            <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
            <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be
            valid.</param>
            <returns>True, if time is within the specified range.</returns>
            <remarks>
            <para>Time is considered valid if it exists within the specified lag time/lead time range of current
            time.</para>
            <para>Note that lag time and lead time must be greater than zero, but can be set to sub-second
            intervals.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can
            be less than one.</exception>
        </member>
        <member name="M:TVA.DateTimeExtensions.TimeIsValid(System.DateTime,System.DateTime,System.Double,System.Double)">
            <summary>Determines if time is valid, by comparing it to the specified current time.</summary>
            <param name="testTime">Time to test for validity.</param>
            <param name="currentTime">Specified current time (e.g., could be Date.Now or Date.UtcNow).</param>
            <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
            <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be
            valid.</param>
            <returns>True, if time is within the specified range.</returns>
            <remarks>
            <para>Time is considered valid if it exists within the specified lag time/lead time range of current
            time.</para>
            <para>Note that lag time and lead time must be greater than zero, but can be set to sub-second
            intervals.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">LagTime and LeadTime must be greater than zero, but can
            be less than one.</exception>
        </member>
        <member name="M:TVA.DateTimeExtensions.DistanceBeyondSecond(System.DateTime)">
            <summary>Gets the distance, in <see cref="T:TVA.Ticks"/>, beyond the top of the <paramref name="timestamp"/> second.</summary>
            <param name="timestamp">Timestamp to evaluate.</param>
            <returns>Timestamp's tick distance from the top of the second.</returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.BaselinedTimestamp(System.DateTime,TVA.BaselineTimeInterval)">
            <summary>Creates a baselined timestamp which begins at the specified time interval.</summary>
            <param name="timestamp">Timestamp to baseline.</param>
            <param name="interval">
            <see cref="T:TVA.BaselineTimeInterval"/> to which <paramref name="timestamp"/> should be baselined.
            </param>
            <returns>
            A new <see cref="T:System.DateTime"/> value that represents a baselined timestamp that begins at the
            specified <see cref="T:TVA.BaselineTimeInterval"/>.
            </returns>
            <remarks>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Second"/> would return the <see cref="T:System.DateTime"/>
            value starting at zero milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Minute"/> would return the <see cref="T:System.DateTime"/>
            value starting at zero seconds and milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Hour"/> would return the <see cref="T:System.DateTime"/>
            value starting at zero minutes, seconds and milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Day"/> would return the <see cref="T:System.DateTime"/>
            value starting at zero hours, minutes, seconds and milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Month"/> would return the <see cref="T:System.DateTime"/>
            value starting at day one, zero hours, minutes, seconds and milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Year"/> would return the <see cref="T:System.DateTime"/>
            value starting at month one, day one, zero hours, minutes, seconds and milliseconds.
            </remarks>
        </member>
        <member name="M:TVA.DateTimeExtensions.LocalTimeToEasternTime(System.DateTime)">
            <summary>Converts given local time to Eastern time.</summary>
            <param name="timestamp">Timestamp in local time to be converted to Eastern time.</param>
            <returns>
            <para>Timestamp in Eastern time.</para>
            </returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.LocalTimeToCentralTime(System.DateTime)">
            <summary>Converts given local time to Central time.</summary>
            <param name="timestamp">Timestamp in local time to be converted to Central time.</param>
            <returns>
            <para>Timestamp in Central time.</para>
            </returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.LocalTimeToMountainTime(System.DateTime)">
            <summary>Converts given local time to Mountain time.</summary>
            <param name="timestamp">Timestamp in local time to be converted to Mountain time.</param>
            <returns>
            <para>Timestamp in Mountain time.</para>
            </returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.LocalTimeToPacificTime(System.DateTime)">
            <summary>Converts given local time to Pacific time.</summary>
            <param name="timestamp">Timestamp in local time to be converted to Pacific time.</param>
            <returns>
            <para>Timestamp in Pacific time.</para>
            </returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.LocalTimeToUniversalTime(System.DateTime)">
            <summary>Converts given local time to Universally Coordinated Time (a.k.a., Greenwich Meridian Time).</summary>
            <remarks>This function is only provided for the sake of completeness. All it does is call the
            "ToUniversalTime" property on the given timestamp.</remarks>
            <param name="timestamp">Timestamp in local time to be converted to Universal time.</param>
            <returns>
            <para>Timestamp in UniversalTime (a.k.a., GMT).</para>
            </returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.LocalTimeTo(System.DateTime,System.String)">
            <summary>Converts given local time to time in specified time zone.</summary>
            <param name="timestamp">Timestamp in local time to be converted to time in specified time zone.</param>
            <param name="destinationTimeZoneStandardName">Standard name of desired end time zone for given
            timestamp.</param>
            <returns>
            <para>Timestamp in specified time zone.</para>
            </returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.LocalTimeTo(System.DateTime,System.TimeZoneInfo)">
            <summary>Converts given local time to time in specified time zone.</summary>
            <param name="timestamp">Timestamp in local time to be converted to time in specified time zone.</param>
            <param name="destinationTimeZone">Desired end time zone for given timestamp.</param>
            <returns>
            <para>Timestamp in specified time zone.</para>
            </returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.UniversalTimeToEasternTime(System.DateTime)">
            <summary>
            Converts the specified Universally Coordinated Time timestamp to Eastern time timestamp.
            </summary>
            <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
            <returns>The timestamp in Eastern time.</returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.UniversalTimeToCentralTime(System.DateTime)">
            <summary>
            Converts the specified Universally Coordinated Time timestamp to Central time timestamp.
            </summary>
            <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
            <returns>The timestamp in Central time.</returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.UniversalTimeToMountainTime(System.DateTime)">
            <summary>
            Converts the specified Universally Coordinated Time timestamp to Mountain time timestamp.
            </summary>
            <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
            <returns>The timestamp in Mountain time.</returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.UniversalTimeToPacificTime(System.DateTime)">
            <summary>
            Converts the specified Universally Coordinated Time timestamp to Pacific time timestamp.
            </summary>
            <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
            <returns>The timestamp in Pacific time.</returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.UniversalTimeTo(System.DateTime,System.String)">
            <summary>
            Converts the specified Universally Coordinated Time timestamp to timestamp in specified time zone.
            </summary>
            <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
            <param name="destinationTimeZoneStandardName">The time zone standard name to which the Universally
            Coordinated Time timestamp is to be converted to.</param>
            <returns>The timestamp in the specified time zone.</returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.UniversalTimeTo(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts the specified Universally Coordinated Time timestamp to timestamp in specified time zone.
            </summary>
            <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
            <param name="destinationTimeZone">The time zone to which the Universally Coordinated Time timestamp
            is to be converted to.</param>
            <returns>The timestamp in the specified time zone.</returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.TimeZoneToTimeZone(System.DateTime,System.String,System.String)">
            <summary>Converts given timestamp from one time zone to another using standard names for time zones.</summary>
            <param name="timestamp">Timestamp in source time zone to be converted to time in destination time zone.</param>
            <param name="sourceTimeZoneStandardName">Standard name of time zone for given source timestamp.</param>
            <param name="destinationTimeZoneStandardName">Standard name of desired end time zone for given source
            timestamp.</param>
            <returns>
            <para>Timestamp in destination time zone.</para>
            </returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.TimeZoneToTimeZone(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
            <summary>Converts given timestamp from one time zone to another.</summary>
            <param name="timestamp">Timestamp in source time zone to be converted to time in destination time
            zone.</param>
            <param name="sourceTimeZone">Time zone for given source timestamp.</param>
            <param name="destinationTimeZone">Desired end time zone for given source timestamp.</param>
            <returns>
            <para>Timestamp in destination time zone.</para>
            </returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.AbbreviatedMonthName(System.DateTime)">
            <summary>Gets the abbreviated month name for month of the timestamp.</summary>
            <param name="timestamp">Timestamp from which month name is extracted.</param>
            <returns>String representation of the month name based on <paramref name="timestamp"/></returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.MonthName(System.DateTime)">
            <summary>Gets the full month name for month of the timestamp.</summary>
            <param name="timestamp">Timestamp from which month name is extracted.</param>
            <returns>String representation of the month name based on <paramref name="timestamp"/></returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.AbbreviatedWeekdayName(System.DateTime)">
            <summary>Gets the abbreviated weekday name for weekday of the timestamp.</summary>
            <param name="timestamp">Timestamp from which weekday name is extracted.</param>
            <returns>String representation of the weekday name based on <paramref name="timestamp"/></returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.ShortWeekdayName(System.DateTime)">
            <summary>Gets the shortest weekday name for weekday of the timestamp.</summary>
            <param name="timestamp">Timestamp from which weekday name is extracted.</param>
            <returns>String representation of the short weekday name based on <paramref name="timestamp"/></returns>
        </member>
        <member name="M:TVA.DateTimeExtensions.WeekdayName(System.DateTime)">
            <summary>Gets the full weekday name for weekday of the timestamp.</summary>
            <param name="timestamp">Timestamp from which weekday name is extracted.</param>
            <returns>String representation of the weekday name based on <paramref name="timestamp"/></returns>
        </member>
        <member name="T:TVA.Console.Arguments">
             <summary>
             Represents an ordered set of arguments along with optional arguments parsed from a command-line.
             </summary>
             <example>
             This example shows how to parse a command-line command that does not contain an executable name:
             <code>
             using System;
             using TVA;
             using TVA.Console;
            
             class Program
             {
                 static void Main()
                 {
                     Arguments args = new Arguments("Sample.txt -wrap=true");
                     string file = args["OrderedArg1"];
                     bool wrapText = args["wrap"].ParseBoolean();
                    
                     Console.WriteLine(string.Format("File: {0}", file));
                     Console.WriteLine(string.Format("Wrap text: {0}", wrapText));
                     Console.ReadLine();
                 }
             }
             </code>
             This example shows how to parse a command-line command that contains an executable name in it:
             <code>
             using System;
             using TVA.Console;
            
             class Program
             {
                 static void Main()
                 {
                     // Environment.CommandLine = @"""c:\program files\tva\theme application\app.exe"" Document1.dcx -theme=default"
                     Arguments args = new Arguments(Environment.CommandLine, true);
                     string doc = args["OrderedArg1"];
                     string theme = args["theme"];
                    
                     Console.WriteLine(string.Format("Document: {0}", doc));
                     Console.WriteLine(string.Format("Application theme: {0}", theme));
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Console.Arguments.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Console.Arguments"/> class.
            </summary>
            <param name="commandLine">The command-line command to be parsed.</param>
        </member>
        <member name="M:TVA.Console.Arguments.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Console.Arguments"/> class.
            </summary>
            <param name="commandLine">The command-line command to be parsed.</param>
            <param name="skipFirstArgument">true if the first argument in the command-line command is to be skipped from being processed; otherwise false.</param>
        </member>
        <member name="M:TVA.Console.Arguments.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Console.Arguments"/> class.
            </summary>
            <param name="commandLine">The command-line command to be parsed.</param>
            <param name="orderedArgID">The prefix to be used in the identifier of ordered arguments.</param>
        </member>
        <member name="M:TVA.Console.Arguments.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Console.Arguments"/> class.
            </summary>
            <param name="commandLine">The command-line command to be parsed.</param>
            <param name="orderedArgID">The prefix to be used in the identifier of ordered arguments.</param>
            <param name="skipFirstArgument">true if the first argument in the command-line command is to be skipped from being processed; otherwise false.</param>
        </member>
        <member name="M:TVA.Console.Arguments.Exists(System.String)">
            <summary>
            Gets a boolean value that indicates whether the specified argument is present in the command-line command.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <returns>true if the argument exists in the command-line command; otherwise false.</returns>
        </member>
        <member name="M:TVA.Console.Arguments.ToString">
            <summary>
            Gets a string representation of the <see cref="T:TVA.Console.Arguments"/> object.
            </summary>
            <returns>A string representation of the <see cref="T:TVA.Console.Arguments"/> object.</returns>
        </member>
        <member name="M:TVA.Console.Arguments.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> for iterating through all the command-line command arguments.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the command-line command arguments.</returns>
        </member>
        <member name="M:TVA.Console.Arguments.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> for iterating through all the command-line command arguments.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the command-line command arguments.</returns>
        </member>
        <member name="M:TVA.Console.Arguments.ParseCommand(System.String)">
            <summary>
            This function can be used to parse a single parameterized string and turn it into an array of parameters.
            </summary>
            <param name="command">String of parameters.</param>
            <returns>Array of parameters.</returns>
        </member>
        <member name="P:TVA.Console.Arguments.Item(System.String)">
            <summary>
            Gets the value for the specified argument from the command-line command.
            </summary>
            <param name="argument">The argument whose value is to retrieved.</param>
            <returns>Value for the specified argument if found; otherwise null.</returns>
        </member>
        <member name="P:TVA.Console.Arguments.Count">
            <summary>
            Gets the total number of arguments (ordered and optional) present in the command-line command.
            </summary>
        </member>
        <member name="P:TVA.Console.Arguments.OrderedArgID">
            <summary>
            Gets the prefix text in the identifier of ordered arguments present in the command-line command.
            </summary>
        </member>
        <member name="P:TVA.Console.Arguments.OrderedArgCount">
            <summary>
            Gets the total number of ordered arguments in the command-line command.
            </summary>
        </member>
        <member name="P:TVA.Console.Arguments.ContainsHelpRequest">
            <summary>
            Gets a boolean value that indicates whether the command-line command contains request for displaying help.
            </summary>
        </member>
        <member name="P:TVA.Console.Arguments.InternalDictionary">
            <summary>
            Gets the dictionary containing all of the arguments present in the command-line command.
            </summary>
        </member>
        <member name="T:TVA.CharExtensions">
            <summary>
            Defines extension functions related to character manipulation.
            </summary>
        </member>
        <member name="M:TVA.CharExtensions.RegexEncode(System.Char)">
            <summary>
            Encodes the specified Unicode character in proper Regular Expression format.
            </summary>
            <param name="item">Unicode character to encode in Regular Expression format.</param>
            <returns>Specified Unicode character in proper Regular Expression format.</returns>
        </member>
        <member name="M:TVA.CharExtensions.IsWordTerminator(System.Char)">
            <summary>
            Tests a character to determine if it marks the end of a typical english word.
            </summary>
            <param name="value">Input character to check.</param>
            <returns><c>true</c> if character is a work seperator.</returns>
            <remarks>
            Preforms no testing for ASCII codes &gt; 127.<br/>
            Does not seperate words based on punctuation of ' %  - _  <br/>
            However does include the angle bracket symbols &lt; &gt; as seperators<br/>
            <br/>
            For reference the standard char tests are:
            <ul>
            <li>"IsSperator (1) == simple space (32 or 160) only.</li>
            <li>IsPunctuation (23) == . , ! ? : ; " ' [ ] { } ( ) \ / @ % # * &amp; - _  (plus other char's &gt; 127)</li>
            <li>IsSymbol (8) == $ + &lt; &gt; = ^ ` ~</li>
            <li>IsWhiteSpace (6) == control char's 9 thry 13, plus 32 -- TAB, LF, VT, FF, CR, SP</li>
            </ul>
            </remarks>
        </member>
        <member name="M:TVA.CharExtensions.IsNumeric(System.Char)">
            <summary>
            Tests a character to determine if is a common part of a numeric string (digits or one of "+ - , .")
            </summary>
            <param name="value">The character to check.</param>
            <returns><c>true</c> if numeric character.</returns>
        </member>
        <member name="M:TVA.CharExtensions.IsAny(System.Char,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Determines if a character matches any character in a sent array.
            </summary>
            <param name="value">The character to check.</param>
            <param name="testChars">The array of characters to test.</param>
            <returns>Boolean value indicating a that the character is in the array.</returns>
        </member>
        <member name="M:TVA.CharExtensions.IsInRange(System.Char,System.Char,System.Char)">
            <summary>
            Tests a character to determine if it is between a specified character range
            </summary>
            <param name="value">Input character to process.</param>
            <param name="startOfRange">Beginning of range character.</param>
            <param name="endOfRange">End of range character.</param>
            <returns><c>true</c> is the character is within the range.</returns>
        </member>
        <member name="T:TVA.Adapters.IAdapter">
            <summary>
            Defines an adapter that could execute in isolation in a seperate <see cref="T:System.AppDomain"/>.
            </summary>
        </member>
        <member name="P:TVA.Adapters.IAdapter.Domain">
            <summary>
            Gets the <see cref="T:System.AppDomain"/> in which the adapter is executing.
            </summary>
        </member>
        <member name="P:TVA.Adapters.IAdapter.MemoryUsage">
            <summary>
            Gets the memory utilzation of the adapter in bytes if executing in a seperate <see cref="T:System.AppDomain"/>, otherwise <see cref="F:System.Double.NaN"/>.
            </summary>
        </member>
        <member name="P:TVA.Adapters.IAdapter.ProcessorUsage">
            <summary>
            Gets the % processor utilization of the adapter if executing in a seperate <see cref="T:System.AppDomain"/> otherwise <see cref="F:System.Double.NaN"/>.
            </summary>
        </member>
        <member name="T:TVA.UInt24">
            <summary>Represents a 3-byte, 24-bit unsigned integer.</summary>
            <remarks>
            <para>
            This class behaves like most other intrinsic unsigned integers but allows a 3-byte, 24-bit integer implementation
            that is often found in many digital-signal processing arenas and different kinds of protocol parsing.  An unsigned
            24-bit integer is typically used to save storage space on disk where its value range of 0 to 16777215 is sufficient,
            but the unsigned Int16 value range of 0 to 65535 is too small.
            </para>
            <para>
            This structure uses an UInt32 internally for storage and most other common expected integer functionality, so using
            a 24-bit integer will not save memory.  However, if the 24-bit unsigned integer range (0 to 16777215) suits your
            data needs you can save disk space by only storing the three bytes that this integer actually consumes.  You can do
            this by calling the UInt24.GetBytes function to return a three byte binary array that can be serialized to the desired
            destination and then calling the UInt24.GetValue function to restore the UInt24 value from those three bytes.
            </para>
            <para>
            All the standard operators for the UInt24 have been fully defined for use with both UInt24 and UInt32 unsigned integers;
            you should find that without the exception UInt24 can be compared and numerically calculated with an UInt24 or UInt32.
            Necessary casting should be minimal and typical use should be very simple - just as if you are using any other native
            unsigned integer.
            </para>
            </remarks>
        </member>
        <member name="F:TVA.UInt24.BitMask">
            <summary>High byte bit-mask used when a 24-bit integer is stored within a 32-bit integer. This field is constant.</summary>
        </member>
        <member name="M:TVA.UInt24.#ctor(TVA.UInt24)">
            <summary>Creates 24-bit unsigned integer from an existing 24-bit unsigned integer.</summary>
            <param name="value">A <see cref="T:TVA.UInt24"/> to create the new value from. </param>
        </member>
        <member name="M:TVA.UInt24.#ctor(System.UInt32)">
            <summary>Creates 24-bit unsigned integer from a 32-bit unsigned integer.</summary>
            <param name="value">32-bit unsigned integer to use as new 24-bit unsigned integer value.</param>
            <exception cref="T:System.OverflowException">Source values over 24-bit max range will cause an overflow exception.</exception>
        </member>
        <member name="M:TVA.UInt24.#ctor(System.Byte[],System.Int32)">
            <summary>Creates 24-bit unsigned integer from three bytes at a specified position in a byte array.</summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within <paramref name="value"/>.</param>
            <remarks>
            <para>You can use this constructor in-lieu of a System.BitConverter.ToUInt24 function.</para>
            <para>Bytes endian order assumed to match that of currently executing process architecture (little-endian on Intel platforms).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is greater than <paramref name="value"/> length.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> length from <paramref name="startIndex"/> is too small to represent a <see cref="T:TVA.UInt24"/>.</exception>
        </member>
        <member name="M:TVA.UInt24.GetBytes">
            <summary>Returns the UInt24 value as an array of three bytes.</summary>
            <returns>An array of bytes with length 3.</returns>
            <remarks>
            <para>You can use this function in-lieu of a System.BitConverter.GetBytes function.</para>
            <para>Bytes will be returned in endian order of currently executing process architecture (little-endian on Intel platforms).</para>
            </remarks>
        </member>
        <member name="M:TVA.UInt24.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not an UInt32 or UInt24.</exception>
        </member>
        <member name="M:TVA.UInt24.CompareTo(TVA.UInt24)">
            <summary>
            Compares this instance to a specified 24-bit unsigned integer and returns an indication of their
            relative values.
            </summary>
            <param name="value">An integer to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.UInt24.CompareTo(System.UInt32)">
            <summary>
            Compares this instance to a specified 32-bit unsigned integer and returns an indication of their
            relative values.
            </summary>
            <param name="value">An integer to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.UInt24.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of UInt32 or UInt24 and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.UInt24.Equals(TVA.UInt24)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified UInt24 value.
            </summary>
            <param name="obj">An UInt24 value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.UInt24.Equals(System.UInt32)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified uint value.
            </summary>
            <param name="obj">An UInt32 value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.UInt24.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit unsigned integer hash code.
            </returns>
        </member>
        <member name="M:TVA.UInt24.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.UInt24.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.UInt24.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.UInt24.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.UInt24.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 24-bit unsigned integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.UInt24.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its 24-bit unsigned integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
            <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.UInt24.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its 24-bit
            unsigned integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.UInt24.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 24-bit
            unsigned integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A 24-bit unsigned integer equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.UInt24.TryParse(System.String,TVA.UInt24@)">
            <summary>
            Converts the string representation of a number to its 24-bit unsigned integer equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the 24-bit unsigned integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than UInt24.MinValue or greater than UInt24.MaxValue.
            This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.UInt24.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.UInt24@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            24-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            A typical value to specify is System.Globalization.NumberStyles.Integer.
            </param>
            <param name="result">
            When this method returns, contains the 24-bit unsigned integer value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than UInt24.MinValue or greater than
            UInt24.MaxValue. This parameter is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.UInt24.GetTypeCode">
            <summary>
            Returns the System.TypeCode for value type System.UInt32 (there is no defined type code for an UInt24).
            </summary>
            <returns>The enumerated constant, System.TypeCode.UInt32.</returns>
            <remarks>
            There is no defined UInt24 type code and since an UInt24 will easily fit inside an UInt32, the
            UInt32 type code is returned.
            </remarks>
        </member>
        <member name="M:TVA.UInt24.op_Equality(TVA.UInt24,TVA.UInt24)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Equality(System.UInt32,TVA.UInt24)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Equality(TVA.UInt24,System.UInt32)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Inequality(TVA.UInt24,TVA.UInt24)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Inequality(System.UInt32,TVA.UInt24)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Inequality(TVA.UInt24,System.UInt32)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_LessThan(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_LessThan(System.UInt32,TVA.UInt24)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_LessThan(TVA.UInt24,System.UInt32)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_LessThanOrEqual(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_LessThanOrEqual(System.UInt32,TVA.UInt24)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_LessThanOrEqual(TVA.UInt24,System.UInt32)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_GreaterThan(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_GreaterThan(System.UInt32,TVA.UInt24)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_GreaterThan(TVA.UInt24,System.UInt32)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_GreaterThanOrEqual(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_GreaterThanOrEqual(System.UInt32,TVA.UInt24)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_GreaterThanOrEqual(TVA.UInt24,System.UInt32)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(System.Enum)~TVA.UInt24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.Enum"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(System.String)~TVA.UInt24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.String"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(System.Decimal)~TVA.UInt24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.Decimal"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(System.Double)~TVA.UInt24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.Double"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(System.Single)~TVA.UInt24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.Single"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(System.UInt64)~TVA.UInt24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt64"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(System.UInt32)~TVA.UInt24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt32"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(TVA.Int24)~TVA.UInt24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(TVA.UInt24)~TVA.Int24">
            <summary>
            Explicitly converts value to an <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:TVA.Int24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(TVA.UInt24)~System.Int16">
            <summary>
            Explicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.Int16"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(TVA.UInt24)~System.UInt16">
            <summary>
            Explicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.UInt16"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Explicit(TVA.UInt24)~System.Byte">
            <summary>
            Explicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.Byte"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(System.Byte)~TVA.UInt24">
            <summary>
            Implicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(System.Char)~TVA.UInt24">
            <summary>
            Implicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.Char"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(System.UInt16)~TVA.UInt24">
            <summary>
            Implicitly converts value to an <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt16"/> value to be converted.</param>
            <returns><see cref="T:TVA.UInt24"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(TVA.UInt24)~System.Int32">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.Int32"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(TVA.UInt24)~System.UInt32">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.UInt32"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(TVA.UInt24)~System.Int64">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.Int64"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(TVA.UInt24)~System.UInt64">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.UInt64"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(TVA.UInt24)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.Double"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(TVA.UInt24)~System.Single">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.Single"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(TVA.UInt24)~System.Decimal">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.Decimal"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Implicit(TVA.UInt24)~System.String">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to be converted.</param>
            <returns><see cref="T:System.String"/> value that is the result of the conversion.</returns>
        </member>
        <member name="M:TVA.UInt24.op_True(TVA.UInt24)">
            <summary>
            Returns true if value is greater than zero.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to evaluate.</param>
            <returns><see cref="T:System.Boolean"/> value indicating whether the value is greater than zero.</returns>
        </member>
        <member name="M:TVA.UInt24.op_False(TVA.UInt24)">
            <summary>
            Returns true if value is equal to zero.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to evaluate.</param>
            <returns><see cref="T:System.Boolean"/> value indicating whether the value is equal than zero.</returns>
        </member>
        <member name="M:TVA.UInt24.op_OnesComplement(TVA.UInt24)">
            <summary>
            Returns bitwise complement of value.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to evaluate.</param>
            <returns><see cref="T:TVA.UInt24"/> value representing the complement of the input value.</returns>
        </member>
        <member name="M:TVA.UInt24.op_BitwiseAnd(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns logical bitwise AND of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:TVA.UInt24"/> value representing the logical bitwise AND of the values.</returns>
        </member>
        <member name="M:TVA.UInt24.op_BitwiseAnd(System.UInt32,TVA.UInt24)">
            <summary>
            Returns logical bitwise AND of values.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value representing the logical bitwise AND of the values.</returns>
        </member>
        <member name="M:TVA.UInt24.op_BitwiseAnd(TVA.UInt24,System.UInt32)">
            <summary>
            Returns logical bitwise AND of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value representing the logical bitwise AND of the values.</returns>
        </member>
        <member name="M:TVA.UInt24.op_BitwiseOr(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns logical bitwise OR of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:TVA.UInt24"/> value representing the logical bitwise OR of the values.</returns>
        </member>
        <member name="M:TVA.UInt24.op_BitwiseOr(System.UInt32,TVA.UInt24)">
            <summary>
            Returns logical bitwise OR of values.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value representing the logical bitwise OR of the values.</returns>
        </member>
        <member name="M:TVA.UInt24.op_BitwiseOr(TVA.UInt24,System.UInt32)">
            <summary>
            Returns logical bitwise OR of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value representing the logical bitwise OR of the values.</returns>
        </member>
        <member name="M:TVA.UInt24.op_ExclusiveOr(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:TVA.UInt24"/> value representing the logical bitwise exclusive-OR of the values.</returns>
        </member>
        <member name="M:TVA.UInt24.op_ExclusiveOr(System.UInt32,TVA.UInt24)">
            <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value representing the logical bitwise exclusive-OR of the values.</returns>
        </member>
        <member name="M:TVA.UInt24.op_ExclusiveOr(TVA.UInt24,System.UInt32)">
            <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value representing the logical bitwise exclusive-OR of the values.</returns>
        </member>
        <member name="M:TVA.UInt24.op_RightShift(TVA.UInt24,System.Int32)">
            <summary>
            Returns value after right shifts of first value by the number of bits specified by second value.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to right shift.</param>
            <param name="shifts"><see cref="T:System.Int32"/> value indicating the number of bits to right shift by.</param>
            <returns><see cref="T:TVA.UInt24"/> value as result of right shift operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_LeftShift(TVA.UInt24,System.Int32)">
            <summary>
            Returns value after left shifts of first value by the number of bits specified by second value.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> value to left shift.</param>
            <param name="shifts"><see cref="T:System.Int32"/> value indicating the number of bits to left shift by.</param>
            <returns><see cref="T:TVA.UInt24"/> value as result of left shift operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Modulus(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:TVA.UInt24"/> value as result of modulus operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Modulus(System.UInt32,TVA.UInt24)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of modulus operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Modulus(TVA.UInt24,System.UInt32)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of modulus operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Addition(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:TVA.UInt24"/> value as result of addition operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Addition(System.UInt32,TVA.UInt24)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of addition operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Addition(TVA.UInt24,System.UInt32)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of addition operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Subtraction(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:TVA.UInt24"/> value as result of subtraction operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Subtraction(System.UInt32,TVA.UInt24)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of subtraction operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Subtraction(TVA.UInt24,System.UInt32)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of subtraction operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Increment(TVA.UInt24)">
            <summary>
            Returns incremented value.
            </summary>
            <param name="value">The operand.</param>
            <returns><see cref="T:TVA.UInt24"/> result of increment.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Decrement(TVA.UInt24)">
            <summary>
            Returns decremented value.
            </summary>
            <param name="value">The operand.</param>
            <returns><see cref="T:TVA.UInt24"/> result of decrement.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Multiply(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:TVA.UInt24"/> value as result of multiplication operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Multiply(System.UInt32,TVA.UInt24)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of multiplication operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Multiply(TVA.UInt24,System.UInt32)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of multiplication operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Division(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:TVA.UInt24"/> value as result of division operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Division(System.UInt32,TVA.UInt24)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of division operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Division(TVA.UInt24,System.UInt32)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.UInt32"/> value as result of division operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Exponent(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Double"/> value as result of operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Exponent(System.Int32,TVA.UInt24)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1"><see cref="T:System.UInt32"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.UInt24"/> right hand operand.</param>
            <returns><see cref="T:System.Double"/> value as result of operation.</returns>
        </member>
        <member name="M:TVA.UInt24.op_Exponent(TVA.UInt24,System.Int32)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1"><see cref="T:TVA.UInt24"/> left hand operand.</param>
            <param name="value2"><see cref="T:System.UInt32"/> right hand operand.</param>
            <returns><see cref="T:System.Double"/> value as result of operation.</returns>
        </member>
        <member name="F:TVA.UInt24.MaxValue">
            <summary>
            Represents the largest possible value of an Int24. This field is constant.
            </summary>
        </member>
        <member name="F:TVA.UInt24.MinValue">
            <summary>
            Represents the smallest possible value of an Int24. This field is constant.
            </summary>
        </member>
        <member name="M:TVA.UInt24.GetBytes(TVA.UInt24)">
            <summary>Returns the specified UInt24 value as an array of three bytes.</summary>
            <param name="value">UInt24 value to convert to bytes.</param>
            <returns>An array of bytes with length 3.</returns>
            <remarks>
            <para>You can use this function in-lieu of a System.BitConverter.GetBytes(UInt24) function.</para>
            <para>Bytes will be returned in endian order of currently executing process architecture (little-endian on Intel platforms).</para>
            </remarks>
        </member>
        <member name="M:TVA.UInt24.GetValue(System.Byte[],System.Int32)">
            <summary>Returns a 24-bit unsigned integer from three bytes at a specified position in a byte array.</summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
            <remarks>
            <para>You can use this function in-lieu of a System.BitConverter.ToUInt24 function.</para>
            <para>Bytes endian order assumed to match that of currently executing process architecture (little-endian on Intel platforms).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is greater than <paramref name="value"/> length.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> length from <paramref name="startIndex"/> is too small to represent an <see cref="T:TVA.UInt24"/>.</exception>
        </member>
        <member name="T:TVA.NumericalAnalysis.CurveFit">
            <summary>
            Linear regression algorithm.
            </summary>
        </member>
        <member name="M:TVA.NumericalAnalysis.CurveFit.Compute(System.Int32,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Computes linear regression over given values.
            </summary>
            <param name="polynomialOrder">An <see cref="T:System.Int32"/> for the polynomial order.</param>
            <param name="values">A list of values.</param>
            <returns>An array of <see cref="T:System.Double"/> values.</returns>
        </member>
        <member name="M:TVA.NumericalAnalysis.CurveFit.Compute(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes linear regression over given values.
            </summary>
            <param name="polynomialOrder">An <see cref="T:System.Int32"/> for the polynomial order.</param>
            <param name="xValues">A list of <see cref="T:System.Double"/> x-values.</param>
            <param name="yValues">A list of <see cref="T:System.Double"/> y-values.</param>
            <returns>An array of <see cref="T:System.Double"/> values.</returns>
        </member>
        <member name="T:TVA.Net.Ftp.FtpExceptionBase">
            <summary>
            FTP exception base class.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpExceptionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Derserializes the <see cref="T:TVA.Net.Ftp.FtpExceptionBase"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
        </member>
        <member name="P:TVA.Net.Ftp.FtpExceptionBase.ResponseMessage">
            <summary>
            Response message related to exception, if any.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpInvalidResponseException">
            <summary>
            Invalid FTP response exception.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpAuthenticationException">
            <summary>
            FTP authentication exception.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpFileNotFoundException">
            <summary>
            FTP file not found exception.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpServerDownException">
            <summary>
            FTP server down exception.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpCommandException">
            <summary>
            FTP command exception.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpDataTransferException">
            <summary>
            FTP data transfer exception.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpUserAbortException">
            <summary>
            FTP user abort exception.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpResumeNotSupportedException">
            <summary>
            FTP resume not supported exception.
            </summary>
        </member>
        <member name="T:TVA.IO.IsamDataFileBase`1">
            <summary>
            An abstract class that defines the read/write capabilities for ISAM (Indexed Sequential Access Method) file.
            </summary>
            <typeparam name="T">
            <see cref="T:System.Type"/> of the records the file contains. This <see cref="T:System.Type"/> must implement the <see cref="T:TVA.Parsing.ISupportBinaryImage"/> interface.
            </typeparam>
            <remarks>
            <para>
            This ISAM implementation keeps all the records in memory, so it may not be suitable for very large files. Since data is stored
            in memory using a list, the maximum number of possible supported records will be 2,147,483,647 (i.e., Int32.MaxValue).
            </para>
            <para>
            See <a href="http://en.wikipedia.org/wiki/ISAM" target="_blank">http://en.wikipedia.org/wiki/ISAM</a> for more information on ISAM files.
            </para>
            </remarks>
            <example>
            This example shows a sample implementation of <see cref="T:TVA.IO.IsamDataFileBase`1"/>:
            <code>
            using System;
            using System.Text;
            using TVA;
            using TVA.IO;
            using TVA.Parsing;
            
            class Program
            {
                static void Main(string[] args)
                {
                    // Create a few test records.
                    TestIsamFileRecord r1 = new TestIsamFileRecord(1);
                    r1.Name = "TestRecord1";
                    r1.Value = double.MinValue;
                    r1.Description = "Test record with minimum double value";
                    TestIsamFileRecord r2 = new TestIsamFileRecord(2);
                    r2.Name = "TestRecord2";
                    r2.Value = double.MaxValue;
                    r2.Description = "Test record with maximum double value";
            
                    // Open ISAM file.
                    TestIsamFile testFile = new TestIsamFile();
                    testFile.FileName = "TestIsamFile.dat";
                    testFile.Open();
            
                    // Write test records.
                    testFile.Write(r1.Index, r1);
                    testFile.Write(r2.Index, r2);
            
                    // Read test records.
                    Console.WriteLine(testFile.Read(1));
                    Console.WriteLine(testFile.Read(2));
            
                    // Close ISAM file.
                    testFile.Close();
            
                    Console.ReadLine();
                }
            }
            
            class TestIsamFile : IsamDataFileBase&lt;TestIsamFileRecord&gt;
            {
                /// <summary>
                /// Size of a single file record.
                /// </summary>
                protected override int GetRecordSize()
                {
                    return TestIsamFileRecord.RecordLength;
                }
            
                /// <summary>
                /// Creates a new empty file record.
                /// </summary>
                protected override TestIsamFileRecord CreateNewRecord(int id)
                {
                    return new TestIsamFileRecord(id);
                }
            }
            
            class TestIsamFileRecord : ISupportBinaryImage
            {
                private int m_index;
                private string m_name;                  // 20  * 1 =  20
                private double m_value;                 // 1   * 8 =   8
                private string m_description;           // 100 * 1 = 100
                
                public const int RecordLength = 128;    // Total   = 128
            
                public TestIsamFileRecord(int recordIndex)
                {
                    m_index = recordIndex;
                    
                    Name = string.Empty;
                    Value = double.NaN;
                    Description = string.Empty;
                }
            
                /// <summary>
                /// 1-based index of the record.
                /// </summary>
                public int Index
                {
                    get { return m_index; }
                }
            
                /// <summary>
                /// Name of the record.
                /// </summary>
                public string Name
                {
                    get { return m_name; }
                    set { m_name = value.TruncateRight(20).PadRight(20); }
                }
            
                /// <summary>
                /// Value of the record.
                /// </summary>
                public double Value
                {
                    get { return m_value; }
                    set { m_value = value; }
                }
            
                /// <summary>
                /// Description of the record.
                /// </summary>
                public string Description
                {
                    get { return m_description; }
                    set { m_description = value.TruncateRight(100).PadRight(100); }
                }
            
                /// <summary>
                /// Serialized record length.
                /// </summary>
                public int BinaryLength
                {
                    get { return RecordLength; }
                }
            
                /// <summary>
                /// Serialized record data.
                /// </summary>
                public byte[] BinaryImage
                {
                    get
                    {
                        // Serialize TestIsamFileRecord into byte array.
                        byte[] image = new byte[RecordLength];
                        Buffer.BlockCopy(Encoding.ASCII.GetBytes(Name), 0, image, 0, 20);
                        Buffer.BlockCopy(BitConverter.GetBytes(Value), 0, image, 20, 8);
                        Buffer.BlockCopy(Encoding.ASCII.GetBytes(Description), 0, image, 28, 100);
            
                        return image;
                    }
                }
            
                /// <summary>
                /// Deserializes the record.
                /// </summary>
                public int Initialize(byte[] binaryImage, int startIndex, int length)
                {
                    if (length &gt;= RecordLength)
                    {
                        // Deserialize byte array into TestIsamFileRecord.
                        Name = Encoding.ASCII.GetString(binaryImage, startIndex, 20);
                        Value = BitConverter.ToDouble(binaryImage, startIndex + 20);
                        Description = Encoding.ASCII.GetString(binaryImage, startIndex + 28, 100);
                    }
                    else
                        throw new InvalidOperationException("Invalid record size, not enough data to deserialize record"); 
            
                    return RecordLength;
                }
            
                /// <summary>
                /// String representation of the record.
                /// </summary>
                public override string ToString()
                {
                    return string.Format("Name: {0}, Value: {1}, Description: {2}", Name, Value, Description);
                }
            }
            </code>
            </example>
        </member>
        <member name="F:TVA.IO.IsamDataFileBase`1.DefaultFileName">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.IsamDataFileBase`1.FileName"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.IsamDataFileBase`1.DefaultFileAccessMode">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.IsamDataFileBase`1.FileAccessMode"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.IsamDataFileBase`1.DefaultAutoSaveInterval">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.IsamDataFileBase`1.AutoSaveInterval"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.IsamDataFileBase`1.DefaultLoadOnOpen">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.IsamDataFileBase`1.LoadOnOpen"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.IsamDataFileBase`1.DefaultSaveOnClose">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.IsamDataFileBase`1.SaveOnClose"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.IsamDataFileBase`1.DefaultReloadOnModify">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.IsamDataFileBase`1.ReloadOnModify"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.IsamDataFileBase`1.DefaultPersistSettings">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.IsamDataFileBase`1.PersistSettings"/> property.
            </summary>
        </member>
        <member name="F:TVA.IO.IsamDataFileBase`1.DefaultSettingsCategory">
            <summary>
            Specifies the default value for the <see cref="P:TVA.IO.IsamDataFileBase`1.SettingsCategory"/> property.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.IO.IsamDataFileBase`1"/> class.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.GetRecordSize">
            <summary>
            When overridden in a derived class, gets the size of a record (in bytes).
            </summary>
            <returns>Size of a record in bytes.</returns>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.CreateNewRecord(System.Int32)">
            <summary>
            When overridden in a derived class, returns a new empty record.
            </summary>
            <param name="recordIndex">1-based index of the new record.</param>
            <returns>New empty record.</returns>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Initialize">
            <summary>
            Initializes the file.
            </summary>
            <remarks>
            <see cref="M:TVA.IO.IsamDataFileBase`1.Initialize"/> is to be called by user-code directly only if the file is not consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.BeginInit">
            <summary>
            Performs necessary operations before the file properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.IO.IsamDataFileBase`1.BeginInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the file is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.EndInit">
            <summary>
            Performs necessary operations after the file properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.IO.IsamDataFileBase`1.EndInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the file is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.SaveSettings">
            <summary>
            Saves settings of the file to the config file if the <see cref="P:TVA.IO.IsamDataFileBase`1.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.IO.IsamDataFileBase`1.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.LoadSettings">
            <summary>
            Loads saved settings of the file from the config file if the <see cref="P:TVA.IO.IsamDataFileBase`1.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.IO.IsamDataFileBase`1.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Open">
            <summary>
            Opens the file.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Close">
            <summary>
            Closes the file.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Load">
            <summary>
            Loads records from disk into memory.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Save">
            <summary>
            Saves records loaded in memory to disk.
            </summary>
            <remarks>
            <see cref="M:TVA.IO.IsamDataFileBase`1.Save"/> is equivalent to <see cref="M:System.IO.FileStream.Flush"/> when records are not loaded in memory.
            </remarks>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Write(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes specified records to disk if records were not loaded in memory otherwise updates the records in memory.
            </summary>
            <param name="records">Records to be written.</param>
            <remarks>
            This operation will causes existing records to be deleted and replaced with the ones specified.
            </remarks>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Write(System.Int32,`0)">
            <summary>
            Writes specified record to disk if records were not loaded in memory otherwise updates the record in memory.
            </summary>
            <param name="recordIndex">1-based index of the record to be written.</param>
            <param name="record">Record to be written.</param>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Read">
            <summary>
            Reads file records from disk if records were not loaded in memory otherwise returns the records in memory.
            </summary>
            <returns>Records of the file.</returns>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Read(System.Int32)">
            <summary>
            Reads specified file record from disk if records were not loaded in memory otherwise returns the record in memory.
            </summary>
            <param name="recordIndex">1-based index of the record to be read.</param>
            <returns>Record with the specified ID if it exists; otherwise null.</returns>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.OnFileModified">
            <summary>
            Raises the <see cref="E:TVA.IO.IsamDataFileBase`1.FileModified"/> event.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.OnDataLoading">
            <summary>
            Raises the <see cref="E:TVA.IO.IsamDataFileBase`1.DataLoading"/> event.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.OnDataLoaded">
            <summary>
            Raises the <see cref="E:TVA.IO.IsamDataFileBase`1.DataLoaded"/> event.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.OnDataSaving">
            <summary>
            Raises the <see cref="E:TVA.IO.IsamDataFileBase`1.DataSaving"/> event.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.OnDataSaved">
            <summary>
            Raises the <see cref="E:TVA.IO.IsamDataFileBase`1.DataSaved"/> event.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the file and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.ReOpen">
            <summary>
            Re-opens the file if currently open.
            </summary>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.WriteToDisk(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes records to disk.
            </summary>
            <param name="records">Records to be written to disk.</param>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.WriteToDisk(System.Int32,`0)">
            <summary>
            Writes single record to disk.
            </summary>
            <param name="recordIndex">1-based index of the record to be written to disk.</param>
            <param name="record">Record to be written to disk.</param>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.ReadFromDisk">
            <summary>
            Reads all records from disk.
            </summary>
            <returns>Records from disk.</returns>
        </member>
        <member name="M:TVA.IO.IsamDataFileBase`1.ReadFromDisk(System.Int32)">
            <summary>
            Read single record from disk.
            </summary>
            <param name="recordIndex">1-based index of the record to be read.</param>
            <returns>Record from the disk.</returns>
        </member>
        <member name="E:TVA.IO.IsamDataFileBase`1.DataLoading">
            <summary>
            Occurs when data is being read from disk into memory.
            </summary>
        </member>
        <member name="E:TVA.IO.IsamDataFileBase`1.DataLoaded">
            <summary>
            Occurs when data has been read from disk into memory.
            </summary>
        </member>
        <member name="E:TVA.IO.IsamDataFileBase`1.DataSaving">
            <summary>
            Occurs when data is being saved from memory onto disk.
            </summary>
        </member>
        <member name="E:TVA.IO.IsamDataFileBase`1.DataSaved">
            <summary>
            Occurs when data has been saved from memory onto disk.
            </summary>
        </member>
        <member name="E:TVA.IO.IsamDataFileBase`1.FileModified">
            <summary>
            Occurs when file data on the disk is modified.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <remarks>
            Changing the <see cref="P:TVA.IO.IsamDataFileBase`1.FileName"/> when the file is open will cause the file to be re-opend.
            </remarks>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.FileAccessMode">
            <summary>
            Gets or sets the <see cref="T:System.IO.FileAccess"/> value to use when opening the file.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.AutoSaveInterval">
            <summary>
            Gets or sets the interval in milliseconds at which the records loaded in memory are to be persisted to disk.
            </summary>
            <remarks>
            <see cref="P:TVA.IO.IsamDataFileBase`1.AutoSaveInterval"/> will be effective only if records have been loaded in memory either manually 
            by calling the <see cref="M:TVA.IO.IsamDataFileBase`1.Load"/> method or automatically by settings <see cref="P:TVA.IO.IsamDataFileBase`1.LoadOnOpen"/> to true.
            </remarks>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.LoadOnOpen">
            <summary>
            Gets or sets a boolean value that indicates whether records are to be loaded automatically in memory when 
            the file is opened.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.SaveOnClose">
            <summary>
            Gets or sets a boolean value that indicates whether records loaded in memory are to be persisted to disk 
            when the file is closed.
            </summary>
            <remarks>
            <see cref="P:TVA.IO.IsamDataFileBase`1.SaveOnClose"/> will be effective only if records have been loaded in memory either manually 
            by calling the <see cref="M:TVA.IO.IsamDataFileBase`1.Load"/> method or automatically by settings <see cref="P:TVA.IO.IsamDataFileBase`1.LoadOnOpen"/> to true.
            </remarks>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.ReloadOnModify">
            <summary>
            Gets or sets a boolean value that indicates whether records loaded in memory are to be re-loaded when the 
            file is modified on disk.
            </summary>
            <remarks>
            <see cref="P:TVA.IO.IsamDataFileBase`1.ReloadOnModify"/> will be effective only if records have been loaded in memory either manually 
            by calling the <see cref="M:TVA.IO.IsamDataFileBase`1.Load"/> method or automatically by settings <see cref="P:TVA.IO.IsamDataFileBase`1.LoadOnOpen"/> to true.
            </remarks>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.PersistSettings">
            <summary>
            Gets or sets a boolean value that indicates whether the file settings are to be saved to the config file.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.SettingsCategory">
            <summary>
            Gets or sets the category under which the file settings are to be saved to the config file if the 
            <see cref="P:TVA.IO.IsamDataFileBase`1.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the file is currently enabled.
            </summary>
            <remarks>
            Setting <see cref="P:TVA.IO.IsamDataFileBase`1.Enabled"/> to true will open the file if it is closed, setting
            to false will close the file if it is open.
            </remarks>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.IsOpen">
            <summary>
            Gets a boolean value that indicates whether the file is open.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.IsCorrupt">
            <summary>
            Gets a boolean value that indicates whether the file data on disk is corrupt.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.MemoryUsage">
            <summary>
            Gets the approximate memory consumption (in KB) of the file.
            </summary>
            <remarks>
            <see cref="P:TVA.IO.IsamDataFileBase`1.MemoryUsage"/> will be zero (0) unless records are loaded in memory.
            </remarks>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.RecordsOnDisk">
            <summary>
            Gets the number of file records on the disk.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.RecordsInMemory">
            <summary>
            Gets the number of file records loaded in memory.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.Name">
            <summary>
            Gets the unique identifier of the file.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.Status">
            <summary>
            Gets the descriptive status of the file.
            </summary>
        </member>
        <member name="P:TVA.IO.IsamDataFileBase`1.FileData">
            <summary>
            Gets the underlying <see cref="T:System.IO.FileStream"/> of the file.
            </summary>
            <remarks>
            Thread-safety Warning: A lock must be obtained on <see cref="P:TVA.IO.IsamDataFileBase`1.FileData"/> before accessing it.
            </remarks>
        </member>
        <member name="T:TVA.IO.Checksums.Xor64">
            <summary>Calculates quad-word length (64-bit) XOR-based check-sum on specified portion of a buffer.</summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor64.#ctor">
            <summary>
            Creates a new instance of the Xor64Bit class.
            The checksum starts off with a value of 0.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor64.Reset">
            <summary>
            Resets the checksum to the initial value.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor64.Update(System.UInt64)">
            <summary>
            Updates the checksum with a ulong value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to use for the update.</param>
        </member>
        <member name="M:TVA.IO.Checksums.Xor64.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:TVA.IO.Checksums.Xor64.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:TVA.IO.Checksums.Xor64.Value">
            <summary>
            Returns the Xor 64-bit checksum computed so far.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi">
            <summary>
            Defines common Windows API constants, enumerations, structures and functions.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.LOGON32_PROVIDER_DEFAULT">
            <summary>
            Use the standard logon provider for the system. The default security provider is NTLM. 
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.LOGON32_LOGON_INTERACTIVE">
            <summary>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on by a terminal server, 
            remote shell, or similar process. This logon type has the additional expense of caching logon information for disconnected operations; 
            therefore, it is inappropriate for some client/server applications, such as a mail server. 
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.LOGON32_LOGON_NETWORK">
            <summary>
            This logon type is intended for high performance servers to authenticate plaintext passwords. The LogonUserEx function does not cache
            credentials for this logon type. 
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SECURITY_IMPERSONATION">
            <summary>
            Impersonate a client at the impersonation level.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ERROR_ACCESS_DENIED">
            <summary>
            Access is denied.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.InitiateSystemShutdownEx(System.String,System.String,System.UInt32,System.Boolean,System.Boolean,TVA.Interop.WindowsApi.ShutdownReason)">
            <summary>
            Win32 InitiateSystemShutdownEx function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.GetShellWindow">
            <summary>
            Win32 GetShellWindow function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
            Win32 GetWindowThreadProcessId function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.OpenSCManager(System.String,System.String,System.Int32)">
            <summary>
            Win32 OpenSCManager function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.OpenService(System.IntPtr,System.String,System.Int32)">
            <summary>
            Win32 OpenService function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.LockServiceDatabase(System.IntPtr)">
            <summary>
            Win32 LockServiceDatabase function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.ChangeServiceConfig2(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Win32 ChangeServiceConfig2 function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.ChangeServiceConfig2(System.IntPtr,System.Int32,TVA.Interop.WindowsApi.SERVICE_DESCRIPTION@)">
            <summary>
            Win32 ChangeServiceConfig2 function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.ChangeServiceConfig2(System.IntPtr,System.Int32,TVA.Interop.WindowsApi.SERVICE_FAILURE_ACTIONS_FLAG@)">
            <summary>
            Win32 ChangeServiceConfig2 function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.CloseServiceHandle(System.IntPtr)">
            <summary>
            Win32 CloseServiceHandle function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.UnlockServiceDatabase(System.IntPtr)">
            <summary>
            Win32 UnlockServiceDatabase function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.GetLastError">
            <summary>
            Win32 GetLastError function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.GetTokenInformation(System.IntPtr,TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS,System.UInt32@,System.UInt32,System.UInt32@)">
            <summary>
            Win32 GetTokenInformation function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.GetTokenInformation(System.IntPtr,TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS,TVA.Interop.WindowsApi.TOKEN_ELEVATION_TYPE@,System.UInt32,System.UInt32@)">
            <summary>
            Win32 GetTokenInformation function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Win32 LogonUser function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.CreateProcessWithTokenW(System.IntPtr,TVA.Interop.WindowsApi.LogonFlags,System.String,System.String,TVA.Interop.WindowsApi.CreationFlags,System.IntPtr,System.String,TVA.Interop.WindowsApi.STARTUPINFO@,TVA.Interop.WindowsApi.PROCESS_INFORMATION@)">
            <summary>
            Win32 CreateProcessWithTokenW function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.DuplicateToken(System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
            Win32 DuplicateToken function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.DuplicateTokenEx(System.IntPtr,System.UInt32,TVA.Interop.WindowsApi.SECURITY_ATTRIBUTES@,TVA.Interop.WindowsApi.SECURITY_IMPERSONATION_LEVEL,TVA.Interop.WindowsApi.TOKEN_TYPE,System.IntPtr@)">
            <summary>
            Win32 DuplicateTokenEx function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.DuplicateTokenEx(System.IntPtr,System.UInt32,System.IntPtr,TVA.Interop.WindowsApi.SECURITY_IMPERSONATION_LEVEL,TVA.Interop.WindowsApi.TOKEN_TYPE,System.IntPtr@)">
            <summary>
            Win32 DuplicateTokenEx function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.AdjustTokenPrivileges(System.IntPtr,System.Boolean,TVA.Interop.WindowsApi.TOKEN_PRIVILEGES@,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Win32 AdjustTokenPrivileges function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.LookupPrivilegeValue(System.String,System.String,System.Int64@)">
            <summary>
            Win32 LookupPrivilegeValue function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.OpenProcessToken(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Win32 OpenProcessToken function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.OpenProcess(TVA.Interop.WindowsApi.ProcessAccessTypes,System.Boolean,System.UInt32)">
            <summary>
            Win32 OpenProcess function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.GetCurrentProcess">
            <summary>
            Win32 GetCurrentProcess function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.CloseHandle(System.IntPtr)">
            <summary>
            Win32 CloseHandle function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr@)">
            <summary>
            Win32 FormatMessage function.
            </summary>
        </member>
        <member name="M:TVA.Interop.WindowsApi.GetErrorMessage(System.Int32)">
            <summary>
            Formats and returns a .NET string containing the Windows API level error message corresponding to the specified error code.
            </summary>
            <param name="errorCode">An <see cref="T:System.Int32"/> value corresponding to the specified error code.</param>
            <returns>A formatted error message corresponding to the specified error code.</returns>
        </member>
        <member name="M:TVA.Interop.WindowsApi.GetLastErrorMessage">
            <summary>
            Formats and returns a .NET string containing the Windows API level error message from the last Win32 call.
            </summary>
            <returns>A formatted error message corresponding to the last Win32 call error code.</returns>
        </member>
        <member name="T:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS">
            <summary>
            Win32 TOKEN_INFORMATION_CLASS enumeration.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenUser">
            <summary>
            The buffer receives a TOKEN_USER structure that contains the user account of the token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenGroups">
            <summary>
            The buffer receives a TOKEN_GROUPS structure that contains the group accounts associated with the token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenPrivileges">
            <summary>
            The buffer receives a TOKEN_PRIVILEGES structure that contains the privileges of the token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenOwner">
            <summary>
            The buffer receives a TOKEN_OWNER structure that contains the default owner security identifier (SID) for newly created objects.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenPrimaryGroup">
            <summary>
            The buffer receives a TOKEN_PRIMARY_GROUP structure that contains the default primary group SID for newly created objects.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenDefaultDacl">
            <summary>
            The buffer receives a TOKEN_DEFAULT_DACL structure that contains the default DACL for newly created objects.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenSource">
            <summary>
            The buffer receives a TOKEN_SOURCE structure that contains the source of the token. TOKEN_QUERY_SOURCE access is needed to retrieve this information.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenType">
            <summary>
            The buffer receives a TOKEN_TYPE value that indicates whether the token is a primary or impersonation token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenImpersonationLevel">
            <summary>
            The buffer receives a SECURITY_IMPERSONATION_LEVEL value that indicates the impersonation level of the token. If the access token is not an impersonation token, the function fails.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenStatistics">
            <summary>
            The buffer receives a TOKEN_STATISTICS structure that contains various token statistics.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenRestrictedSids">
            <summary>
            The buffer receives a TOKEN_GROUPS structure that contains the list of restricting SIDs in a restricted token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenSessionId">
            <summary>
            The buffer receives a DWORD value that indicates the Terminal Services session identifier that is associated with the token. 
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenGroupsAndPrivileges">
            <summary>
            The buffer receives a TOKEN_GROUPS_AND_PRIVILEGES structure that contains the user SID, the group accounts, the restricted SIDs, and the authentication ID associated with the token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenSessionReference">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenSandBoxInert">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token includes the SANDBOX_INERT flag.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenAuditPolicy">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenOrigin">
            <summary>
            The buffer receives a TOKEN_ORIGIN value. 
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenElevationType">
            <summary>
            The buffer receives a TOKEN_ELEVATION_TYPE value that specifies the elevation level of the token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenLinkedToken">
            <summary>
            The buffer receives a TOKEN_LINKED_TOKEN structure that contains a handle to another token that is linked to this token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenElevation">
            <summary>
            The buffer receives a TOKEN_ELEVATION structure that specifies whether the token is elevated.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenHasRestrictions">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token has ever been filtered.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenAccessInformation">
            <summary>
            The buffer receives a TOKEN_ACCESS_INFORMATION structure that specifies security information contained in the token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenVirtualizationAllowed">
            <summary>
            The buffer receives a DWORD value that is nonzero if virtualization is allowed for the token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenVirtualizationEnabled">
            <summary>
            The buffer receives a DWORD value that is nonzero if virtualization is enabled for the token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenIntegrityLevel">
            <summary>
            The buffer receives a TOKEN_MANDATORY_LABEL structure that specifies the token's integrity level. 
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenUIAccess">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token has the UIAccess flag set.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenMandatoryPolicy">
            <summary>
            The buffer receives a TOKEN_MANDATORY_POLICY structure that specifies the token's mandatory integrity policy.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.TokenLogonSid">
            <summary>
            The buffer receives the token's logon security identifier (SID).
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_INFORMATION_CLASS.MaxTokenInfoClass">
            <summary>
            The maximum value for this enumeration
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.ProcessAccessTypes">
            <summary>
            Win32 ProcessAccessTypes enumeration.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_TERMINATE">
            <summary
            >Enables usage of the process handle in the TerminateProcess function to terminate the process.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_CREATE_THREAD">
            <summary>
            Enables usage of the process handle in the CreateRemoteThread function to create a thread in the process.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_SET_SESSIONID">
            <summary>
            Sets the session ID.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_VM_OPERATION">
            <summary>
            Enables usage of the process handle in the VirtualProtectEx and WriteProcessMemory functions to modify the virtual memory of the process.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_VM_READ">
            <summary>
            Enables usage of the process handle in the ReadProcessMemory function to read from the virtual memory of the process.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_VM_WRITE">
            <summary>
            Enables usage of the process handle in the WriteProcessMemory function to write to the virtual memory of the process.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_DUP_HANDLE">
            <summary>
            Enables usage of the process handle as either the source or target process in the DuplicateHandle function to duplicate a handle.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_CREATE_PROCESS">
            <summary>
            Creates a process.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_SET_QUOTA">
            <summary>
            Sets quota.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_SET_INFORMATION">
            <summary>
            Enables usage of the process handle in the SetPriorityClass function to set the priority class of the process.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_QUERY_INFORMATION">
            <summary>
            Enables usage of the process handle in the GetExitCodeProcess and GetPriorityClass functions to read information from the process object.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.STANDARD_RIGHTS_REQUIRED">
            <summary>
            Standard rights required.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.SYNCHRONIZE">
            <summary>
            Enables usage of the process handle in any of the wait functions to wait for the process to terminate.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.ProcessAccessTypes.PROCESS_ALL_ACCESS">
            <summary>
            Specifies all possible access flags for the process object.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.ShutdownReason">
            <summary>
            Win32 ShutdownReason enumeration.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.SECURITY_IMPERSONATION_LEVEL">
            <summary>
            Win32 SECURITY_IMPERSONATION_LEVEL enumeration.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.TOKEN_TYPE">
            <summary>
            Win32 TOKEN_TYPE enumeration.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.TOKEN_ELEVATION_TYPE">
            <summary>
            Win32 TOKEN_ELEVATION_TYPE enumeration.
            </summary>
            <remarks>
            Enumeration indicates the elevation type of token being queried by the GetTokenInformation function or set by the SetTokenInformation function.
            </remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_ELEVATION_TYPE.TokenElevationTypeDefault">
            <summary>
            The token does not have a linked token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_ELEVATION_TYPE.TokenElevationTypeFull">
            <summary>
            The token is an elevated token.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_ELEVATION_TYPE.TokenElevationTypeLimited">
            <summary>
            The token is a limited token.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.SC_ACTION_TYPE">
            <summary>
            Win32 SC_ACTION_TYPE enumeration.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SC_ACTION_TYPE.SC_ACTION_NONE">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SC_ACTION_TYPE.SC_ACTION_RESTART">
            <summary>
            Restart the service.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SC_ACTION_TYPE.SC_ACTION_REBOOT">
            <summary>
            Reboot the computer.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SC_ACTION_TYPE.SC_ACTION_RUN_COMMAND">
            <summary>
            Run a command.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.CreationFlags">
            <summary>
            Win32 CreationFlags enumeration.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.LogonFlags">
            <summary>
            Win32 LogonFlags enumeration.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.LogonFlags.WithProfile">
            <summary>
            Log on, then load the user's profile in the HKEY_USERS registry key. The function
            returns after the profile has been loaded. Loading the profile can be time-consuming,
            so it is best to use this value only if you must access the information in the 
            HKEY_CURRENT_USER registry key. 
            NOTE: Windows Server 2003: The profile is unloaded after the new process has been
            terminated, regardless of whether it has created child processes.
            </summary>
            <remarks>See LOGON_WITH_PROFILE</remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.LogonFlags.NetCredentialsOnly">
            <summary>
            Log on, but use the specified credentials on the network only. The new process uses the
            same token as the caller, but the system creates a new logon session within LSA, and
            the process uses the specified credentials as the default credentials.
            This value can be used to create a process that uses a different set of credentials
            locally than it does remotely. This is useful in inter-domain scenarios where there is
            no trust relationship.
            The system does not validate the specified credentials. Therefore, the process can start,
            but it may not have access to network resources.
            </summary>
            <remarks>See LOGON_NETCREDENTIALS_ONLY</remarks>
        </member>
        <member name="T:TVA.Interop.WindowsApi.PROCESS_INFORMATION">
            <summary>
            Win32 PROCESS_INFORMATION structure.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.STARTUPINFO">
            <summary>
            Win32 STARTUPINFO structure.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.SERVICE_DESCRIPTION">
            <summary>
            Win32 SERVICE_DESCRIPTION structure.
            </summary>
            <remarks>
            <para>
            A description of NULL indicates no service description exists. The service description is NULL when the service is created.
            </para>
            <para>
            The description is simply a comment that explains the purpose of the service. For example, for the DHCP service,
            you could use the description "Provides internet addresses for computer on your network."
            </para>
            </remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SERVICE_DESCRIPTION.lpDescription">
            <summary>
            The description of the service.
            </summary>
            <remarks>
            If this member is NULL, the description remains unchanged. If this value is an empty string (""), the current description is deleted.
            </remarks>
        </member>
        <member name="T:TVA.Interop.WindowsApi.SC_ACTION">
            <summary>
            Win32 SC_ACTION structure.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SC_ACTION.Type">
            <summary>
            The <see cref="T:TVA.Interop.WindowsApi.SC_ACTION_TYPE"/> to be performed. 
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SC_ACTION.Delay">
            <summary>
            The time to wait before performing the specified action, in milliseconds.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.SERVICE_FAILURE_ACTIONS">
            <summary>
            Win32 SERVICE_FAILURE_ACTIONS structure.
            </summary>
            <remarks>
            Represents the action the service controller should take on each failure of a service. A service is considered failed
            when it terminates without reporting a status of SERVICE_STOPPED to the service controller.
            </remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SERVICE_FAILURE_ACTIONS.dwResetPeriod">
            <summary>
            The time after which to reset the failure count to zero if there are no failures, in seconds. Specify INFINITE to indicate that this value should never be reset.
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SERVICE_FAILURE_ACTIONS.lpRebootMsg">
            <summary>
            The message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action. 
            </summary>
            <remarks>
            If this value is NULL, the reboot message is unchanged. If the value is an empty string (""), the reboot message is deleted and no message is broadcast.
            </remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SERVICE_FAILURE_ACTIONS.lpCommand">
            <summary>
            The command line of the process for the CreateProcess function to execute in response to the SC_ACTION_RUN_COMMAND service controller action. This process runs under the same account as the service. 
            </summary>
            <remarks>
            If this value is NULL, the command is unchanged. If the value is an empty string (""), the command is deleted and no program is run when the service fails.
            </remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SERVICE_FAILURE_ACTIONS.cActions">
            <summary>
            The number of elements in the lpsaActions array. 
            </summary>
            <remarks>
            If this value is 0, but lpsaActions is not NULL, the reset period and array of failure actions are deleted. 
            </remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SERVICE_FAILURE_ACTIONS.lpsaActions">
            <summary>
            A pointer to an array of SC_ACTION structures. 
            </summary>
            <remarks>
            If this value is NULL, the cActions and dwResetPeriod members are ignored. 
            </remarks>
        </member>
        <member name="T:TVA.Interop.WindowsApi.SERVICE_FAILURE_ACTIONS_FLAG">
            <summary>
            Win32 SERVICE_FAILURE_ACTIONS_FLAG structure.
            </summary>
            <remarks>
            Contains the failure actions flag setting of a service. This setting determines when failure actions are to be executed.
            </remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.SERVICE_FAILURE_ACTIONS_FLAG.bFailureAction">
            <summary>
            If this member is TRUE and the service has configured failure actions, the failure actions are queued if the service process 
            terminates without reporting a status of SERVICE_STOPPED or if it enters the SERVICE_STOPPED state but the dwWin32ExitCode member
            of the SERVICE_STATUS structure is not ERROR_SUCCESS (0). If this member is FALSE and the service has configured failure actions,
            the failure actions are queued only if the service terminates without reporting a status of SERVICE_STOPPED.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.LUID_AND_ATTRIBUTES">
            <summary>
            Win32 LUID_AND_ATTRIBUTES structure.
            </summary>
            <remarks>
            An LUID_AND_ATTRIBUTES structure can represent an LUID whose attributes change frequently, 
            such as when the LUID is used to represent privileges in the PRIVILEGE_SET structure. 
            Privileges are represented by LUIDs and have attributes indicating whether they are currently enabled or disabled. 
            </remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.LUID_AND_ATTRIBUTES.Luid">
            <summary>
            Specifies an LUID value. 
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.LUID_AND_ATTRIBUTES.Attributes">
            <summary>
            Specifies attributes of the LUID. This value contains up to 32 one-bit flags. Its meaning is dependent on the definition and use of the LUID.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.TOKEN_PRIVILEGES">
            <summary>
            Win32 TOKEN_PRIVILEGES structure.
            </summary>
            <remarks>
            The TOKEN_PRIVILEGES structure contains information about a set of privileges for an access token. 
            </remarks>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_PRIVILEGES.PrivilegeCount">
            <summary>
            This must be set to the number of entries in the Privileges array. 
            </summary>
        </member>
        <member name="F:TVA.Interop.WindowsApi.TOKEN_PRIVILEGES.Privileges">
            <summary>
            Specifies an array of LUID_AND_ATTRIBUTES structures. Each structure contains the LUID and attributes of a privilege.
            </summary>
        </member>
        <member name="T:TVA.Interop.WindowsApi.SECURITY_ATTRIBUTES">
            <summary>
            Win32 SECURITY_ATTRIBUTES structure.
            </summary>
        </member>
        <member name="T:TVA.Collections.QueueThreadingMode">
            <summary>Enumeration of possible <see cref="T:TVA.Collections.ProcessQueue`1"/> threading modes.</summary>
        </member>
        <member name="F:TVA.Collections.QueueThreadingMode.Asynchronous">
            <summary>Processes several items in the <see cref="T:TVA.Collections.ProcessQueue`1"/> at once on different threads, where processing order is not
            important.</summary>
        </member>
        <member name="F:TVA.Collections.QueueThreadingMode.Synchronous">
            <summary>Processes items in the <see cref="T:TVA.Collections.ProcessQueue`1"/> one at a time on a single thread, where processing order is important.</summary>
        </member>
        <member name="T:TVA.Collections.QueueProcessingStyle">
            <summary>Enumeration of possible <see cref="T:TVA.Collections.ProcessQueue`1"/> processing styles.</summary>
        </member>
        <member name="F:TVA.Collections.QueueProcessingStyle.OneAtATime">
            <summary>Defines <see cref="T:TVA.Collections.ProcessQueue`1"/> processing delegate to process only one item at a time.</summary>
            <remarks>This is the typical <see cref="T:TVA.Collections.QueueProcessingStyle"/> when the <see cref="T:TVA.Collections.QueueThreadingMode"/> is asynchronous.</remarks>
        </member>
        <member name="F:TVA.Collections.QueueProcessingStyle.ManyAtOnce">
            <summary>Defines <see cref="T:TVA.Collections.ProcessQueue`1"/> processing delegate to process all currently available items in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. Items are
            passed into delegate as an array.</summary>
            <remarks>This is the optimal <see cref="T:TVA.Collections.QueueProcessingStyle"/> when the <see cref="T:TVA.Collections.QueueThreadingMode"/> is synchronous.</remarks>
        </member>
        <member name="T:TVA.Collections.RequeueMode">
            <summary>Enumeration of possible requeue modes.</summary>
        </member>
        <member name="F:TVA.Collections.RequeueMode.Prefix">
            <summary>Requeues item at the beginning of the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
        </member>
        <member name="F:TVA.Collections.RequeueMode.Suffix">
            <summary>Requeues item at the end of the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
        </member>
        <member name="T:TVA.Collections.ProcessQueue`1">
            <summary>
            Represents a collection of items that get processed on independent threads with
            a consumer provided function.
            </summary>
            <typeparam name="T">Type of object to process</typeparam>
            <remarks>
            <para>This class acts as a strongly-typed collection of objects to be processed.</para>
            <para>Consumers are expected to create new instances of this class through the static construction functions
            (e.g., CreateAsynchronousQueue, CreateSynchronousQueue, etc.)</para>
            <para>Note that the <see cref="T:TVA.Collections.ProcessQueue`1"/> will not start processing until the Start method is called.</para>
            </remarks>
        </member>
        <member name="F:TVA.Collections.ProcessQueue`1.DefaultProcessInterval">
            <summary>Default processing interval (in milliseconds).</summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueue`1.DefaultMaximumThreads">
            <summary>Default maximum number of processing threads.</summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueue`1.DefaultProcessTimeout">
            <summary>Default processing timeout (in milliseconds).</summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueue`1.DefaultRequeueOnTimeout">
            <summary>Default setting for requeuing items on processing timeout.</summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueue`1.DefaultRequeueModeOnTimeout">
            <summary>Default setting for requeuing mode on processing timeout.</summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueue`1.DefaultRequeueOnException">
            <summary>Default setting for requeuing items on processing exceptions.</summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueue`1.DefaultRequeueModeOnException">
            <summary>Default setting for requeuing mode on processing exceptions.</summary>
        </member>
        <member name="F:TVA.Collections.ProcessQueue`1.RealTimeProcessInterval">
            <summary>Default real-time processing interval (in milliseconds).</summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.#ctor(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:TVA.Collections.ProcessQueue`1"/> based on the generic List(Of T) class.
            </summary>
            <param name="processItemFunction">Delegate that defines a method to process one item at a time.</param>
            <param name="canProcessItemFunction">Delegate that determines if an item can currently be processed.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="maximumThreads">The maximum number of threads for the queue to use.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.#ctor(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> based on the generic List(Of T) class.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="canProcessItemFunction">Delegate that determines if an item can currently be processed.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="maximumThreads">The maximum number of threads for the queue to use.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.#ctor(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Collections.Generic.IList{`0},System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Allows derived classes to define their own IList instance, if desired.
            </summary>
            <param name="processItemFunction">Delegate that defines a method to process one item at a time.</param>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="canProcessItemFunction">Delegate that determines if an item can currently be processed.</param>
            <param name="processQueue">A storage list for items to be processed.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="maximumThreads">The maximum number of threads for the queue to use.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Collections.ProcessQueue`1"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Collections.ProcessQueue`1"/> object.
            </summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Collections.ProcessQueue`1"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Start">
            <summary>
            Starts item processing.
            </summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Stop">
            <summary>
            Stops item processing.
            </summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Flush">
            <summary>
            Blocks the current thread, if the <see cref="T:TVA.Collections.ProcessQueue`1"/> is active (i.e., user has called "Start" method), until all items
            in <see cref="T:TVA.Collections.ProcessQueue`1"/> are processed, and then stops the <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            </summary>
            <remarks>
            <para>
            Begins processing items as quickly as possible, regardless of currently defined process interval, until all
            items in the <see cref="T:TVA.Collections.ProcessQueue`1"/> have been processed. Stops the <see cref="T:TVA.Collections.ProcessQueue`1"/> when this function ends.
            This method is typically called on shutdown to make sure any remaining queued items get processed before the
            <see cref="T:TVA.Collections.ProcessQueue`1"/> is destructed.
            </para>
            <para>
            It is possible for items to be added to the <see cref="T:TVA.Collections.ProcessQueue`1"/> while the flush is executing. The flush will continue to
            process items as quickly as possible until the <see cref="T:TVA.Collections.ProcessQueue`1"/> is empty. Unless the user stops queueing items to be
            processed, the flush call may never return (not a happy situtation on shutdown). For this reason, during this
            function call, requeueing of items on exception or process timeout is temporarily disabled.
            </para>
            <para>
            The <see cref="T:TVA.Collections.ProcessQueue`1"/> does not clear queue prior to destruction. If the user fails to call this method before the
            class is destructed, there may be items that remain unprocessed in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.OnItemProcessed(`0)">
            <summary>
            Raises the base class <see cref="E:TVA.Collections.ProcessQueue`1.ItemProcessed"/> event.
            </summary>
            <remarks>
            Derived classes cannot raise events of their base classes, so we expose event wrapper methods to accomodate
            as needed.
            </remarks>
            <param name="item">A generic type T to be passed to ItemProcessed.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.OnItemsProcessed(`0[])">
            <summary>
            Raises the base class <see cref="E:TVA.Collections.ProcessQueue`1.ItemsProcessed"/> event.
            </summary>
            <remarks>
            Derived classes cannot raise events of their base classes, so we expose event wrapper methods to accomodate
            as needed.
            </remarks>
            <param name="items">An array of generic type T to be passed to ItemsProcessed.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.OnItemTimedOut(`0)">
            <summary>
            Raises the base class <see cref="E:TVA.Collections.ProcessQueue`1.ItemTimedOut"/> event.
            </summary>
            <remarks>
            Derived classes cannot raise events of their base classes, so we expose event wrapper methods to accomodate
            as needed.
            </remarks>
            <param name="item">A generic type T to be passed to ItemProcessed.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.OnItemsTimedOut(`0[])">
            <summary>
            Raises the base class <see cref="E:TVA.Collections.ProcessQueue`1.ItemsTimedOut"/> event.
            </summary>
            <remarks>
            Derived classes cannot raise events of their base classes, so we expose event wrapper methods to accomodate
            as needed.
            </remarks>
            <param name="items">An array of generic type T to be passed to ItemsProcessed.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.OnProcessException(System.Exception)">
            <summary>
            Raises the base class <see cref="E:TVA.Collections.ProcessQueue`1.ProcessException"/> event.
            </summary>
            <remarks>
            Derived classes cannot raise events of their base classes, so we expose event wrapper methods to accomodate
            as needed.
            </remarks>
            <param name="ex"><see cref="T:System.Exception"/> to be passed to ProcessException.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.DataAdded">
            <summary>
            Notifies a class that data was added, so it can begin processing data.
            </summary>
            <remarks>
            <para>
            Derived classes *must* make sure to call this method after data gets added, so that the
            process timer can be enabled for intervaled <see cref="T:TVA.Collections.ProcessQueue`1"/> and data processing can begin.
            </para>
            <para>
            To make sure items in the <see cref="T:TVA.Collections.ProcessQueue`1"/> always get processed, this function is expected to be
            invoked from within a SyncLock of the exposed SyncRoot (i.e., m_processQueue).
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CanProcessItem(`0)">
            <summary>
            Determines if an item can be processed.
            </summary>
            <values>True, if user provided no implementation for the CanProcessItemFunction.</values>
            <remarks>
            <para>
            Use this function instead of invoking the CanProcessItemFunction pointer
            directly, since implementation of this delegate is optional.
            </para>
            </remarks>
            <param name="item">The item T to process.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether it can process the item or not.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CanProcessItems(`0[])">
            <summary>
            Determines if all items can be processed.
            </summary>
            <values>True, if user provided no implementation for the CanProcessItemFunction.</values>
            <remarks>
            <para>
            Use this function instead of invoking the CanProcessItemFunction pointer
            directly, since implementation of this delegate is optional.
            </para>
            </remarks>
            <param name="items">An array of items of type T.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether the process queue can process the items.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.RequeueItem(`0,TVA.Collections.RequeueMode)">
            <summary>
            Requeues item into <see cref="T:TVA.Collections.ProcessQueue`1"/> according to specified requeue mode.
            </summary>
            <param name="item">A generic item of type T to be requeued.</param>
            <param name="mode">The method in which to requeue the object.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.RequeueItems(`0[],TVA.Collections.RequeueMode)">
            <summary>
            Requeues items into <see cref="T:TVA.Collections.ProcessQueue`1"/> according to specified requeue mode.
            </summary>
            <param name="items">Array of type T.</param>
            <param name="mode">The method in which to requeue the object.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.ProcessItem(`0)">
            <summary>
            Handles standard processing of a single item. 
            </summary>
            <param name="item">A generic item of type T to be processed.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.ProcessItems(`0[])">
            <summary>
            Handles standard processing of multiple items.
            </summary>
            <param name="items">Array of type T.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.RealTimeThreadProc">
            <summary>
            Creates a real-time thread for processing items. 
            </summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.ProcessTimerThreadProc(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Processes queued items on an interval.
            </summary>
            <param name="sender">The sender object of the item.</param>
            <param name="e">Arguments for the elapsed event.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.ProcessNextItem">
            <summary>
            Processes next item in queue, one at a time (i.e., ProcessingStyle = OneAtATime). 
            </summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.ProcessNextItems">
            <summary>
            Processes next items in an array of items as a group (i.e., ProcessingStyle = ManyAtOnce).
            </summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted <see cref="T:TVA.Collections.ProcessQueue`1"/>, using a binary search algorithm, for an element using the
            default comparer and returns the zero-based index of the element.
            </summary>
            <remarks>
            <see cref="T:TVA.Collections.ProcessQueue`1"/> must be sorted in order for this function to return an accurate result.
            </remarks>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>
            The zero-based index of item in the sorted <see cref="T:TVA.Collections.ProcessQueue`1"/>, if item is found; otherwise, a negative number that is the
            bitwise complement of the index of the next element that is larger than item or, if there is no larger element,
            the bitwise complement of count.
            </returns>
            <exception cref="T:System.InvalidOperationException">The default comparer, Generic.Comparer.Default, cannot find an
            implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:TVA.Collections.ProcessQueue`1"/>, using a binary search algorithm, for an element using the
            specified comparer and returns the zero-based index of the element.
            </summary>
            <remarks>
            <see cref="T:TVA.Collections.ProcessQueue`1"/> must be sorted in order for this function to return an accurate result.
            </remarks>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The Generic.IComparer implementation to use when comparing elements -or-
            null to use the default comparer: Generic.Comparer(Of T).Default</param>
            <returns>
            The zero-based index of item in the sorted <see cref="T:TVA.Collections.ProcessQueue`1"/>, if item is found; otherwise, a negative number that is the
            bitwise complement of the index of the next element that is larger than item or, if there is no larger element,
            the bitwise complement of count.
            </returns>
            <exception cref="T:System.InvalidOperationException">The default comparer, Generic.Comparer.Default, cannot find an
            implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted <see cref="T:TVA.Collections.ProcessQueue`1"/>, using a binary search algorithm, for an
            element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <remarks>
            <see cref="T:TVA.Collections.ProcessQueue`1"/> must be sorted in order for this function to return an accurate result.
            </remarks>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The Generic.IComparer implementation to use when comparing elements -or- null to use
            the default comparer: Generic.Comparer(Of T).Default</param>
            <returns>
            The zero-based index of item in the sorted <see cref="T:TVA.Collections.ProcessQueue`1"/>, if item is found; otherwise, a negative number that is the
            bitwise complement of the index of the next element that is larger than item or, if there is no larger element,
            the bitwise complement of count.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the <see cref="T:TVA.Collections.ProcessQueue`1"/>
            -or- count is less than 0 -or- startIndex and count do not specify a valid section in the <see cref="T:TVA.Collections.ProcessQueue`1"/></exception>
            <exception cref="T:System.InvalidOperationException">The default comparer, Generic.Comparer.Default, cannot find an
            implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>Converts the elements in the current <see cref="T:TVA.Collections.ProcessQueue`1"/> to another type, and returns a <see cref="T:TVA.Collections.ProcessQueue`1"/> containing the
            converted elements.</summary>
            <returns>A generic list of the target type containing the converted elements from the current <see cref="T:TVA.Collections.ProcessQueue`1"/>.</returns>
            <param name="converter">A Converter delegate that converts each element from one type to another type.</param>
            <exception cref="T:System.ArgumentNullException">converter is null.</exception>
            <typeparam name="TOutput">The generic type used.</typeparam>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Exists(System.Predicate{`0})">
            <summary>Determines whether the <see cref="T:TVA.Collections.ProcessQueue`1"/> contains elements that match the conditions defined by the specified
            predicate.</summary>
            <returns>True, if the <see cref="T:TVA.Collections.ProcessQueue`1"/> contains one or more elements that match the conditions defined by the specified
            predicate; otherwise, false.</returns>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Find(System.Predicate{`0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns
            the first occurrence within the entire <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>The first element that matches the conditions defined by the specified predicate, if found;
            otherwise, the default value for type T.</returns>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.FindAll(System.Predicate{`0})">
            <summary>Retrieves all elements that match the conditions defined by the specified predicate.</summary>
            <returns>A generic list containing all elements that match the conditions defined by the specified predicate,
            if found; otherwise, an empty list.</returns>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.FindIndex(System.Predicate{`0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns
            the zero-based index of the first occurrence within the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that extends from the
            specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by
            match, if found; otherwise, –1.</returns>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns
            the zero-based index of the first occurrence within the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that extends from the
            specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by
            match, if found; otherwise, –1.</returns>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns
            the zero-based index of the first occurrence within the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that extends from the
            specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by
            match, if found; otherwise, –1.</returns>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the <see cref="T:TVA.Collections.ProcessQueue`1"/>
            -or- count is less than 0 -or- startIndex and count do not specify a valid section in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.FindLast(System.Predicate{`0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.FindLastIndex(System.Predicate{`0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns
            the zero-based index of the last occurrence within the entire <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by
            match, if found; otherwise, –1.</returns>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns
            the zero-based index of the last occurrence within the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that extends from the
            first element to the specified index.</summary>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by
            match, if found; otherwise, –1.</returns>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns
            the zero-based index of the last occurrence within the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that contains the
            specified number of elements and ends at the specified index.</summary>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by
            match, if found; otherwise, –1.</returns>
            <param name="count">The number of elements in the section to search.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is outside the range of valid indexes for the <see cref="T:TVA.Collections.ProcessQueue`1"/>
            -or- count is less than 0 -or- startIndex and count do not specify a valid section in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.ForEach(System.Action{`0})">
            <summary>Performs the specified action on each element of the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <param name="action">The Action delegate to perform on each element of the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">action is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.GetRange(System.Int32,System.Int32)">
            <summary>Creates a shallow copy of a range of elements in the source <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>A shallow copy of a range of elements in the source <see cref="T:TVA.Collections.ProcessQueue`1"/>.</returns>
            <param name="count">The number of elements in the range.</param>
            <param name="index">The zero-based <see cref="T:TVA.Collections.ProcessQueue`1"/> index at which the range starts.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.IndexOf(`0,System.Int32)">
            <summary>Searches for the specified object and returns the zero-based index of the first occurrence within
            the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that extends from the specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that
            extends from index to the last element, if found; otherwise, –1.</returns>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the zero-based index of the first occurrence within
            the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that starts at the specified index and contains the specified number of
            elements.</summary>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that
            starts at index and contains count number of elements, if found; otherwise, –1.</returns>
            <param name="count">The number of elements in the section to search.</param>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the <see cref="T:TVA.Collections.ProcessQueue`1"/>
            -or- count is less than 0 -or- index and count do not specify a valid section in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Inserts the elements of a collection into the <see cref="T:TVA.Collections.ProcessQueue`1"/> at the specified index.</summary>
            <param name="collection">The collection whose elements should be inserted into the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The collection
            itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- index is greater than <see cref="T:TVA.Collections.ProcessQueue`1"/> length.</exception>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.LastIndexOf(`0)">
            <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the
            entire <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>The zero-based index of the last occurrence of item within the entire the <see cref="T:TVA.Collections.ProcessQueue`1"/>, if found;
            otherwise, –1.</returns>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.LastIndexOf(`0,System.Int32)">
            <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the
            range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that extends from the first element to the specified index.</summary>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that
            extends from the first element to index, if found; otherwise, –1.</returns>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the <see cref="T:TVA.Collections.ProcessQueue`1"/>. </exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the
            range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that contains the specified number of elements and ends at the specified index.</summary>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/> that
            contains count number of elements and ends at index, if found; otherwise, –1.</returns>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is outside the range of valid indexes for the <see cref="T:TVA.Collections.ProcessQueue`1"/> -or-
            count is less than 0 -or- index and count do not specify a valid section in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.RemoveAll(System.Predicate{`0})">
            <summary>Removes the all the elements that match the conditions defined by the specified predicate.</summary>
            <returns>The number of elements removed from the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</returns>
            <param name="match">The Predicate delegate that defines the conditions of the elements to remove.</param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.RemoveRange(System.Int32,System.Int32)">
            <summary>Removes a range of elements from the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <param name="count">The number of elements to remove.</param>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Reverse">
            <summary>Reverses the order of the elements in the entire <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Reverse(System.Int32,System.Int32)">
            <summary>Reverses the order of the elements in the specified range.</summary>
            <param name="count">The number of elements in the range to reverse.</param>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- count is less than 0.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Sort">
            <summary>Sorts the elements in the entire <see cref="T:TVA.Collections.ProcessQueue`1"/>, using the default comparer.</summary>
            <exception cref="T:System.InvalidOperationException">The default comparer, Generic.Comparer.Default, cannot find an
            implementation of the IComparable generic interface or the IComparable interface for type T.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the elements in the entire <see cref="T:TVA.Collections.ProcessQueue`1"/>, using the specified comparer.</summary>
            <param name="comparer">The Generic.IComparer implementation to use when comparing elements, or null to use
            the default comparer: Generic.Comparer.Default.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparer caused an error during the sort. For
            example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.InvalidOperationException">the comparer is null and the default comparer,
            Generic.Comparer.Default, cannot find an implementation of the IComparable generic interface or the
            IComparable interface for type T.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>Sorts the elements in a range of elements in the <see cref="T:TVA.Collections.ProcessQueue`1"/>, using the specified comparer.</summary>
            <param name="count">The length of the range to sort.</param>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="comparer">The Generic.IComparer implementation to use when comparing elements, or null to use
            the default comparer: Generic.Comparer.Default.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparer caused an error during the sort. For
            example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.InvalidOperationException">the comparer is null and the default comparer,
            Generic.Comparer.Default, cannot find an implementation of the IComparable generic interface or the
            IComparable interface for type T.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- count is less than 0.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Sort(System.Comparison{`0})">
            <summary>Sorts the elements in the entire <see cref="T:TVA.Collections.ProcessQueue`1"/>, using the specified comparison.</summary>
            <param name="comparison">The comparison to use when comparing elements.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparison caused an error during the sort. For
            example, comparison might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException">comparison is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.ToArray">
            <summary>Copies the elements of the <see cref="T:TVA.Collections.ProcessQueue`1"/> to a new array.</summary>
            <returns>An array containing copies of the elements of the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.TrueForAll(System.Predicate{`0})">
            <summary>Determines whether every element in the <see cref="T:TVA.Collections.ProcessQueue`1"/> matches the conditions defined by the specified
            predicate.</summary>
            <returns>True, if every element in the <see cref="T:TVA.Collections.ProcessQueue`1"/> matches the conditions defined by the specified predicate;
            otherwise, false. If the <see cref="T:TVA.Collections.ProcessQueue`1"/> has no elements, the return value is true.</returns>
            <param name="match">The Predicate delegate that defines the conditions to check against the elements.</param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Push(`0)">
            <summary>Inserts an item onto the top of the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <param name="item">The item to push onto the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Pop">
            <summary>Removes the first item from the <see cref="T:TVA.Collections.ProcessQueue`1"/>, and returns its value.</summary>
            <exception cref="T:System.IndexOutOfRangeException">There are no items in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
            <returns>An object of generic type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Poop">
            <summary>Removes the last item from the <see cref="T:TVA.Collections.ProcessQueue`1"/>, and returns its value. (It's a dirty job, but someone has to do it.)</summary>
            <returns>An object of generic type T.</returns>
            <exception cref="T:System.IndexOutOfRangeException">There are no items in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Add(`0)">
            <summary>Adds an item to the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <param name="item">The item to add to the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Insert(System.Int32,`0)">
            <summary>Inserts an element into the <see cref="T:TVA.Collections.ProcessQueue`1"/> at the specified index.</summary>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- index is greater than <see cref="T:TVA.Collections.ProcessQueue`1"/> length.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the entire <see cref="T:TVA.Collections.ProcessQueue`1"/> to a compatible one-dimensional array, starting at the beginning of the
            target array.</summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:TVA.Collections.ProcessQueue`1"/>. The
            array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentException">arrayIndex is equal to or greater than the length of array -or- the
            number of elements in the source <see cref="T:TVA.Collections.ProcessQueue`1"/> is greater than the available space from arrayIndex to the end of the
            destination array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>An enumerator for the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.IndexOf(`0)">
            <summary>Searches for the specified object and returns the zero-based index of the first occurrence within
            the entire <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:TVA.Collections.ProcessQueue`1"/>, if found; otherwise, –1.</returns>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Clear">
            <summary>Removes all elements from the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Contains(`0)">
            <summary>Determines whether an element is in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>True, if item is found in the <see cref="T:TVA.Collections.ProcessQueue`1"/>; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>True, if item is successfully removed; otherwise, false. This method also returns false if item was
            not found in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</returns>
            <param name="item">The object to remove from the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.RemoveAt(System.Int32)">
            <summary>Removes the element at the specified index of the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- index is equal to or greater than
            <see cref="T:TVA.Collections.ProcessQueue`1"/> length.</exception>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator of all items within the <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            </summary>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:TVA.Collections.ProcessQueue`1"/> to an <see cref="T:System.Array"/>, starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements 
            copied from the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature)">
            <summary>
            Creates a new asynchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessInterval = 100, MaximumThreads = 5,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new asynchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessInterval = 100, MaximumThreads = 5,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,System.Int32)">
            <summary>
            Creates a new asynchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessInterval = 100,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value that determines the maximum number of threads used to process items.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Int32)">
            <summary>
            Creates a new asynchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessInterval = 100,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value that determines the maximum number of threads used to process items.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new asynchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> using specified settings.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value that determines the maximum number of threads used to process items.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new asynchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> using  specified settings.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value that determines the maximum number of threads used to process items.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateSynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature)">
            <summary>
            Creates a new synchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., single process thread) with the default settings:
            ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateSynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new synchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., single process thread) with the default settings:
            ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateSynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new synchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., single process thread) using specified settings.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateSynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new synchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., single process thread) using specified settings.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateRealTimeQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature)">
            <summary>
            Creates a new real-time <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessTimeout = Infinite,
            RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateRealTimeQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new real-time <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessTimeout = Infinite,
            RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateRealTimeQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new real-time <see cref="T:TVA.Collections.ProcessQueue`1"/> using specified settings.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateRealTimeQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new real-time <see cref="T:TVA.Collections.ProcessQueue`1"/> using specified settings.
            </summary>
            <param name="processItemFunction">Delegate that processes one item at a time.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature)">
            <summary>
            Creates a new asynchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessInterval = 100,
            MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new asynchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessInterval = 100,
            MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,System.Int32)">
            <summary>
            Creates a new asynchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessInterval = 100,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value that determines the maximum number of threads used to process items.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Int32)">
            <summary>
            Creates a new asynchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessInterval = 100,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value that determines the maximum number of threads used to process items.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new asynchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value that determines the maximum number of threads used to process items.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new asynchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value that determines the maximum number of threads used to process items.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateSynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature)">
            <summary>
            Creates a new synchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., single process thread) with the default settings:
            ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateSynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new synchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., single process thread) with the default settings:
            ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateSynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new synchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., single process thread) using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateSynchronousQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new synchronous, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., single process thread) using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateRealTimeQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature)">
            <summary>
            Creates a new real-time, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessTimeout = Infinite,
            RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateRealTimeQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new real-time, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> with the default settings: ProcessTimeout = Infinite,
            RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateRealTimeQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new real-time, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="M:TVA.Collections.ProcessQueue`1.CreateRealTimeQueue(TVA.Collections.ProcessQueue{`0}.ProcessItemsFunctionSignature,TVA.Collections.ProcessQueue{`0}.CanProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new real-time, bulk item <see cref="T:TVA.Collections.ProcessQueue`1"/> using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate that defines a method to process multiple items at once.</param>
            <param name="canProcessItemFunction">Delegate which determines whether an item can be processed.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>A ProcessQueue object based on type T.</returns>
        </member>
        <member name="E:TVA.Collections.ProcessQueue`1.ItemProcessed">
            <summary>
            Event that is raised after an item has been successfully processed.
            </summary>
            <remarks>
            <para>Allows custom handling of successfully processed items.</para>
            <para>Allows notification when an item has completed processing in the allowed amount of time, if a process
            timeout is specified.</para>
            <para>Raised only when ProcessingStyle = OneAtATime (i.e., <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemFunction"/> is defined).</para>
            </remarks>
        </member>
        <member name="E:TVA.Collections.ProcessQueue`1.ItemsProcessed">
            <summary>
            Event that is raised after an array of items have been successfully processed.
            </summary>
            <remarks>
            <para>Allows custom handling of successfully processed items.</para>
            <para>Allows notification when an item has completed processing in the allowed amount of time, if a process
            timeout is specified.</para>
            <para>Raised only when when ProcessingStyle = ManyAtOnce (i.e., <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemsFunction"/> is defined).</para>
            </remarks>
        </member>
        <member name="E:TVA.Collections.ProcessQueue`1.ItemTimedOut">
            <summary>
            Event that is raised if an item's processing time exceeds the specified process timeout.
            </summary>
            <remarks>
            <para>Allows custom handling of items that took too long to process.</para>
            <para>Raised only when ProcessingStyle = OneAtATime (i.e., <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemFunction"/> is defined).</para>
            </remarks>
        </member>
        <member name="E:TVA.Collections.ProcessQueue`1.ItemsTimedOut">
            <summary>
            Event that is raised if the processing time for an array of items exceeds the specified process timeout.
            </summary>
            <remarks>
            <para>Allows custom handling of items that took too long to process.</para>
            <para>Raised only when ProcessingStyle = ManyAtOnce (i.e., <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemsFunction"/> is defined).</para>
            </remarks>
        </member>
        <member name="E:TVA.Collections.ProcessQueue`1.ProcessException">
            <summary>
            Event that is raised if an exception is encountered while attempting to processing an item in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            </summary>
            <remarks>
            Processing will not stop for any exceptions thrown by the user function, but any captured exceptions will
            be exposed through this event.
            </remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.ProcessItemFunction">
            <summary>
            Gets or sets the user function for processing individual items in the <see cref="T:TVA.Collections.ProcessQueue`1"/> one at a time.
            </summary>
            <remarks>
            <para>Cannot be defined simultaneously with <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemsFunction"/>.</para>
            <para>A <see cref="T:TVA.Collections.ProcessQueue`1"/> must be defined to process a single item at a time or many items at once.</para>
            <para>Implementation makes ProcessingStyle = OneAtATime.</para>
            </remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.ProcessItemsFunction">
            <summary>
            Gets or sets the user function for processing multiple items in the <see cref="T:TVA.Collections.ProcessQueue`1"/> at once.
            </summary>
            <remarks>
            <para>This function and <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemFunction"/> cannot be defined at the same time</para>
            <para>A <see cref="T:TVA.Collections.ProcessQueue`1"/> must be defined to process a single item at a time or many items at once</para>
            <para>Implementation of this function makes ProcessingStyle = ManyAtOnce</para>
            </remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.CanProcessItemFunction">
            <summary>
            Gets or sets the user function determining if an item is ready to be processed.
            </summary>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.ProcessingIsRealTime">
            <summary>
            Gets indicator that items will be processed in real-time.
            </summary>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.ThreadingMode">
            <summary>
            Gets the current <see cref="T:TVA.Collections.QueueThreadingMode"/> for the <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., synchronous or asynchronous).
            </summary>
            <remarks>
            <para>The maximum number of processing threads determines the <see cref="T:TVA.Collections.QueueThreadingMode"/>.</para>
            <para>If the maximum threads are set to one, item processing will be synchronous
            (i.e., ThreadingMode = Synchronous).</para>
            <para>If the maximum threads are more than one, item processing will be asynchronous
            (i.e., ThreadingMode = Asynchronous).</para>
            <para>
            Note that for asynchronous <see cref="T:TVA.Collections.ProcessQueue`1"/>, the processing interval will control how many threads are spawned
            at once. If items are processed faster than the specified processing interval, only one process thread
            will ever be spawned at a time. To ensure multiple threads are utilized to <see cref="T:TVA.Collections.ProcessQueue`1"/> items, lower
            the process interval (minimum process interval is 1 millisecond).
            </para>
            </remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.ProcessingStyle">
            <summary>
            Gets the item <see cref="T:TVA.Collections.QueueProcessingStyle"/> for the <see cref="T:TVA.Collections.ProcessQueue`1"/> (i.e., one at a time or many at once).
            </summary>
            <returns>
            <para>OneAtATime, if the <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemFunction"/> is implemented.</para>
            <para>ManyAtOnce, if the <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemsFunction"/> is implemented.</para>
            </returns>
            <remarks>
            <para>The implemented item processing function determines the <see cref="T:TVA.Collections.QueueProcessingStyle"/>.</para>
            <para>
            If the <see cref="T:TVA.Collections.QueueProcessingStyle"/> is ManyAtOnce, all available items in the <see cref="T:TVA.Collections.ProcessQueue`1"/> are presented for processing
            at each processing interval. If you expect items to be processed in the order in which they were received, make
            sure you use a synchronous <see cref="T:TVA.Collections.ProcessQueue`1"/>. Real-time <see cref="T:TVA.Collections.ProcessQueue`1"/> are inherently synchronous.
            </para>
            </remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.ProcessInterval">
            <summary>
            Gets or sets the interval, in milliseconds, on which new items begin processing.
            </summary>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.MaximumThreads">
            <summary>
            Gets or sets the maximum number of threads to process simultaneously.
            </summary>
            <value>Sets the maximum number of processing threads.</value>
            <returns>Maximum number of processing threads.</returns>
            <remarks>If MaximumThreads is set to one, item processing will be synchronous (i.e., ThreadingMode = Synchronous)</remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.ProcessTimeout">
            <summary>
            Gets or sets the maximum time, in milliseconds, allowed for processing an item.
            </summary>
            <value>Sets the maximum number of milliseconds allowed to process an item.</value>
            <returns>The maximum number of milliseconds allowed to process an item.</returns>
            <remarks>Set to Timeout.Infinite (i.e., -1) to allow processing to take as long as needed.</remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.RequeueOnTimeout">
            <summary>
            Gets or sets whether or not to automatically place an item back into the <see cref="T:TVA.Collections.ProcessQueue`1"/> if the processing times out.
            </summary>
            <remarks>Ignored if the ProcessTimeout is set to Timeout.Infinite (i.e., -1).</remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.RequeueModeOnTimeout">
            <summary>
            Gets or sets the mode of insertion used (prefix or suffix) when at item is placed back into the <see cref="T:TVA.Collections.ProcessQueue`1"/>
            after processing times out.
            </summary>
            <remarks>Only relevant when RequeueOnTimeout = True.</remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.RequeueOnException">
            <summary>
            Gets or sets whether or not to automatically place an item back into the <see cref="T:TVA.Collections.ProcessQueue`1"/> if an exception occurs
            while processing.
            </summary>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.RequeueModeOnException">
            <summary>
            Gets or sets the mode of insertion used (prefix or suffix) when at item is placed back into the
            <see cref="T:TVA.Collections.ProcessQueue`1"/> after an exception occurs while processing.
            </summary>
            <remarks>Only relevant when RequeueOnException = True.</remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.Enabled">
            <summary>
            Gets or sets indicator that the <see cref="T:TVA.Collections.ProcessQueue`1"/> is currently enabled.
            </summary>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.IsProcessing">
            <summary>
            Gets indicator that the <see cref="T:TVA.Collections.ProcessQueue`1"/> is actively processing items.
            </summary>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.ItemsBeingProcessed">
            <summary>
            Gets the total number of items currently being processed.
            </summary>
            <returns>Total number of items currently being processed.</returns>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.TotalProcessedItems">
            <summary>
            Gets the total number of items processed so far.
            </summary>
            <returns>Total number of items processed so far.</returns>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.ThreadCount">
            <summary>
            Gets the current number of active threads.
            </summary>
            <returns>Current number of active threads.</returns>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.RunTime">
            <summary>
            Gets the total amount of time, in seconds, that the <see cref="T:TVA.Collections.ProcessQueue`1"/> has been active.
            </summary>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.RealTimeProcessThreadPriority">
            <summary>
            Gets or sets adjustment of real-time process thread priority.
            </summary>
            <remarks>
            <para>Only affects real-time <see cref="T:TVA.Collections.ProcessQueue`1"/>.</para>
            <para>Only takes effect when set before calling the "Start" method.</para>
            </remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.Name">
            <summary>
            Gets or sets name for this <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            </summary>
            <remarks>
            This name is used for class identification in strings (e.g., used in error messages).
            </remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 -or- index is equal to or greater than
            <see cref="T:TVA.Collections.ProcessQueue`1"/> length. </exception>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.Count">
            <summary>Gets the number of elements actually contained in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>The number of elements actually contained in the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</returns>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:TVA.Collections.ProcessQueue`1"/> is read-only.</summary>
            <returns>True, if the <see cref="T:TVA.Collections.ProcessQueue`1"/> is read-only; otherwise, false. In the default implementation, this property
            always returns false.</returns>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.SyncRoot">
            <summary>Returns reference to internal IList that should be used to synchronize access to the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>Reference to internal IList that should be used to synchronize access to the <see cref="T:TVA.Collections.ProcessQueue`1"/>.</returns>
            <remarks>
            <para>
            Note that all the methods of this class are already individually synchronized; however, to safely enumerate through each
            <see cref="T:TVA.Collections.ProcessQueue`1"/> element (i.e., to make sure <see cref="T:TVA.Collections.ProcessQueue`1"/> elements do not change during enumeration),
            derived classes and end users should perform their own synchronization by implementing a SyncLock using this SyncRoot property.
            </para>
            <para>
            We return a typed object for synchronization as an optimization. Returning a generic object requires that
            SyncLock implementations validate that the referenced object is not a value type at run time.
            </para>
            </remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:TVA.Collections.ProcessQueue`1"/> is synchronized (thread safe).  Always returns true for <see cref="T:TVA.Collections.ProcessQueue`1"/>.</summary>
            <returns>true, <see cref="T:TVA.Collections.ProcessQueue`1"/> is always synchronized (thread safe).</returns>
            <remarks>The <see cref="T:TVA.Collections.ProcessQueue`1"/> is effectively "synchronized" since all functions SyncLock operations internally.</remarks>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.CurrentStatistics">
            <summary>
            Gets the current run-time statistics of the <see cref="T:TVA.Collections.ProcessQueue`1"/> as a single group of values.
            </summary>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.Status">
            <summary>
            Gets current status of <see cref="T:TVA.Collections.ProcessQueue`1"/>.
            </summary>
        </member>
        <member name="P:TVA.Collections.ProcessQueue`1.InternalList">
            <summary>
            Allows derived classes to access the interfaced internal <see cref="T:TVA.Collections.ProcessQueue`1"/> directly.
            </summary>
        </member>
        <member name="T:TVA.Collections.ProcessQueue`1.ProcessItemFunctionSignature">
            <summary>
            Function signature that defines a method to process items one at a time.
            </summary>
            <param name="item">Item to be processed.</param>
            <remarks>
            <para>Required unless <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemsFunction"/> is implemented.</para>
            <para>Creates an asynchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> to process individual items - one item at a time - on multiple threads.</para>
            </remarks>
        </member>
        <member name="T:TVA.Collections.ProcessQueue`1.ProcessItemsFunctionSignature">
            <summary>
            Function signature that defines a method to process multiple items at once.
            </summary>
            <param name="items">Items to be processed.</param>
            <remarks>
            <para>Required unless <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemFunction"/> is implemented.</para>
            <para>Creates an asynchronous <see cref="T:TVA.Collections.ProcessQueue`1"/> to process groups of items simultaneously on multiple threads.</para>
            </remarks>
        </member>
        <member name="T:TVA.Collections.ProcessQueue`1.CanProcessItemFunctionSignature">
            <summary>
            Function signature that determines if an item can be currently processed.
            </summary>
            <param name="item">Item to be checked for processing availablity.</param>
            <returns>True, if item can be processed. The default is true.</returns>
            <remarks>
            <para>Implementation of this function is optional. It is assumed that an item can be processed if this
            function is not defined</para>
            <para>Items must eventually get to a state where they can be processed, or they will remain in the <see cref="T:TVA.Collections.ProcessQueue`1"/>
            indefinitely.</para>
            <para>
            Note that when this function is implemented and ProcessingStyle = ManyAtOnce (i.e., 
            <see cref="P:TVA.Collections.ProcessQueue`1.ProcessItemsFunction"/> is defined), then each item presented for 
            processing must evaluate as "CanProcessItem = True" before any items are processed.
            </para>
            </remarks>
        </member>
        <member name="T:TVA.Units.Volume">
            <summary>Represents a volume measurement, in cubic meters, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a volume in cubic meters; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other volume representations, specifically
            liters, teaspoons, tablespoons, cubic inches, fluid ounces, cups, pints, quarts, gallons and cubic feet.
            Metric conversions are handled simply by applying the needed <see cref="T:TVA.Units.SI"/> conversion factor, for example:
            <example>
            Convert volume, in cubic meters, to cubic kilometers:
            <code>
            public double GetCubicKilometers(Volume cubicmeters)
            {
                return cubicmeters / SI.Kilo;
            }
            </code>
            This example converts teaspoons to cups:
            <code>
            public double GetCups(double teaspoons)
            {
                return Volume.FromTeaspoons(teaspoons).ToCups();
            }
            </code>
            This example converts liters to fluid ounces:
            <code>
            public double GetFluidOunces(double liters)
            {
                return Volume.FromLiters(liters).ToFluidOunces();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Volume.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/>.
            </summary>
            <param name="value">New volume value in cubic meters.</param>
        </member>
        <member name="M:TVA.Units.Volume.ToLiters">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in liters.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in liters.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToTeaspoons">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in US teaspoons.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in US teaspoons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToMetricTeaspoons">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in metric teaspoons.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in metric teaspoons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToTablespoons">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in US tablespoons.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in US tablespoons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToMetricTablespoons">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in metric tablespoons.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in metric tablespoons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToCups">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in US cups.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in US cups.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToMetricCups">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in metric cups.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in metric cups.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToFluidOunces">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in US fluid ounces.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in US fluid ounces.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToPints">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in US fluid pints.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in US fluid pints.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToQuarts">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in US fluid quarts.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in US fluid quarts.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToGallons">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in US fluid gallons.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in US fluid gallons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToCubicInches">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in cubic inches.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in cubic inches.</returns>
        </member>
        <member name="M:TVA.Units.Volume.ToCubicFeet">
            <summary>
            Gets the <see cref="T:TVA.Units.Volume"/> value in cubic feet.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Volume"/> in cubic feet.</returns>
        </member>
        <member name="M:TVA.Units.Volume.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Volume"/>.</exception>
        </member>
        <member name="M:TVA.Units.Volume.CompareTo(TVA.Units.Volume)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Volume"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Volume"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Volume"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.Equals(TVA.Units.Volume)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Volume"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Volume"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Volume.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Volume"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Volume"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Volume.MinValue"/> or greater than <see cref="F:TVA.Units.Volume.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Volume.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Volume"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Volume"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Volume.MinValue"/> or greater than <see cref="F:TVA.Units.Volume.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Volume.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Volume"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Volume"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Volume.MinValue"/> or greater than <see cref="F:TVA.Units.Volume.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Volume.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Volume"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Volume"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Volume.MinValue"/> or greater than <see cref="F:TVA.Units.Volume.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Volume.TryParse(System.String,TVA.Units.Volume@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Volume"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Volume"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paraampere is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Volume.MinValue"/> or greater than <see cref="F:TVA.Units.Volume.MaxValue"/>.
            This paraampere is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Volume.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Volume@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Volume"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Volume"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paraampere is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Volume.MinValue"/> or
            greater than <see cref="F:TVA.Units.Volume.MaxValue"/>. This paraampere is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Volume.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Equality(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Inequality(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_LessThan(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_LessThanOrEqual(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_GreaterThan(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_GreaterThanOrEqual(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Implicit(System.Double)~TVA.Units.Volume">
            <summary>
            Implicitly converts value, represented in cubic meters, to a <see cref="T:TVA.Units.Volume"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Volume"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Implicit(TVA.Units.Volume)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Volume"/>, represented in cubic meters, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Volume"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Modulus(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Volume"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Addition(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Volume"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Subtraction(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Volume"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Multiply(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Volume"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Division(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Volume"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Volume.op_Exponent(TVA.Units.Volume,TVA.Units.Volume)">
            <summary>
            Returns result of first value raised to volume of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Volume"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Volume"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result.</returns>
        </member>
        <member name="F:TVA.Units.Volume.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Volume"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Volume.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Volume"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Volume.FromLiters(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in liters.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in liters.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in liters.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromTeaspoons(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in US teaspoons.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in US teaspoons.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in US teaspoons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromMetricTeaspoons(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in metric teaspoons.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in metric teaspoons.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in metric teaspoons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromTablespoons(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in US tablespoons.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in US tablespoons.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in US tablespoons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromMetricTablespoons(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in metric tablespoons.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in metric tablespoons.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in metric tablespoons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromCups(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in US cups.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in US cups.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in US cups.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromMetricCups(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in metric cups.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in metric cups.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in metric cups.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromFluidOunces(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in US fluid ounces.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in US fluid ounces.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in US fluid ounces.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromPints(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in US fluid pints.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in US fluid pints.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in US fluid pints.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromQuarts(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in US fluid quarts.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in US fluid quarts.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in US fluid quarts.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromGallons(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in US fluid gallons.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in US fluid gallons.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in US fluid gallons.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromCubicInches(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in cubic inches.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in cubic inches.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in cubic inches.</returns>
        </member>
        <member name="M:TVA.Units.Volume.FromCubicFeet(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Volume"/> value from the specified <paramref name="value"/> in cubic feet.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Volume"/> value in cubic feet.</param>
            <returns>New <see cref="T:TVA.Units.Volume"/> object from the specified <paramref name="value"/> in cubic feet.</returns>
        </member>
        <member name="T:TVA.Units.Temperature">
            <summary>Represents a temperature, in kelvin, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a temperature in kelvin; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other temperature representations, specifically
            Celsius, Fahrenheit, Newton, Rankine, Delisle, Réaumur and Rømer.
            <example>
            This example converts Celsius to Fahrenheit:
            <code>
            public double GetFahrenheit(double celsius)
            {
                return Temperature.FromCelsius(celsius).ToFahrenheit();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Temperature.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Temperature"/>.
            </summary>
            <param name="value">New temperature value in kelvin.</param>
        </member>
        <member name="M:TVA.Units.Temperature.ToCelsius">
            <summary>
            Gets the <see cref="T:TVA.Units.Temperature"/> value in Celsius.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Temperature"/> in Celsius.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToFahrenheit">
            <summary>
            Gets the <see cref="T:TVA.Units.Temperature"/> value in Fahrenheit.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Temperature"/> in Fahrenheit.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToNewton">
            <summary>
            Gets the <see cref="T:TVA.Units.Temperature"/> value in Newton.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Temperature"/> in Newton.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToRankine">
            <summary>
            Gets the <see cref="T:TVA.Units.Temperature"/> value in Rankine.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Temperature"/> in Rankine.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToDelisle">
            <summary>
            Gets the <see cref="T:TVA.Units.Temperature"/> value in Delisle.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Temperature"/> in Delisle.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToRéaumur">
            <summary>
            Gets the <see cref="T:TVA.Units.Temperature"/> value in Réaumur.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Temperature"/> in Réaumur.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToRømer">
            <summary>
            Gets the <see cref="T:TVA.Units.Temperature"/> value in Rømer.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Temperature"/> in Rømer.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Temperature"/>.</exception>
        </member>
        <member name="M:TVA.Units.Temperature.CompareTo(TVA.Units.Temperature)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Temperature"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Temperature"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Temperature"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.Equals(TVA.Units.Temperature)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Temperature"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Temperature"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Temperature.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Temperature"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Temperature"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Temperature.MinValue"/> or greater than <see cref="F:TVA.Units.Temperature.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Temperature.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Temperature"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Temperature"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Temperature.MinValue"/> or greater than <see cref="F:TVA.Units.Temperature.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Temperature.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Temperature"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Temperature"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Temperature.MinValue"/> or greater than <see cref="F:TVA.Units.Temperature.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Temperature.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Temperature"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Temperature"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Temperature.MinValue"/> or greater than <see cref="F:TVA.Units.Temperature.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Temperature.TryParse(System.String,TVA.Units.Temperature@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Temperature"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Temperature"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Temperature.MinValue"/> or greater than <see cref="F:TVA.Units.Temperature.MaxValue"/>.
            This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Temperature@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Temperature"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Temperature"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Temperature.MinValue"/> or
            greater than <see cref="F:TVA.Units.Temperature.MaxValue"/>. This parameter is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Temperature.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Equality(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Inequality(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_LessThan(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_LessThanOrEqual(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_GreaterThan(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_GreaterThanOrEqual(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Implicit(System.Double)~TVA.Units.Temperature">
            <summary>
            Implicitly converts value, represented in kelvin, to a <see cref="T:TVA.Units.Temperature"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Temperature"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Implicit(TVA.Units.Temperature)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Temperature"/>, represented in kelvin, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Temperature"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Modulus(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Temperature"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Addition(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Temperature"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Subtraction(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Temperature"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Multiply(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Temperature"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Division(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Temperature"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.op_Exponent(TVA.Units.Temperature,TVA.Units.Temperature)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Temperature"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Temperature"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result of the operation.</returns>
        </member>
        <member name="F:TVA.Units.Temperature.MaxValue">
            <summary>Represents the largest possible value of a <see cref="T:TVA.Units.Temperature"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Temperature.MinValue">
            <summary>Represents the smallest possible value of a <see cref="T:TVA.Units.Temperature"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Temperature.FromCelsius(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Temperature"/> value from the specified <paramref name="value"/> in Celsius.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Temperature"/> value in Celsius.</param>
            <returns>New <see cref="T:TVA.Units.Temperature"/> object from the specified <paramref name="value"/> in Celsius.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.FromFahrenheit(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Temperature"/> value from the specified <paramref name="value"/> in Fahrenheit.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Temperature"/> value in Fahrenheit.</param>
            <returns>New <see cref="T:TVA.Units.Temperature"/> object from the specified <paramref name="value"/> in Fahrenheit.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.FromNewton(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Temperature"/> value from the specified <paramref name="value"/> in Newton.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Temperature"/> value in Newton.</param>
            <returns>New <see cref="T:TVA.Units.Temperature"/> object from the specified <paramref name="value"/> in Newton.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.FromRankine(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Temperature"/> value from the specified <paramref name="value"/> in Rankine.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Temperature"/> value in Rankine.</param>
            <returns>New <see cref="T:TVA.Units.Temperature"/> object from the specified <paramref name="value"/> in Rankine.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.FromDelisle(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Temperature"/> value from the specified <paramref name="value"/> in Delisle.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Temperature"/> value in Delisle.</param>
            <returns>New <see cref="T:TVA.Units.Temperature"/> object from the specified <paramref name="value"/> in Delisle.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.FromRéaumur(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Temperature"/> value from the specified <paramref name="value"/> in Réaumur.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Temperature"/> value in Réaumur.</param>
            <returns>New <see cref="T:TVA.Units.Temperature"/> object from the specified <paramref name="value"/> in Réaumur.</returns>
        </member>
        <member name="M:TVA.Units.Temperature.FromRømer(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Temperature"/> value from the specified <paramref name="value"/> in Rømer.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Temperature"/> value in Rømer.</param>
            <returns>New <see cref="T:TVA.Units.Temperature"/> object from the specified <paramref name="value"/> in Rømer.</returns>
        </member>
        <member name="T:TVA.Units.Speed">
            <summary>Represents a speed measurement, in meters per second, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a speed in meters per second; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other speed representations, specifically
            miles per hour, kilometers per hour, feet per minute, inches per second, knots and mach.
            <example>
            This example converts mph to km/h:
            <code>
            public double GetKilometersPerHour(double milesPerHour)
            {
                return Speed.FromMilesPerHour(milesPerHour).ToKilometersPerHour();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Speed.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Speed"/>.
            </summary>
            <param name="value">New speed value in meters per second.</param>
        </member>
        <member name="M:TVA.Units.Speed.ToMilesPerHour">
            <summary>
            Gets the <see cref="T:TVA.Units.Speed"/> value in miles per hour.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Speed"/> in miles per hour.</returns>
        </member>
        <member name="M:TVA.Units.Speed.ToKilometersPerHour">
            <summary>
            Gets the <see cref="T:TVA.Units.Speed"/> value in kilometers per hour.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Speed"/> in kilometers per hour.</returns>
        </member>
        <member name="M:TVA.Units.Speed.ToFeetPerMinute">
            <summary>
            Gets the <see cref="T:TVA.Units.Speed"/> value in feet per minute.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Speed"/> in feet per minute.</returns>
        </member>
        <member name="M:TVA.Units.Speed.ToInchesPerSecond">
            <summary>
            Gets the <see cref="T:TVA.Units.Speed"/> value in inches per second.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Speed"/> in inches per second.</returns>
        </member>
        <member name="M:TVA.Units.Speed.ToKnots">
            <summary>
            Gets the <see cref="T:TVA.Units.Speed"/> value in knots (International).
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Speed"/> in knots.</returns>
        </member>
        <member name="M:TVA.Units.Speed.ToMach">
            <summary>
            Gets the <see cref="T:TVA.Units.Speed"/> value in mach.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Speed"/> in mach.</returns>
        </member>
        <member name="M:TVA.Units.Speed.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Speed"/>.</exception>
        </member>
        <member name="M:TVA.Units.Speed.CompareTo(TVA.Units.Speed)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Speed"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Speed"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Speed"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.Equals(TVA.Units.Speed)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Speed"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Speed"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Speed.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Speed"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Speed"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Speed.MinValue"/> or greater than <see cref="F:TVA.Units.Speed.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Speed.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Speed"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Speed"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Speed.MinValue"/> or greater than <see cref="F:TVA.Units.Speed.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Speed.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Speed"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Speed"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Speed.MinValue"/> or greater than <see cref="F:TVA.Units.Speed.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Speed.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Speed"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Speed"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Speed.MinValue"/> or greater than <see cref="F:TVA.Units.Speed.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Speed.TryParse(System.String,TVA.Units.Speed@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Speed"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Speed"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter per second is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Speed.MinValue"/> or greater than <see cref="F:TVA.Units.Speed.MaxValue"/>.
            This parameter per second is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Speed.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Speed@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Speed"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Speed"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter per second is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Speed.MinValue"/> or
            greater than <see cref="F:TVA.Units.Speed.MaxValue"/>. This parameter per second is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Speed.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Equality(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Inequality(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_LessThan(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_LessThanOrEqual(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_GreaterThan(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_GreaterThanOrEqual(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Implicit(System.Double)~TVA.Units.Speed">
            <summary>
            Implicitly converts value, represented in meters per second, to a <see cref="T:TVA.Units.Speed"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Speed"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Implicit(TVA.Units.Speed)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Speed"/>, represented in meters per second, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Speed"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Modulus(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Speed"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Addition(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Speed"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Subtraction(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Speed"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Multiply(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Speed"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Division(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Speed"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Speed.op_Exponent(TVA.Units.Speed,TVA.Units.Speed)">
            <summary>
            Returns result of first value raised to speed of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Speed"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Speed"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result.</returns>
        </member>
        <member name="F:TVA.Units.Speed.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Speed"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Speed.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Speed"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Speed.FromMilesPerHour(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Speed"/> value from the specified <paramref name="value"/> in miles per hour.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Speed"/> value in miles per hour.</param>
            <returns>New <see cref="T:TVA.Units.Speed"/> object from the specified <paramref name="value"/> in miles per hour.</returns>
        </member>
        <member name="M:TVA.Units.Speed.FromKilometersPerHour(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Speed"/> value from the specified <paramref name="value"/> in kilometers per hour.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Speed"/> value in kilometers per hour.</param>
            <returns>New <see cref="T:TVA.Units.Speed"/> object from the specified <paramref name="value"/> in kilometers per hour.</returns>
        </member>
        <member name="M:TVA.Units.Speed.FromFeetPerMinute(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Speed"/> value from the specified <paramref name="value"/> in feet per minute.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Speed"/> value in feet per minute.</param>
            <returns>New <see cref="T:TVA.Units.Speed"/> object from the specified <paramref name="value"/> in feet per minute.</returns>
        </member>
        <member name="M:TVA.Units.Speed.FromInchesPerSecond(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Speed"/> value from the specified <paramref name="value"/> in inches per second.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Speed"/> value in inches per second.</param>
            <returns>New <see cref="T:TVA.Units.Speed"/> object from the specified <paramref name="value"/> in inches per second.</returns>
        </member>
        <member name="M:TVA.Units.Speed.FromKnots(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Speed"/> value from the specified <paramref name="value"/> in knots (International).
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Speed"/> value in knots.</param>
            <returns>New <see cref="T:TVA.Units.Speed"/> object from the specified <paramref name="value"/> in knots.</returns>
        </member>
        <member name="M:TVA.Units.Speed.FromMach(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Speed"/> value from the specified <paramref name="value"/> in mach.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Speed"/> value in mach.</param>
            <returns>New <see cref="T:TVA.Units.Speed"/> object from the specified <paramref name="value"/> in mach.</returns>
        </member>
        <member name="T:TVA.Units.Power">
            <summary>Represents a power measurement, in watts, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a power in watts; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other power representations, specifically
            horsepower, metric horsepower, boiler horsepower, BTU per second, calorie per second, and liter-atmosphere
            per second. Metric conversions are handled simply by applying the needed <see cref="T:TVA.Units.SI"/> conversion factor,
            for example:
            <example>
            Convert power in watts to megawatts:
            <code>
            public double GetMegawatts(Power watts)
            {
                return watts / SI.Mega;
            }
            </code>
            This example converts megawatts to mechanical horsepower:
            <code>
            public double GetHorsepower(double megawatts)
            {
                return (new Power(megawatts * SI.Mega)).ToHorsepower();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Power.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Power"/>.
            </summary>
            <param name="value">New power value in watts.</param>
        </member>
        <member name="M:TVA.Units.Power.ToHorsepower">
            <summary>
            Gets the <see cref="T:TVA.Units.Power"/> value in mechanical horsepower (Imperial).
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Power"/> in mechanical horsepower.</returns>
        </member>
        <member name="M:TVA.Units.Power.ToMetricHorsepower">
            <summary>
            Gets the <see cref="T:TVA.Units.Power"/> value in metric horsepower.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Power"/> in metric horsepower.</returns>
        </member>
        <member name="M:TVA.Units.Power.ToBoilerHorsepower">
            <summary>
            Gets the <see cref="T:TVA.Units.Power"/> value in boiler horsepower.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Power"/> in boiler horsepower.</returns>
        </member>
        <member name="M:TVA.Units.Power.ToBTUPerSecond">
            <summary>
            Gets the <see cref="T:TVA.Units.Power"/> value in BTU (International Table) per second.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Power"/> in BTU per second.</returns>
        </member>
        <member name="M:TVA.Units.Power.ToCaloriesPerSecond">
            <summary>
            Gets the <see cref="T:TVA.Units.Power"/> value in calories (International Table) per second.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Power"/> in calories per second.</returns>
        </member>
        <member name="M:TVA.Units.Power.ToLitersAtmospherePerSecond">
            <summary>
            Gets the <see cref="T:TVA.Units.Power"/> value in liters-atmosphere per second.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Power"/> in liters-atmosphere per second.</returns>
        </member>
        <member name="M:TVA.Units.Power.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Power"/>.</exception>
        </member>
        <member name="M:TVA.Units.Power.CompareTo(TVA.Units.Power)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Power"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Power"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Power"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.Equals(TVA.Units.Power)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Power"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Power"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Power.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Power"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Power"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Power.MinValue"/> or greater than <see cref="F:TVA.Units.Power.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Power.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Power"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Power"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Power.MinValue"/> or greater than <see cref="F:TVA.Units.Power.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Power.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Power"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Power"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Power.MinValue"/> or greater than <see cref="F:TVA.Units.Power.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Power.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Power"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Power"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Power.MinValue"/> or greater than <see cref="F:TVA.Units.Power.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Power.TryParse(System.String,TVA.Units.Power@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Power"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Power"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parawatt is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Power.MinValue"/> or greater than <see cref="F:TVA.Units.Power.MaxValue"/>.
            This parawatt is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Power.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Power@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Power"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Power"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parawatt is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Power.MinValue"/> or
            greater than <see cref="F:TVA.Units.Power.MaxValue"/>. This parawatt is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Power.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Equality(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Inequality(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_LessThan(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_LessThanOrEqual(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_GreaterThan(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_GreaterThanOrEqual(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Implicit(System.Double)~TVA.Units.Power">
            <summary>
            Implicitly converts value, represented in watts, to a <see cref="T:TVA.Units.Power"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Power"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Implicit(TVA.Units.Power)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Power"/>, represented in watts, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Power"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Modulus(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Power"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Addition(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Power"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Subtraction(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Power"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Multiply(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Power"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Division(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Power"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Power.op_Exponent(TVA.Units.Power,TVA.Units.Power)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Power"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Power"/> right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result of the operation.</returns>
        </member>
        <member name="F:TVA.Units.Power.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Power"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Power.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Power"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Power.FromHorsepower(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Power"/> value from the specified <paramref name="value"/> in mechanical horsepower (Imperial).
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Power"/> value in mechanical horsepower.</param>
            <returns>New <see cref="T:TVA.Units.Power"/> object from the specified <paramref name="value"/> in mechanical horsepower.</returns>
        </member>
        <member name="M:TVA.Units.Power.FromMetricHorsepower(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Power"/> value from the specified <paramref name="value"/> in metric horsepower.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Power"/> value in metric horsepower.</param>
            <returns>New <see cref="T:TVA.Units.Power"/> object from the specified <paramref name="value"/> in metric horsepower.</returns>
        </member>
        <member name="M:TVA.Units.Power.FromBoilerHorsepower(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Power"/> value from the specified <paramref name="value"/> in boiler horsepower.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Power"/> value in boiler horsepower.</param>
            <returns>New <see cref="T:TVA.Units.Power"/> object from the specified <paramref name="value"/> in boiler horsepower.</returns>
        </member>
        <member name="M:TVA.Units.Power.FromBTUPerSecond(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Power"/> value from the specified <paramref name="value"/> in BTU (International Table) per second.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Power"/> value in BTU per second.</param>
            <returns>New <see cref="T:TVA.Units.Power"/> object from the specified <paramref name="value"/> in BTU per second.</returns>
        </member>
        <member name="M:TVA.Units.Power.FromCaloriesPerSecond(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Power"/> value from the specified <paramref name="value"/> in calories (International Table) per second.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Power"/> value in calories per second.</param>
            <returns>New <see cref="T:TVA.Units.Power"/> object from the specified <paramref name="value"/> in calories per second.</returns>
        </member>
        <member name="M:TVA.Units.Power.FromLitersAtmospherePerSecond(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Power"/> value from the specified <paramref name="value"/> in liters-atmosphere per second.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Power"/> value in liters-atmosphere per second.</param>
            <returns>New <see cref="T:TVA.Units.Power"/> object from the specified <paramref name="value"/> in liters-atmosphere per second.</returns>
        </member>
        <member name="T:TVA.Security.Cryptography.Standard">
            <summary>
            This class is used internally do define a standard buffer size.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpInputDataStream">
            <summary>
            Defines a FTP data input stream for remote files.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpDataStream">
            <summary>
            FTP data stream.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDataStream.Close">
            <summary>
            Closes the FTP stream and releases any resources associated with the stream.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDataStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference
            point used to obtain the new position.
            </param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">Stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the
            position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the <paramref name="buffer"/>
            contains the specified byte array with the values between
            <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1)
            replaced by the bytes read from the current source.</param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin
            storing the data read from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
            <returns>
            The total number of bytes read into the <paramref name="buffer"/>. This can be less than the 
            number of bytes requested if that many bytes are not currently available, or zero (0) if the
            end of the stream has been reached.
            </returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position
            within this stream by the number of bytes written.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the <paramref name="buffer"/>
            contains the specified byte array with the values between
            <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1)
            replaced by the bytes read from the current source.</param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin
            storing the data read from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDataStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream
            by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the stream.
            </returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDataStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position
            within the stream by one byte.
            </summary>
            <param name="b">The byte to write to the stream.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDataStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="len">The desired length of the current stream in bytes.</param>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDataStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDataStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDataStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDataStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">Stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDataStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">Stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:TVA.Net.Ftp.FtpInputDataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Cannot write to input stream, method is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Cannot write to input stream.</exception>
            <param name="buffer">A <see cref="T:System.Byte"/> array buffer to use.</param>
            <param name="count">An <see cref="T:System.Int32"/> offset into the buffer.</param>
            <param name="offset">An <see cref="T:System.Int32"/> count of bytes to write.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpInputDataStream.WriteByte(System.Byte)">
            <summary>
            Cannot write to input stream, method is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Cannot write to input stream.</exception>
            <param name="b">A <see cref="T:System.Byte"/> to write.</param>
        </member>
        <member name="P:TVA.Net.Ftp.FtpInputDataStream.CanWrite">
            <summary>
            Returns false, cannot write to input stream.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpDirectory">
            <summary>
            Represents a FTP directory.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.FindFile(System.String)">
            <summary>
            Finds matching file name in directory.
            </summary>
            <param name="fileName">FileName to find in directory.</param>
            <returns>File reference, if found, otherwise null if file is not found.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.FindSubDirectory(System.String)">
            <summary>
            Finds matching subdirectory name in directory.
            </summary>
            <param name="dirName">Subdirectory name to find in directory.</param>
            <returns>Subdirectory reference, if found, otherwise null if subdirectory is not found.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.PutFile(System.String)">
            <summary>
            Uploads local file to directory.
            </summary>
            <param name="localFile">Local file to upload.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.PutFile(System.String,System.String)">
            <summary>
            Uploads local file to directory using alternate name.
            </summary>
            <param name="localFile">Local file to upload.</param>
            <param name="remoteFile">Remote filename to use for upload.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.GetFile(System.String)">
            <summary>
            Downloads remote file from directory.
            </summary>
            <param name="remoteFile">Remote filename to download.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.GetFile(System.String,System.String)">
            <summary>
            Downloads remote file from directory using alternate local filename.
            </summary>
            <param name="localFile">Local filename to use for download.</param>
            <param name="remoteFile">Remote filename to download.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.BeginPutFile(System.String)">
            <summary>
            Starts asynchrnonous local file upload to directory.
            </summary>
            <param name="localFile">Local file to upload.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.BeginPutFile(System.String,System.String)">
            <summary>
            Starts asynchrnonous local file upload to directory using alternate name.
            </summary>
            <param name="localFile">Local file to upload.</param>
            <param name="remoteFile">Remote filename to use for upload.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.BeginGetFile(System.String)">
            <summary>
            Starts asynchronous remote file download from directory.
            </summary>
            <param name="remoteFile">Remote filename to download.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.BeginGetFile(System.String,System.String)">
            <summary>
            Starts asynchronous remote file download from directory using alternate local filename.
            </summary>
            <param name="localFile">Local filename to use for download.</param>
            <param name="remoteFile">Remote filename to download.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.RemoveFile(System.String)">
            <summary>
            Removes file from directory.
            </summary>
            <param name="fileName">Remote filename to remove.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.RemoveSubDir(System.String)">
            <summary>
            Removes subdirectory from directory.
            </summary>
            <param name="dirName">Subdirectory name to remove.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.CreateFile(System.String)">
            <summary>
            Creates a new zero-length remote file in directory.
            </summary>
            <param name="newFileName">New remote file name.</param>
            <returns>File reference to new zero-length remote file.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.CreateFileStream(System.String)">
            <summary>
            Creates a new data stream for remote file in directory.
            </summary>
            <param name="newFileName">New remote file name.</param>
            <returns>Output data stream for new remote file.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.Refresh">
            <summary>
            Refreshes directory listing.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.Equals(System.Object)">
            <summary>
            Determines if the two <see cref="T:TVA.Net.Ftp.FtpDirectory"/> objects are equal.
            </summary>
            <param name="obj">Other object to compare.</param>
            <returns><c>true</c> if both objects are equal.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.GetHashCode">
            <summary>
            Generates hash code for this <see cref="T:TVA.Net.Ftp.FtpDirectory"/>.
            </summary>
            <returns>An <see cref="T:System.Int32"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.CompareTo(System.Object)">
            <summary>
            Compares directory or file to another.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare against.</param>
            <returns>An <see cref="T:System.Int32"/> value representing the result. 1 - obj is greater than, 0 - obj is equal to, -1 - obj is less than.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.op_Equality(TVA.Net.Ftp.FtpDirectory,TVA.Net.Ftp.FtpDirectory)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.op_Inequality(TVA.Net.Ftp.FtpDirectory,TVA.Net.Ftp.FtpDirectory)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.op_LessThan(TVA.Net.Ftp.FtpDirectory,TVA.Net.Ftp.FtpDirectory)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.op_GreaterThan(TVA.Net.Ftp.FtpDirectory,TVA.Net.Ftp.FtpDirectory)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.op_LessThanOrEqual(TVA.Net.Ftp.FtpDirectory,TVA.Net.Ftp.FtpDirectory)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpDirectory.op_GreaterThanOrEqual(TVA.Net.Ftp.FtpDirectory,TVA.Net.Ftp.FtpDirectory)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Net.Ftp.FtpDirectory"/> right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating the result.</returns>
        </member>
        <member name="E:TVA.Net.Ftp.FtpDirectory.DirectoryListLineScan">
            <summary>
            Raised when new directory line is scanned.
            </summary>
        </member>
        <member name="E:TVA.Net.Ftp.FtpDirectory.DirectoryScanException">
            <summary>
            Raised when there is an exception scanning a directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.CaseInsensitive">
            <summary>
            Gets or sets FTP case sensitivity of file and directory names.
            </summary>
            <remarks>
            Set to true to not be case sensitive with FTP file and directory names.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.Name">
            <summary>
            Name of directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.FullPath">
            <summary>
            Full path of directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.IsFile">
            <summary>
            Returns false for directory entries.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.IsDirectory">
            <summary>
            Returns true for directory entries.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.Size">
            <summary>
            Gets or sets size of directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.Permission">
            <summary>
            Gets or sets permission of directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.TimeStamp">
            <summary>
            Gets or sets timestamp of directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.Parent">
            <summary>
            Gets parent directory of directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.SubDirectories">
            <summary>
            Gets sub directories of directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpDirectory.Files">
            <summary>
            Gets files of directory.
            </summary>
        </member>
        <member name="T:TVA.Media.Sound.TouchToneKey">
            <summary>
            Touch tone key enumeration.
            </summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Zero">
            <summary>Represents the number "0" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.One">
            <summary>Represents the number "1" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Two">
            <summary>Represents the number "2" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Three">
            <summary>Represents the number "3" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Four">
            <summary>Represents the number "4" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Five">
            <summary>Represents the number "5" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Six">
            <summary>Represents the number "6" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Seven">
            <summary>Represents the number "7" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Eight">
            <summary>Represents the number "8" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Nine">
            <summary>Represents the number "9" on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Asterisk">
            <summary>Represents the "*" key on a touch tone key pad.</summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchToneKey.Pound">
            <summary>Represents the "#" key on a touch tone key pad.</summary>
        </member>
        <member name="T:TVA.Media.Sound.TouchTone">
            <summary>
            Touch tone generator.
            </summary>
            <example>
            This example will "dial a phone number" over the computer's speakers:
            <code>
            using System;
            using TVA.Media;
            using TVA.Media.Sound;
            
            static class Program
            {
                static void Main()
                {
                    WaveFile waveFile = new WaveFile(SampleRate.Hz8000, BitsPerSample.Bits16, DataChannels.Mono);
                    double volume = 0.25D;  // Set volume of TouchTone to 25% of maximum
                    string phoneNumber = "9, 1 (535) 217-1631";
            
                    // Generate touch tones for specified phone number
                    DTMF.Generate(waveFile, TouchTone.GetTouchTones(phoneNumber), volume);
            
                    Console.WriteLine("Dialing {0}...", phoneNumber);
                    waveFile.Play();
            
                    Console.ReadKey();
                }
            } 
            </code>
            </example>
        </member>
        <member name="T:TVA.Media.Sound.DTMF">
             <summary>Dual Tone Multi-Frequency Class.</summary>
             <example>
             This example generates some familiar dual tone multi-frequency sounds
             and plays them over the computer's speakers:
             <code>
             using System;
             using TVA.Media;
             using TVA.Media.Sound;
            
             static class Program
             {
                 static void Main()
                 {
                     WaveFile waveFile = new WaveFile(SampleRate.Hz8000, BitsPerSample.Bits16, DataChannels.Mono);
                     double volume = 0.25D;  // Set volume of tones to 25% of maximum
                     DTMF tone;
            
                     // Get the dial tone dual-frequencies
                     tone = DTMF.DialTone;
            
                     // Change the duration of the dial-tone to 3 seconds
                     tone.Duration = 3.0D;
            
                     // Generate a dial tone
                     DTMF.Generate(waveFile, tone, volume);
            
                     // Generate a busy-signal tone, repeat four times
                     DTMF.Generate(waveFile, DTMF.BusySignal, volume, 4);
            
                     // Generate an off-the-hook tone, repeat eight times
                     DTMF.Generate(waveFile, DTMF.OffHook, volume, 8);
            
                     // Get the EBS Alert dual-frequencies
                     tone = DTMF.EmergencyBroadcastSystemAlert;
            
                     // The official duration of an EBS Alert is 22.5 seconds, but
                     // the noise is rather annoying - so we set it to 4 seconds
                     tone.Duration = 4.0D;
            
                     // Generate the EBS Alert noise
                     DTMF.Generate(waveFile, tone, volume);
            
                     // Play all the generated tones
                     waveFile.Play();
            
                     Console.ReadKey();
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:TVA.Media.Sound.DTMF.LowFrequency">
            <summary>Low frequency of <see cref="T:TVA.Media.Sound.DTMF"/>.</summary>
        </member>
        <member name="F:TVA.Media.Sound.DTMF.HighFrequency">
            <summary>High frequency of <see cref="T:TVA.Media.Sound.DTMF"/>.</summary>
        </member>
        <member name="F:TVA.Media.Sound.DTMF.Duration">
            <summary>Frequency duration, in seconds, of <see cref="T:TVA.Media.Sound.DTMF"/>.</summary>
        </member>
        <member name="M:TVA.Media.Sound.DTMF.#ctor">
            <summary>
            Constructs a new <see cref="T:TVA.Media.Sound.DTMF"/>.
            </summary>
        </member>
        <member name="M:TVA.Media.Sound.DTMF.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new <see cref="T:TVA.Media.Sound.DTMF"/> using specified parameters.
            </summary>
            <param name="lowFrequency">A <see cref="T:System.Double"/> low frequency value.</param>
            <param name="highFrequency">A <see cref="T:System.Double"/> high frequency value.</param>
            <param name="duration">A <see cref="T:System.Double"/> duration value.</param>
        </member>
        <member name="M:TVA.Media.Sound.DTMF.ComputeFrequencies(TVA.Media.Sound.DTMF,System.Int64,System.Int32)">
            <summary>
            Computes a dual-tone multi-frequency sound for the given <see cref="T:TVA.Media.Sound.DTMF"/> information and time.
            </summary>
            <param name="tone">Instance of the <see cref="T:TVA.Media.Sound.DTMF"/> specifying the duration as well as the low and high frequencies of the dual-tone.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of tone).</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for the dual-tone at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            <see cref="T:TVA.Media.Sound.DTMF"/> of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Sound.DTMF.Generate(TVA.Media.WaveFile,TVA.Media.Sound.DTMF,System.Double)">
            <summary>
            Generates the specified dual-tone multi-frequency storing it in the specified <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <param name="destination"><see cref="T:TVA.Media.WaveFile"/> used to store generated dual-tone multi-frequencies.</param>
            <param name="tone">Dual-tone multi-frequency to generate.</param>
            <param name="volume">Volume of generated dual-tones as a percentage (0 to 1).</param>
        </member>
        <member name="M:TVA.Media.Sound.DTMF.Generate(TVA.Media.WaveFile,TVA.Media.Sound.DTMF,System.Double,System.Int32)">
            <summary>
            Generates the specified dual-tone multi-frequency <paramref name="repeatCount"/> times storing it in the specified <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <param name="destination"><see cref="T:TVA.Media.WaveFile"/> used to store generated dual-tone multi-frequencies.</param>
            <param name="tone">Dual-tone multi-frequency to generate.</param>
            <param name="volume">Volume of generated dual-tones as a percentage (0 to 1).</param>
            <param name="repeatCount">Number of times to repeat the tone.</param>
        </member>
        <member name="M:TVA.Media.Sound.DTMF.Generate(TVA.Media.WaveFile,TVA.Media.Sound.DTMF[],System.Double)">
            <summary>
            Generates a single instance of each of the specified dual-tone multi-frequencies storing them in the specified <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <param name="destination"><see cref="T:TVA.Media.WaveFile"/> used to store generated dual-tone multi-frequencies.</param>
            <param name="tones">Dual-tone multi-frequencies to generate.</param>
            <param name="volume">Volume of generated dual-tones as a percentage (0 to 1).</param>
        </member>
        <member name="M:TVA.Media.Sound.DTMF.Generate(TVA.Media.WaveFile,TVA.Media.Sound.DTMF[],System.Double,System.Int32)">
            <summary>
            Generates the specified dual-tone multi-frequencies <paramref name="repeatCount"/> times storing them in the specified <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <param name="destination"><see cref="T:TVA.Media.WaveFile"/> used to store generated dual-tone multi-frequencies.</param>
            <param name="tones">Dual-tone multi-frequencies to generate.</param>
            <param name="volume">Volume of generated dual-tones as a percentage (0 to 1).</param>
            <param name="repeatCount">Number of times to repeat each tone.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be expressed as a fractional percentage between zero and one.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="T:TVA.Media.Sound.DTMF"/> only generated for <see cref="T:TVA.Media.WaveFile"/> with a sample rate of 8, 16, 24, 32 or 64 bits per sample.</exception>
        </member>
        <member name="P:TVA.Media.Sound.DTMF.DialTone">
            <summary>Gets the <see cref="T:TVA.Media.Sound.DTMF"/> instance representing a telephone dial tone.</summary>
        </member>
        <member name="P:TVA.Media.Sound.DTMF.OffHook">
            <summary>Gets the <see cref="T:TVA.Media.Sound.DTMF"/> instances representing a telephone off-the-hook signal.</summary>
        </member>
        <member name="P:TVA.Media.Sound.DTMF.BusySignal">
            <summary>Gets the <see cref="T:TVA.Media.Sound.DTMF"/> instances representing a telephone busy signal.</summary>
        </member>
        <member name="P:TVA.Media.Sound.DTMF.EmergencyBroadcastSystemAlert">
            <summary>Gets the <see cref="T:TVA.Media.Sound.DTMF"/> instance representing the Emergency Broadcast System alert tone.</summary>
            <remarks>The official duration of an EBS Alert is 22.5 seconds.</remarks>
        </member>
        <member name="F:TVA.Media.Sound.TouchTone.ValidTouchTones">
            <summary>
            Valid touch tone keys.
            </summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchTone.DefaultKeyDuration">
            <summary>
            Default duration, in seconds, of touch tones.
            </summary>
        </member>
        <member name="F:TVA.Media.Sound.TouchTone.DefaultInterKeyPause">
            <summary>
            Default duration, in seconds, of pause between touch tones.
            </summary>
        </member>
        <member name="M:TVA.Media.Sound.TouchTone.#ctor(TVA.Media.Sound.TouchToneKey)">
            <summary>
            Constructs a new <see cref="T:TVA.Media.Sound.TouchTone"/> for specified touch tone key.
            </summary>
            <param name="key">Touch tone to create.</param>
        </member>
        <member name="M:TVA.Media.Sound.TouchTone.#ctor(System.Char)">
            <summary>
            Constructs a new <see cref="T:TVA.Media.Sound.TouchTone"/> for specified touch tone key character.
            </summary>
            <param name="key">Character of touch tone to create.</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not a valid touch tone character.</exception>
        </member>
        <member name="M:TVA.Media.Sound.TouchTone.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:TVA.Media.Sound.TouchTone"/> for specified touch tone key number.
            </summary>
            <param name="key">Number of touch tone to create (note that * = 10 and # = 11).</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not a valid touch tone number.</exception>
        </member>
        <member name="M:TVA.Media.Sound.TouchTone.GetTouchTones(System.String)">
            <summary>
            Get array of touch tones for given string.
            </summary>
            <param name="keys">String of touch tone characters to convert to touch tones.</param>
            <returns>Array of touch tones for given string.</returns>
            <remarks>Non-touch tone characters are ignored. Commas are interpreted as a one second pause.</remarks>
        </member>
        <member name="M:TVA.Media.Sound.TouchTone.GetTouchTones(System.String,System.Double,System.Double)">
            <summary>
            Get array of touch tones for given string.
            </summary>
            <param name="keys">String of touch tone characters to convert to touch tones.</param>
            <param name="keyDuration">Duration of touch tone key press in seconds, typically fractional.</param>
            <param name="interKeyPause">Time to wait between key presses in seconds, typically fractional.</param>
            <returns>Array of touch tones for given string.</returns>
            <remarks>Non-touch tone characters are ignored. Commas are interpreted as a one second pause.</remarks>
        </member>
        <member name="M:TVA.Media.Sound.TouchTone.TryParse(System.Char,TVA.Media.Sound.TouchTone@)">
            <summary>
            Converts the character representation of a touch tone key into 
            an instance of the <see cref="T:TVA.Media.Sound.TouchTone"/> class. A return value
            indicates whether the conversion succeeded.
            </summary>
            <param name="key">A character containing a touch tone key to convert.</param>
            <param name="result">
            When this method returns, contains an instance of the <see cref="T:TVA.Media.Sound.TouchTone"/>
            class equivalent to the touch tone key, if the conversion succeeded, or null
            if the conversion failed. The conversion fails if the <paramref name="key"/>
            parameter is not a valid touch tone.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Media.Sound.TouchTone.Parse(System.Char)">
            <summary>
            Converts the character representation of a touch tone key into
            an instance of the <see cref="T:TVA.Media.Sound.TouchTone"/> class.
            </summary>
            <param name="key">A character containing a touch tone key to convert.</param>
            <returns>
            An instance of the <see cref="T:TVA.Media.Sound.TouchTone"/> class equivalent to the touch tone
            chracter contained in <paramref name="key"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not a valid touch tone character.</exception>
        </member>
        <member name="P:TVA.Media.Sound.TouchTone.Key">
            <summary>Gets or sets touch tone key for this touch tone.</summary>
        </member>
        <member name="T:TVA.Media.RiffHeaderChunk">
            <summary>
            Represents the header chunk in a RIFF media format file.
            </summary>
        </member>
        <member name="T:TVA.Media.RiffChunk">
            <summary>
            Represents the type ID and size for a "chunk" in a RIFF media format file.
            </summary>
            <remarks>
            <para>
            The Resource Interchange File Format (RIFF) is a generic meta-format for storing data in tagged chunks.
            It was introduced in 1991 by Microsoft and IBM, and was presented by Microsoft as the default format for
            Windows 3.1 multimedia files. It is based on Electronic Arts's Interchange File Format, introduced in 1985,
            the only difference being that multi-byte integers are in little-endian format, native to the 80x86 processor
            series used in IBM PCs, rather than the big-endian format native to the 68k processor series used in Amiga and
            Apple Macintosh computers, where IFF files were heavily used. (The specification for AIFF, the big-endian
            analogue of RIFF, was published by Apple Computer in 1988.) The Microsoft implementation is mostly known
            through file formats like AVI, ANI and WAV, which use the RIFF meta-format as their basis.
            </para>
            <para>
            Some common RIFF file types:
            <list type="table">
            <listheader>
                <term>File extension</term>
                <description>Description</description>
            </listheader>
            <item>
                <term>WAV</term>
                <description>Windows audio file</description>
            </item>
            <item>
                <term>AVI</term>
                <description>Windows audio/video file</description>
            </item>
            <item>
                <term>ANI</term>
                <description>Animated Windows cursors</description>
            </item>
            <item>
                <term>RMI</term>
                <description>Windows RIFF MIDI file</description>
            </item>
            <item>
                <term>CDR</term>
                <description>CorelDRAW vector graphics file</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Media.RiffChunk.#ctor(TVA.Media.RiffChunk,System.String)">
            <summary>
            Constructor for derived classes used to initialize and validate  <see cref="T:TVA.Media.RiffChunk"/> properties.
            </summary>
            <param name="preRead">Pre-parsed <see cref="T:TVA.Media.RiffChunk"/> header.</param>
            <param name="typeID">Expected type ID.</param>
        </member>
        <member name="M:TVA.Media.RiffChunk.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:TVA.Media.RiffChunk"/> for the given <paramref name="typeID"/>.
            </summary>
            <param name="typeID">Expected type ID.</param>
        </member>
        <member name="M:TVA.Media.RiffChunk.Clone">
            <summary>
            Creates a copy of the <see cref="T:TVA.Media.RiffChunk"/>.
            </summary>
            <returns>A new copy of the <see cref="T:TVA.Media.RiffChunk"/>.</returns>
        </member>
        <member name="M:TVA.Media.RiffChunk.ReadNext(System.IO.Stream)">
            <summary>
            Attempts to read the next RIFF chunk from the <paramref name="source"/> stream.
            </summary>
            <param name="source">Source stream for next RIFF chunk.</param>
            <returns>Next RIFF chunk read from the <paramref name="source"/> stream.</returns>
            <exception cref="T:System.InvalidOperationException">RIFF chunk too small, media file corrupted.</exception>
        </member>
        <member name="P:TVA.Media.RiffChunk.TypeID">
            <summary>Four character text identifer for RIFF chunk.</summary>
            <exception cref="T:System.ArgumentNullException">TypeID cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">TypeID must be extactly 4 characters in length.</exception>
        </member>
        <member name="P:TVA.Media.RiffChunk.ChunkSize">
            <summary>Size of <see cref="T:TVA.Media.RiffChunk"/>.</summary>
        </member>
        <member name="P:TVA.Media.RiffChunk.BinaryImage">
            <summary>
            Returns a binary representation of this <see cref="T:TVA.Media.RiffChunk"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.RiffChunk.BinaryLength">
            <summary>
            Gets the length of a <see cref="T:TVA.Media.RiffChunk"/> consisting of type ID and chunk size (i.e., 8 bytes).
            </summary>
        </member>
        <member name="F:TVA.Media.RiffHeaderChunk.RiffTypeID">
            <summary>
            Type ID of a RIFF header chunk.
            </summary>
        </member>
        <member name="M:TVA.Media.RiffHeaderChunk.#ctor(System.String)">
            <summary>
            Constructs a new RIFF header chunk for the specified format.
            </summary>
            <param name="format">RIFF header chunk header format.</param>
        </member>
        <member name="M:TVA.Media.RiffHeaderChunk.#ctor(TVA.Media.RiffChunk,System.IO.Stream,System.String)">
            <summary>Reads a new RIFF header from the specified stream.</summary>
            <param name="preRead">Pre-parsed <see cref="T:TVA.Media.RiffChunk"/> header.</param>
            <param name="source">Source stream to read data from.</param>
            <param name="format">Expected RIFF media format (e.g., "WAVE").</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format"/> must be extactly 4 characters in length.</exception>
        </member>
        <member name="M:TVA.Media.RiffHeaderChunk.Initialize(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses <see cref="T:TVA.Media.RiffHeaderChunk"/> object from <paramref name="binaryImage"/>.
            </summary>
            <param name="binaryImage">Binary image to be used for initialization.</param>
            <param name="startIndex">0-based starting index in the <paramref name="binaryImage"/> to be used for initialization.</param>
            <param name="length">Valid number of bytes within binary image.</param>
            <returns>The number of bytes used for initialization in the <paramref name="binaryImage"/> (i.e., the number of bytes parsed).</returns>
            <exception cref="T:System.InvalidOperationException">Not enough buffer length provided to read RIFF format section ID.</exception>
        </member>
        <member name="M:TVA.Media.RiffHeaderChunk.Clone">
            <summary>
            Returns a cloned instance of this RIFF header chunk.
            </summary>
            <returns>A cloned instance of this RIFF header chunk.</returns>
        </member>
        <member name="P:TVA.Media.RiffHeaderChunk.Format">
            <summary>
            Gets or sets format for RIFF header chunk.
            </summary>
        </member>
        <member name="P:TVA.Media.RiffHeaderChunk.BinaryImage">
            <summary>
            Gets binary representation of RIFF header chunk.
            </summary>
        </member>
        <member name="P:TVA.Media.RiffHeaderChunk.BinaryLength">
            <summary>
            Gets length of binary representation of RIFF header chunk.
            </summary>
        </member>
        <member name="T:TVA.IO.Checksums.Xor8">
            <summary>Calculates byte length (8-bit) XOR-based check-sum on specified portion of a buffer.</summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor8.#ctor">
            <summary>
            Creates a new instance of the Xor8Bit class.
            The checksum starts off with a value of 0.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor8.Reset">
            <summary>
            Resets the checksum to the initial value.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Xor8.Update(System.Byte)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to use for the update.</param>
        </member>
        <member name="M:TVA.IO.Checksums.Xor8.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:TVA.IO.Checksums.Xor8.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:TVA.IO.Checksums.Xor8.Value">
            <summary>
            Returns the Xor 8-bit checksum computed so far.
            </summary>
        </member>
        <member name="T:TVA.Identity.UserAccountControl">
            <summary>
            Provides facilities for enabling and disabling User Account Control (UAC), determining elevation and virtualization status, and launching a process under elevated credentials.
            </summary>
        </member>
        <member name="M:TVA.Identity.UserAccountControl.CreateProcessAsAdmin(System.String,System.String)">
            <summary>
            Creates a process under the elevated token, regardless of UAC settings or the manifest associated with that process.
            </summary>
            <param name="fileName">The path to the executable file.</param>
            <param name="arguments">The command-line arguments to pass to the process.</param>
            <returns>A <see cref="T:System.Diagnostics.Process"/> object representing the newly created process.</returns>
        </member>
        <member name="M:TVA.Identity.UserAccountControl.CreateProcessAsStandardUser(System.String,System.String)">
            <summary>
            Creates a process under the standard user if the current process is elevated.  The identity of the standard user is
            determined by retrieving the user token of the currently running Explorer (shell) process.
            </summary>
            <param name="fileName">The path to the executable file.</param>
            <param name="arguments">The command-line arguments to pass to the process.</param>
            <returns>A <see cref="T:System.Diagnostics.Process"/> object representing the newly created process.</returns>
            <remarks>
            <para>
            This method requires administrative privileges. An exception will be thrown if the current user is not elevated.
            </para>
            <para>
            This is an especially useful function if you are trying to shell an application from an installation program. With UAC
            enabled, an application spawned from a setup program will be the "NT AUTHORITY\SYSTEM" user - not the local user that
            executed the installer; this can wreak havoc if the spawned application needs to authenticate the local user.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Identity.UserAccountControl.DisableUac">
            <summary>
            Disables User Account Control by changing the LUA registry key. The changes do not have effect until the system is restarted.
            </summary>
        </member>
        <member name="M:TVA.Identity.UserAccountControl.DisableUacAndRestartWindows">
            <summary>
            Disables User Account Control and restarts the system.
            </summary>
        </member>
        <member name="M:TVA.Identity.UserAccountControl.EnableUac">
            <summary>
            Enables User Account Control by changing the LUA registry key. The changes do not have effect until the system is restarted.
            </summary>
        </member>
        <member name="M:TVA.Identity.UserAccountControl.EnableUacAndRestartWindows">
            <summary>
            Enables User Account Control and restarts the system.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserAccountControl.IsUserAdmin">
            <summary>
            Returns <c>true</c> if the current user has administrator privileges.
            </summary>
            <remarks>
            If UAC is on, then this property will return <c>true</c> even if the current process is not running elevated.
            If UAC is off, then this property will return <c>true</c> if the user is part of the built-in <i>Administrators</i> group.
            </remarks>
        </member>
        <member name="P:TVA.Identity.UserAccountControl.IsUacEnabled">
            <summary>
            Returns <c>true</c> if User Account Control (UAC) is enabled on this machine.
            </summary>
            <remarks>
            This value is obtained by checking the LUA registry key. It is possible that the user has not restarted the machine after
            enabling/disabling UAC. In that case, the value of the registry key does not reflect the true state of affairs.
            </remarks>
        </member>
        <member name="P:TVA.Identity.UserAccountControl.IsCurrentProcessVirtualized">
            <summary>
            Returns <c>true</c> if the current process is using UAC virtualization.
            </summary>
            <remarks>
            Under UAC virtualization, file system and registry accesses to specific locations performed by an application are redirected to
            provide backwards compatibility. 64-bit applications or applications that have an associated manifest do not enjoy UAC virtualization
            because they are assumed to be compatible with Vista and UAC.
            </remarks>
        </member>
        <member name="P:TVA.Identity.UserAccountControl.IsCurrentProcessElevated">
            <summary>
             Returns <c>true</c> if the current process is elevated, i.e. if the process went through an elevation consent phase.
             </summary>
             <remarks>
             This property will return <c>false</c> if UAC is disabled and the process is running as admin.  It only determines whether the process
             went through the elevation procedure.
             </remarks>
        </member>
        <member name="T:TVA.ErrorManagement.SmtpTraceListener">
            <summary>
            Represents an e-mail based <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
            <example>
            Below is the config file entry required for enabling e-mail based tracing using <see cref="T:TVA.ErrorManagement.SmtpTraceListener"/>:
            <code>
            <![CDATA[
            <configuration>
              <system.diagnostics>
                <trace>
                  <listeners>
                    <add name="SmtpTraceListener" type="TVA.ErrorManagement.SmtpTraceListener,TVA.Core" initializeData="sender@email.com,recipient@email.com,smtp.email.com"/>
                  </listeners>
                </trace>
              </system.diagnostics>
            </configuration>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:TVA.ErrorManagement.SmtpTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.ErrorManagement.SmtpTraceListener"/> class.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.SmtpTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.ErrorManagement.SmtpTraceListener"/> class.
            </summary>
            <param name="initializationData">Initialization text in the format of "sender@email.com,recipient@email.com,smtp.email.com".</param>
        </member>
        <member name="M:TVA.ErrorManagement.SmtpTraceListener.Write(System.String)">
            <summary>
            Sends an e-mail message containing the specified message.
            </summary>
            <param name="message">The message to be sent in the e-mail message.</param>
        </member>
        <member name="M:TVA.ErrorManagement.SmtpTraceListener.WriteLine(System.String)">
            <summary>
            Sends an e-mail message containing the specified message.
            </summary>
            <param name="message">The message to be sent in the e-mail message.</param>
        </member>
        <member name="T:TVA.ErrorManagement.NamespaceDoc">
            <summary>
            Contains classes used to simplify and standardize error management for applications.
            </summary>
        </member>
        <member name="T:TVA.Collections.DictionaryList`2">
            <summary>
            Represents a sorted dictionary style list that supports <see cref="T:System.Collections.IList"/>.
            </summary>
            <remarks>
            <para>
            Have you ever needed the quick look-up feature on a Dictionary (e.g., Hashtable), but ended
            up missing the indexed or sequential access like you have in a list? You may have wondered why
            the .NET dictionary class doesn’t implement the IList interface which allows this. The reason
            IDictionary implementations do not normally implement the IList interface is because of
            ambiguity that is caused when implementing an integer key. For example, if you created a
            dictionary style class with a key of type "Integer" that actually did implement IList(Of T),
            you would not be able to access items in the IList interface by index without "casting" the
            class as IList. This is because the Item property in both the IDictionary and IList would have
            the same parameters. Note, however, that generics in .NET 2.0 gladly allow a class to implement
            both IDictionary and IList (even specifying as Integer as the key) so long you as you are happy
            knowing that the compiler will choose if you access your items by index or key. Given that
            caveat, there are many times when you need a dictionary style collection but also desire an
            IList implementation so the class can be used in other ways without conversion. As a result of
            these needs, we’ve added a generic class to code library called a DictionaryList -- which is
            essentially just a sorted dictionary style list (i.e., SortedList) that implements the
            IList(Of T) interface (specifically as IList(Of KeyValuePair(Of TKey, TValue))). You will find
            all of your convenient expected methods related to both dictionaries and lists; that is, you can
            look-up items by key or by index. The class works perfectly for any non-Integer based key
            (e.g., String, custom class, etc.) -- note that specifying an Integer as the key for the class
            won’t cause an error, but it also will not be very useful. However, you can specify the key for
            your DictionaryList as a "Long," which allows you to use long integers for keyed look-ups and
            regular integers for indexed access--the best of both worlds! In summary, I would not change
            your programming habits to start using this for "my collection for everything," as nothing comes
            for free; however, if you have a need for a "hybrid" collection class, this fits the bill.
            </para>
            <para>
            Important note about using an "Integer" as the key for this class: IDictionary implementations
            do not normally implement the IList interface because of ambiguity that is caused when implementing
            an integer key. For example, if you implement this class with a key of type "Integer" you will not
            be able to access items in the queue by index without "casting" the class as IList. This is because
            the Item property in both the IDictionary and IList would have the same parameters.
            </para>
            <para>
            Note that prior to the addition of Generics in .NET, the class that performed a similar function
            was the "NameObjectCollectionBase" in the System.Collections.Specialized namespace which
            specifically allowed item access by either key or by index.  This class is similar in function
            but instead is a generic class allowing use with any strongly typed key or value. 
            </para>
            </remarks>
            <typeparam name="TKey">Generic key type.</typeparam>
            <typeparam name="TValue">Genervic value type.</typeparam>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.#ctor">
            <summary>
            Creates a new <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
            <param name="item">The key value pair item to add.</param>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.Clear">
            <summary>
            Removes all items from the <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:TVA.Collections.DictionaryList`2"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.DictionaryList`2"/>.</param>
            <returns>true if item is found in the <see cref="T:TVA.Collections.DictionaryList`2"/>; otherwise, false</returns>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:TVA.Collections.DictionaryList`2"/> to an <see cref="T:System.Array"/>, starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements 
            copied from <see cref="T:TVA.Collections.DictionaryList`2"/>. The array must 
            have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:TVA.Collections.DictionaryList`2"/>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:TVA.Collections.DictionaryList`2"/>; 
            otherwise, false. This method also returns false if item is not found in 
            the original <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </returns>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.IndexOf(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines the index of a specific item in the <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.DictionaryList`2"/>.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:TVA.Collections.DictionaryList`2"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.Insert(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Inserts an item to the <see cref="T:TVA.Collections.DictionaryList`2"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:TVA.Collections.DictionaryList`2"/>.</param>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:TVA.Collections.DictionaryList`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:TVA.Collections.DictionaryList`2"/>.</param>
            <returns>true if the <see cref="T:TVA.Collections.DictionaryList`2"/> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:TVA.Collections.DictionaryList`2"/> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:TVA.Collections.DictionaryList`2"/>. The value can be null for reference types.</param>
            <returns>true if the <see cref="T:TVA.Collections.DictionaryList`2"/> contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.IndexOfKey(`0)">
            <summary>
            Searches for the specified key and returns the zero-based index within the entire <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:TVA.Collections.DictionaryList`2"/>.</param>
            <returns>The zero-based index of key within the entire <see cref="T:TVA.Collections.DictionaryList`2"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.IndexOfValue(`1)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence within the entire <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
            <param name="value">The value to locate in the <see cref="T:TVA.Collections.DictionaryList`2"/>. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of value within the entire <see cref="T:TVA.Collections.DictionaryList`2"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false. This method also returns false if key
            was not found in the original <see cref="T:TVA.Collections.DictionaryList`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.DictionaryList`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if 
            the key is found; otherwise, the default value for the type of the value
            parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the <see cref="T:TVA.Collections.DictionaryList`2"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:TVA.Collections.DictionaryList`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:TVA.Collections.DictionaryList`2"/>.
            </summary>
        </member>
        <member name="P:TVA.Collections.DictionaryList`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:TVA.Collections.DictionaryList`2"/> is read-only.
            </summary>
        </member>
        <member name="P:TVA.Collections.DictionaryList`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:TVA.Collections.DictionaryList`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="P:TVA.Collections.DictionaryList`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:TVA.Collections.DictionaryList`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="T:TVA.Adapters.Adapter">
            <summary>
            Represents an adapter that could execute in isolation in a seperate <see cref="T:System.AppDomain"/>.
            </summary>
            <seealso cref="T:TVA.Adapters.AdapterLoader`1"/>
        </member>
        <member name="M:TVA.Adapters.Adapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Adapters.Adapter"/>.
            </summary>
        </member>
        <member name="M:TVA.Adapters.Adapter.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Adapters.Adapter"/> is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Adapters.Adapter.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Adapters.Adapter"/>.
            </summary>
        </member>
        <member name="M:TVA.Adapters.Adapter.Initialize">
            <summary>
            Initializes the <see cref="T:TVA.Adapters.Adapter"/>.
            </summary>
        </member>
        <member name="M:TVA.Adapters.Adapter.SaveSettings">
            <summary>
            Saves <see cref="T:TVA.Adapters.Adapter"/> settings to the config file if the <see cref="P:TVA.Adapters.Adapter.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Adapters.Adapter.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Adapters.Adapter.LoadSettings">
            <summary>
            Loads saved <see cref="T:TVA.Adapters.Adapter"/> settings from the config file if the <see cref="P:TVA.Adapters.Adapter.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Adapters.Adapter.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Adapters.Adapter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Adapters.Adapter"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:TVA.Adapters.Adapter.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.Adapters.Adapter"/> is currently enabled.
            </summary>
        </member>
        <member name="P:TVA.Adapters.Adapter.PersistSettings">
            <summary>
            Gets or sets a boolean value that indicates whether <see cref="T:TVA.Adapters.Adapter"/> settings are to be saved to the config file.
            </summary>
        </member>
        <member name="P:TVA.Adapters.Adapter.SettingsCategory">
            <summary>
            Gets or sets the category under which <see cref="T:TVA.Adapters.Adapter"/> settings are to be saved to the config file if the <see cref="P:TVA.Adapters.Adapter.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.Adapters.Adapter.MemoryUsage">
            <summary>
            Gets the memory utilzation of the <see cref="T:TVA.Adapters.Adapter"/> in bytes if executing in a seperate <see cref="T:System.AppDomain"/>, otherwise <see cref="F:System.Double.NaN"/>.
            </summary>
            <remarks><see cref="P:TVA.Adapters.Adapter.MemoryUsage"/> gets updated only after a full blocking collection by <see cref="T:System.GC"/> (eg. <see cref="M:System.GC.Collect"/>).</remarks>
        </member>
        <member name="P:TVA.Adapters.Adapter.ProcessorUsage">
            <summary>
            Gets the % processor utilization of the <see cref="T:TVA.Adapters.Adapter"/> if executing in a seperate <see cref="T:System.AppDomain"/> otherwise <see cref="F:System.Double.NaN"/>.
            </summary>
        </member>
        <member name="P:TVA.Adapters.Adapter.Name">
            <summary>
            Gets the unique identifier of the <see cref="T:TVA.Adapters.Adapter"/>.
            </summary>
        </member>
        <member name="P:TVA.Adapters.Adapter.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:TVA.Adapters.Adapter"/>.
            </summary>
        </member>
        <member name="P:TVA.Adapters.Adapter.Domain">
            <summary>
            Gets the <see cref="T:System.AppDomain"/> in which the <see cref="T:TVA.Adapters.Adapter"/> is executing.
            </summary>
        </member>
        <member name="T:TVA.TypeExtensions">
            <summary>
            Extensions to all <see cref="T:System.Type"/> objects.
            </summary>
        </member>
        <member name="M:TVA.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Determines if the specified type is a native structure that represents a numeric value.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> being tested.</param>
            <returns><c>true</c> if the specified type is a native structure that represents a numeric value.</returns>
            <remarks>
            For this method a boolean value is not considered numeric even though it can be thought of as a bit.
            This expression returns <c>true</c> if the type is one of the following:<br/><br/>
                SByte, Byte, Int16, UInt16, Int24, UInt24, Int32, UInt32, Int64, UInt64, Single, Double, Decimal
            </remarks>
        </member>
        <member name="M:TVA.TypeExtensions.GetRootType(System.Type)">
            <summary>
            Gets the root type in the inheritace hierarchy from which the specified <paramref name="type"/> inherits.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> whose root type is to be found.</param>
            <returns>The root type in the inheritance hierarchy from which the specified <paramref name="type"/> inherits.</returns>
            <remarks>
            Unless input <paramref name="type"/> is <see cref="T:System.Object"/> or <see cref="T:System.MarshalByRefObject"/>, the returned type will never 
            be <see cref="T:System.Object"/> or <see cref="T:System.MarshalByRefObject"/>, even though all types ultimately inherit from either one of them.
            </remarks>
        </member>
        <member name="M:TVA.TypeExtensions.LoadImplementations(System.Type)">
            <summary>
            Loads public types from assemblies in the application binaries directory that implement the specified 
            <paramref name="type"/> either through class inheritance or interface implementation.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that must be implemented by the public types.</param>
            <returns>Public types that implement the specified <paramref name="type"/>.</returns>
        </member>
        <member name="M:TVA.TypeExtensions.LoadImplementations(System.Type,System.Boolean)">
            <summary>
            Loads public types from assemblies in the application binaries directory that implement the specified 
            <paramref name="type"/> either through class inheritance or interface implementation.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that must be implemented by the public types.</param>
            <param name="excludeAbstractTypes">true to exclude public types that are abstract; otherwise false.</param>
            <returns>Public types that implement the specified <paramref name="type"/>.</returns>
        </member>
        <member name="M:TVA.TypeExtensions.LoadImplementations(System.Type,System.String)">
            <summary>
            Loads public types from assemblies in the specified <paramref name="binariesDirectory"/> that implement 
            the specified <paramref name="type"/> either through class inheritance or interface implementation.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that must be implemented by the public types.</param>
            <param name="binariesDirectory">The directory containing the assemblies to be processed.</param>
            <returns>Public types that implement the specified <paramref name="type"/>.</returns>
        </member>
        <member name="M:TVA.TypeExtensions.LoadImplementations(System.Type,System.String,System.Boolean)">
            <summary>
            Loads public types from assemblies in the specified <paramref name="binariesDirectory"/> that implement 
            the specified <paramref name="type"/> either through class inheritance or interface implementation.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that must be implemented by the public types.</param>
            <param name="binariesDirectory">The directory containing the assemblies to be processed.</param>
            <param name="excludeAbstractTypes">true to exclude public types that are abstract; otherwise false.</param>
            <returns>Public types that implement the specified <paramref name="type"/>.</returns>
        </member>
        <member name="T:TVA.NumericExtensions">
            <summary>Defines extension functions related to numbers.</summary>
        </member>
        <member name="M:TVA.NumericExtensions.NotZero``1(``0)">
            <summary>Ensures parameter passed to function is not zero. Returns -1
            if <paramref name="source">source</paramref> is zero.</summary>
            <param name="source">Value to test for zero.</param>
            <typeparam name="T">Return type used for immediate expression</typeparam>
            <returns>A non-zero value.</returns>
        </member>
        <member name="M:TVA.NumericExtensions.NotZero``1(``0,``0)">
            <summary>Ensures parameter passed to function is not zero.</summary>
            <param name="source">Value to test for zero.</param>
            <param name="nonZeroReturnValue">Value to return if <paramref name="source">source</paramref> is
            zero.</param>
            <typeparam name="T">Return type used for immediate expression</typeparam>
            <returns>A non-zero value.</returns>
            <remarks>To optimize performance, this function does not validate that the notZeroReturnValue is not
            zero.</remarks>
        </member>
        <member name="M:TVA.NumericExtensions.NotEqualTo``1(``0,``0,``0)">
            <summary>Ensures test parameter passed to function is not equal to the specified value.</summary>
            <param name="source">Value to test.</param>
            <param name="notEqualToValue">Value that represents the undesired value (e.g., zero).</param>
            <param name="alternateValue">Value to return if <paramref name="source">source</paramref> is equal
            to the undesired value.</param>
            <typeparam name="T">Structure or class that implements IEquatable(Of T) (e.g., Double, Single,
            Integer, etc.).</typeparam>
            <returns>A value not equal to notEqualToValue.</returns>
            <remarks>To optimize performance, this function does not validate that the notEqualToValue is not equal
            to the alternateValue.</remarks>
        </member>
        <member name="M:TVA.NumericExtensions.NotLessThan``1(``0,``0)">
            <summary>Ensures test parameter passed to function is not less than the specified value.</summary>
            <param name="source">Value to test.</param>
            <param name="notLessThanValue">Value that represents the lower limit for the source. This value
            is returned if source is less than notLessThanValue.</param>
            <typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single,
            Integer, etc.).</typeparam>
            <returns>A value not less than notLessThanValue.</returns>
            <remarks>If source is less than notLessThanValue, then notLessThanValue is returned.</remarks>
        </member>
        <member name="M:TVA.NumericExtensions.NotLessThan``1(``0,``0,``0)">
            <summary>Ensures test parameter passed to function is not less than the specified value.</summary>
            <param name="source">Value to test.</param>
            <param name="notLessThanValue">Value that represents the lower limit for the source.</param>
            <param name="alternateValue">Value to return if <paramref name="source">source</paramref> is
            less than <paramref name="notLessThanValue">notLessThanValue</paramref>.</param>
            <typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single,
            Integer, etc.).</typeparam>
            <returns>A value not less than notLessThanValue.</returns>
            <remarks>To optimize performance, this function does not validate that the notLessThanValue is not
            less than the alternateValue.</remarks>
        </member>
        <member name="M:TVA.NumericExtensions.NotLessThanOrEqualTo``1(``0,``0,``0)">
            <summary>Ensures test parameter passed to function is not less than or equal to the specified value.</summary>
            <param name="source">Value to test.</param>
            <param name="notLessThanOrEqualToValue">Value that represents the lower limit for the source.</param>
            <param name="alternateValue">Value to return if <paramref name="source">source</paramref> is
            less than or equal to <paramref name="notLessThanOrEqualToValue">notLessThanOrEqualToValue</paramref>.</param>
            <typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single,
            Integer, etc.).</typeparam>
            <returns>A value not less than or equal to notLessThanOrEqualToValue.</returns>
            <remarks>To optimize performance, this function does not validate that the notLessThanOrEqualToValue is
            not less than or equal to the alternateValue.</remarks>
        </member>
        <member name="M:TVA.NumericExtensions.NotGreaterThan``1(``0,``0)">
            <summary>Ensures test parameter passed to function is not greater than the specified value.</summary>
            <param name="source">Value to test.</param>
            <param name="notGreaterThanValue">Value that represents the upper limit for the source. This
            value is returned if source is greater than notGreaterThanValue.</param>
            <typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single,
            Integer, etc.).</typeparam>
            <returns>A value not greater than notGreaterThanValue.</returns>
            <remarks>If source is greater than notGreaterThanValue, then notGreaterThanValue is returned.</remarks>
        </member>
        <member name="M:TVA.NumericExtensions.NotGreaterThan``1(``0,``0,``0)">
            <summary>Ensures test parameter passed to function is not greater than the specified value.</summary>
            <param name="source">Value to test.</param>
            <param name="notGreaterThanValue">Value that represents the upper limit for the source.</param>
            <param name="alternateValue">Value to return if <paramref name="source">source</paramref> is
            greater than <paramref name="notGreaterThanValue">notGreaterThanValue</paramref>.</param>
            <typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single,
            Integer, etc.).</typeparam>
            <returns>A value not greater than notGreaterThanValue.</returns>
            <remarks>To optimize performance, this function does not validate that the notGreaterThanValue is
            not greater than the alternateValue</remarks>
        </member>
        <member name="M:TVA.NumericExtensions.NotGreaterThanOrEqualTo``1(``0,``0,``0)">
            <summary>Ensures test parameter passed to function is not greater than or equal to the specified value.</summary>
            <param name="source">Value to test.</param>
            <param name="notGreaterThanOrEqualToValue">Value that represents the upper limit for the source.</param>
            <param name="alternateValue">Value to return if <paramref name="source">source</paramref> is
            greater than or equal to <paramref name="notGreaterThanOrEqualToValue">notGreaterThanOrEqualToValue</paramref>.</param>
            <typeparam name="T">Structure or class that implements IComparable(Of T) (e.g., Double, Single,
            Integer, etc.).</typeparam>
            <returns>A value not greater than or equal to notGreaterThanOrEqualToValue.</returns>
            <remarks>To optimize performance, this function does not validate that the notGreaterThanOrEqualToValue
            is not greater than or equal to the alternateValue.</remarks>
        </member>
        <member name="T:TVA.Net.Ftp.TransferDirection">
            <summary>
            FTP file transfer direction enumeration.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.TransferDirection.Upload">
            <summary>
            FTP transfer direction set to upload.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.TransferDirection.Download">
            <summary>
            FTP transfer direction set to download.
            </summary>
        </member>
        <member name="T:TVA.Media.WaveDataChunk">
            <summary>
            Represents the data chunk in a WAVE media format file.
            </summary>
        </member>
        <member name="F:TVA.Media.WaveDataChunk.RiffTypeID">
            <summary>
            Type ID of a WAVE data chunk.
            </summary>
        </member>
        <member name="M:TVA.Media.WaveDataChunk.#ctor(TVA.Media.WaveFormatChunk)">
            <summary>
            Constructs a new WAVE data chunk for the specified format.
            </summary>
            <param name="waveFormat"><see cref="T:TVA.Media.WaveFormatChunk"/> that describes this <see cref="T:TVA.Media.WaveDataChunk"/>.</param>
        </member>
        <member name="M:TVA.Media.WaveDataChunk.#ctor(TVA.Media.RiffChunk,System.IO.Stream,TVA.Media.WaveFormatChunk)">
            <summary>Reads a new WAVE format section from the specified stream.</summary>
            <param name="preRead">Pre-parsed <see cref="T:TVA.Media.RiffChunk"/> header.</param>
            <param name="source">Source stream to read data from.</param>
            <param name="waveFormat">Format of the data section to be parsed.</param>
            <exception cref="T:System.InvalidOperationException">WAVE format or extra parameters section too small, wave file corrupted.</exception>
        </member>
        <member name="M:TVA.Media.WaveDataChunk.Clone">
            <summary>
            Creates a deeply cloned copy of the <see cref="T:TVA.Media.WaveDataChunk"/>.
            </summary>
            <returns>A deeply cloned copy of the <see cref="T:TVA.Media.WaveDataChunk"/>.</returns>
        </member>
        <member name="P:TVA.Media.WaveDataChunk.WaveFormat">
            <summary>
            Gets or sets associated <see cref="T:TVA.Media.WaveFormatChunk"/> that defines the format of the data in this <see cref="T:TVA.Media.WaveDataChunk"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveDataChunk.SampleBlocks">
            <summary>
            Gets list of little-endian formatted sample data blocks of this <see cref="T:TVA.Media.WaveDataChunk"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveDataChunk.ChunkSize">
            <summary>
            Gets the chunk size of this <see cref="T:TVA.Media.WaveDataChunk"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveDataChunk.BinaryImage">
            <summary>
            Gets binary representation of this <see cref="T:TVA.Media.WaveDataChunk"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveDataChunk.BinaryLength">
            <summary>
            Gets length of the binary representation of this <see cref="T:TVA.Media.WaveDataChunk"/>.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.TimbreFunction">
            <summary>
            Provides a function signature for methods that produce an amplitude representing the
            acoustic pressure of a represented musical timbre for the given time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude of the represented musical timbre (a value between zero and one) at the given time.</returns>
        </member>
        <member name="T:TVA.Media.Music.Timbre">
            <summary>
            Defines a few timbre functions.
            </summary>
        </member>
        <member name="M:TVA.Media.Music.Timbre.AngularFrequency(System.Double,System.Int64,System.Double)">
            <summary>
            Computes the angular frequency for the given time.
            </summary>
            <param name="frequency">Frequency in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The computed angular frequency in radians per second at given time.</returns>
        </member>
        <member name="M:TVA.Media.Music.Timbre.PureTone(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a pure tone for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a pure tone at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            pure tone of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.BasicNote(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a basic note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a basic note at the given time.</returns>
            <remarks>
            <para>
            This method computes an amplitude representing the acoustic pressure of a
            basic note of the given frequency for the given time.
            </para>
            <para>
            </para>
            This timbre algorithm combines the simulated piano and the odd harmonic series
            algoriths to produce a pleasant sounding note.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.Piano(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated piano note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated piano note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated piano note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.Flute(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated flute note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated flute note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated flute note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.AcousticGuitar(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated acoustic guitar note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a acoustic simulated guitar note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated acoustic guitar note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.BassGuitar(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated bass guitar note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated bass guitar note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated bass guitar note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.ElectricGuitar(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated electric guitar note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated electric guitar note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated electric guitar note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.Bell(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated bell note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated bell note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated bell note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.BigBell(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated big bell note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated big bell note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated big bell note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.ChimeBell(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated chime bell note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated chime bell note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated chime bell note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.Xylophone(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated xylophone note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated xylophone note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated xylophone note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.Clarinet(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated clarinet note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated clarinet note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a
            simulated clarinet note of the given frequency for the given time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.Organ(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a simulated organ note for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated clarinet note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of a second-order
            harmonic series approaching a square wave (i.e., Sin(f) + Sin(3f)/3) of the given
            frequency for the given time to simulate an organ sound.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.OddHarmonicSeries(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates an odd harmonic series for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated clarinet note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of an
            odd harmonic series of the given frequency for the given time.
            Algorithm: Sin(f) + Sin(3f)/3 + Sin(5f)/5, etc.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Timbre.EvenHarmonicSeries(System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates an even harmonic series for the given frequency and time.
            </summary>
            <param name="frequency">Fundamental frequency of the desired note in Hz.</param>
            <param name="sampleIndex">Sample index (represents time anywhere from zero to full length of song).</param>
            <param name="samplePeriod">If useful, total period for note in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>) over which to compute timbre.</param>
            <param name="sampleRate">Number of samples per second.</param>
            <returns>The amplitude for a simulated clarinet note at the given time.</returns>
            <remarks>
            This method computes an amplitude representing the acoustic pressure of an
            even harmonic series of the given frequency for the given time.
            Algorithm: Sin(2f) + Sin(4f)/3 + Sin(6f)/5, etc.
            </remarks>
        </member>
        <member name="T:TVA.IO.StreamExtensions">
            <summary>
            Defines extension functions related to <see cref="T:System.IO.Stream"/> manipulation.
            </summary>
        </member>
        <member name="M:TVA.IO.StreamExtensions.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies input <see cref="T:System.IO.Stream"/> onto output <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The input <see cref="T:System.IO.Stream"/>.</param>
            <param name="destination">The output <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:TVA.IO.StreamExtensions.ReadStream(System.IO.Stream)">
            <summary>
            Reads entire <see cref="T:System.IO.Stream"/> contents, and returns <see cref="T:System.Byte"/> array of data.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> to be converted to <see cref="T:System.Byte"/> array.</param>
            <returns>An array of <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="T:TVA.IO.Checksums.ChecksumType">
            <summary>
            Indicates type of CRC-16 calculation performed.
            </summary>
        </member>
        <member name="F:TVA.IO.Checksums.ChecksumType.Crc16">
            <summary>
            Regular CRC-16 calculation.
            </summary>
        </member>
        <member name="F:TVA.IO.Checksums.ChecksumType.ModBus">
            <summary>
            ModBus CRC-16 calculation.
            </summary>
        </member>
        <member name="T:TVA.IO.Checksums.Crc16">
            <summary>
            Generates a byte-wise 16-bit CRC calculation.
            </summary>
            <remarks>
            <para>2-byte (16-bit) CRC: The generating polynomial is</para>
            <para>        16   15   2    1</para>
            <para>G(X) = X  + X  + X  + X</para>
            </remarks>
        </member>
        <member name="M:TVA.IO.Checksums.Crc16.#ctor">
            <summary>
            Creates a new instance of the Crc16 class.
            The checksum starts off with a value of 0x0000.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Crc16.#ctor(TVA.IO.Checksums.ChecksumType)">
            <summary>
            Creates a new instance of the Crc16 class.
            </summary>
            <param name="checksumType">
            Type of calculation to perform, CRC-16 or ModBus.
            </param>
        </member>
        <member name="M:TVA.IO.Checksums.Crc16.Reset">
            <summary>
            Resets the CRC-16 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Crc16.Reset(TVA.IO.Checksums.ChecksumType)">
            <summary>
            Resets the CRC-16 data checksum as if no update was ever called.
            </summary>
            <param name="checksumType">Type of CRC calculation. CRC-16 resets to 0x0000, ModBus resets to 0xFFFF</param>
        </member>
        <member name="M:TVA.IO.Checksums.Crc16.Update(System.Byte)">
            <summary>
            Updates the checksum with the byte value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to use for the update.</param>
        </member>
        <member name="M:TVA.IO.Checksums.Crc16.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">buffer an array of bytes</param>
        </member>
        <member name="M:TVA.IO.Checksums.Crc16.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name="buffer">The buffer which contains the data</param>
            <param name="offset">The offset in the buffer where the data starts</param>
            <param name="count">The number of data bytes to update the CRC with.</param>
        </member>
        <member name="P:TVA.IO.Checksums.Crc16.Value">
            <summary>
            Returns the CRC-16 data checksum computed so far.
            </summary>
        </member>
        <member name="T:TVA.Drawing.NamespaceDoc">
            <summary>
            Contains extension functions used to simplify managing images.
            </summary>
        </member>
        <member name="T:TVA.Drawing.BitmapExtensions">
            <summary>
            Defines extension functions related to bitmap image manipulation.
            </summary>
        </member>
        <member name="M:TVA.Drawing.BitmapExtensions.Resize(System.Drawing.Bitmap,System.Drawing.Size)">
             <summary>
             Returns a resized <see cref="T:System.Drawing.Bitmap"/> image of the original.
             </summary>
             <param name="originalImage">The original <see cref="T:System.Drawing.Bitmap"/> image to be resized.</param>
             <param name="newSize">The <see cref="T:System.Drawing.Size"/> to which the original image is to be resized.</param>
             <returns>A <see cref="T:System.Drawing.Bitmap"/> instance.</returns>
             <example>
             This example shows how to resize an image:
             <code>
             using System;
             using TVA.Drawing;
             using System.Drawing;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Load the original image.
                     Bitmap original = (Bitmap)Bitmap.FromFile("Original.jpg");
                     // Resize the original image.
                     Bitmap originalResized = original.Resize(new Size(800, 600));
                     // Save the resized image to file.
                     originalResized.Save("OriginalResized.jpg");
            
                     // Clean-up.
                     original.Dispose();
                     originalResized.Dispose();
                     
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Drawing.BitmapExtensions.Resize(System.Drawing.Bitmap,System.Drawing.Size,System.Boolean)">
             <summary>
             Returns a resized <see cref="T:System.Drawing.Bitmap"/> image of the original.
             </summary>
             <param name="originalImage">The original <see cref="T:System.Drawing.Bitmap"/> image to be resized.</param>
             <param name="newSize">The <see cref="T:System.Drawing.Size"/> to which the original image is to be resized.</param>
             <param name="disposeOriginal">true if the original image is to be disposed after resizing it; otherwise false.</param>
             <returns>A <see cref="T:System.Drawing.Bitmap"/> instance.</returns>
             <example>
             This example shows how to resize an image and dispose the original image that was resized:
             <code>
             using System;
             using System.Drawing;
             using TVA.Drawing;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Load original, resize it, and dispose original.
                     using (Bitmap resized = ((Bitmap)Bitmap.FromFile("Original.jpg")).Resize(new Size(800, 600), true))
                     {
                         // Save the resized image to file.
                         resized.Save("OriginalResized.jpg");
                     }
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Drawing.BitmapExtensions.Crop(System.Drawing.Bitmap,System.Drawing.Rectangle)">
             <summary>
             Returns a cropped <see cref="T:System.Drawing.Bitmap"/> image of the original.
             </summary>
             <param name="originalImage">The original <see cref="T:System.Drawing.Bitmap"/> image to be cropped.</param>
             <param name="croppedArea">The <see cref="T:System.Drawing.Rectangle"/> area of the original image to be cropped.</param>
             <returns>A <see cref="T:System.Drawing.Bitmap"/> instance.</returns>
             <example>
             This example shows how to crop an image:
             <code>
             using System;
             using System.Drawing;
             using TVA.Drawing;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Load the original image.
                     Bitmap original = (Bitmap)Bitmap.FromFile("Original.jpg");
                     // Crop the original image.
                     Bitmap originalCropped = original.Crop(new Rectangle(0, 0, 300, 300));
                     // Save the cropped image to file.
                     originalCropped.Save("OriginalCropped.jpg");
                     
                     // Clean-up.
                     original.Dispose();
                     originalCropped.Dispose();
            
                     Console.ReadLine();
                 }
             }        
             </code>
             </example>
        </member>
        <member name="M:TVA.Drawing.BitmapExtensions.Crop(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Returns a cropped <see cref="T:System.Drawing.Bitmap"/> image of the original.
             </summary>
             <param name="originalImage">The original <see cref="T:System.Drawing.Bitmap"/> image to be cropped.</param>
             <param name="croppedArea">The <see cref="T:System.Drawing.Rectangle"/> area of the original image to be cropped.</param>
             <param name="disposeOriginal">true if the original image is to be disposed after cropping it; otherwise false.</param>
             <returns>A <see cref="T:System.Drawing.Bitmap"/> instance.</returns>
             <example>
             This example shows how to crop an image and dispose the original image that was cropped:
             <code>
             using System;
             using System.Drawing;
             using TVA.Drawing;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Load original, crop it, and dispose original.
                     using (Bitmap cropped = ((Bitmap)Bitmap.FromFile("Original.jpg")).Crop(new Rectangle(0, 0, 300, 300), true))
                     {
                         // Save the cropped image to file.
                         cropped.Save("OriginalCropped.jpg");
                     }
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Drawing.BitmapExtensions.ConvertTo(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat)">
             <summary>
             Converts a <see cref="T:System.Drawing.Bitmap"/> image to the specified <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
             </summary>
             <param name="originalImage">The <see cref="T:System.Drawing.Bitmap"/> image to be converted.</param>
             <param name="newFormat">The new <see cref="T:System.Drawing.Imaging.ImageFormat"/> of the image.</param>
             <returns>A <see cref="T:System.Drawing.Bitmap"/> instance.</returns>
             <example>
             This example shows how to convert the format of an image:
             <code>
             using System;
             using System.Drawing;
             using System.Drawing.Imaging;
             using TVA.Drawing;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Load the original image.
                     Bitmap original = (Bitmap)Bitmap.FromFile("Original.jpg");
                     // Convert the original image.
                     Bitmap originalGif = original.ConvertTo(ImageFormat.Gif);
                     // Save the converted image to file.
                     originalGif.Save("OriginalGif.gif");
            
                     // Clean-up.
                     original.Dispose();
                     originalGif.Dispose();
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Drawing.BitmapExtensions.ConvertTo(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat,System.Boolean)">
             <summary>
             Converts a <see cref="T:System.Drawing.Bitmap"/> image to the specified <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
             </summary>
             <param name="originalImage">The <see cref="T:System.Drawing.Bitmap"/> image to be converted.</param>
             <param name="newFormat">The new <see cref="T:System.Drawing.Imaging.ImageFormat"/> of the image.</param>
             <param name="disposeOriginal">true if the original image is to be disposed after converting it; otherwise false.</param>
             <returns>A <see cref="T:System.Drawing.Bitmap"/> instance.</returns>
             <example>
             This example shows how to convert the format of an image and dispose the original image that was converted:
             <code>
             using System;
             using System.Drawing;
             using System.Drawing.Imaging;
             using TVA.Drawing;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Load original, convert it, and dispose original.
                     using (Bitmap converted = ((Bitmap)Bitmap.FromFile("Original.jpg")).ConvertTo(ImageFormat.Gif))
                     {
                         // Save the converted image to file.
                         converted.Save("OriginalGif.gif");
                     }
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:TVA.Configuration.SerializeSettingAttribute">
            <summary>
            Represents an attribute that determines if a property or field in a class derived from
            <see cref="T:TVA.Configuration.CategorizedSettingsBase"/> or <see cref="T:TVA.Configuration.AppSettingsBase"/> should be serialized
            to the configuration file.
            </summary>
        </member>
        <member name="M:TVA.Configuration.SerializeSettingAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:TVA.Configuration.SerializeSettingAttribute"/>; defaults to <c><see cref="P:TVA.Configuration.SerializeSettingAttribute.Serialize"/> = true</c>.
            </summary>
        </member>
        <member name="M:TVA.Configuration.SerializeSettingAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:TVA.Configuration.SerializeSettingAttribute"/> with the specified <paramref name="serialize"/> value.
            </summary>
            <param name="serialize">
            Assigns flag that determines if the property or field this <see cref="T:TVA.Configuration.SerializeSettingAttribute"/>
            modifies should be serialized to the configuration file.
            </param>
        </member>
        <member name="P:TVA.Configuration.SerializeSettingAttribute.Serialize">
            <summary>
            Gets or sets flag that determines if the property or field this <see cref="T:TVA.Configuration.SerializeSettingAttribute"/>
            modifies should be serialized to the configuration file.
            </summary>
        </member>
        <member name="T:TVA.Configuration.ConfigurationFile">
            <summary>
            Represents a configuration file of a Windows or Web application.
            </summary>
            <example>
            This example shows how to save and read settings from the config file:
            <code>
            using System;
            using System.Configuration;
            using TVA;
            using TVA.Configuration;
            
            class Program
            {
                static void Main(string[] args)
                {
                    // Get the application config file.
                    ConfigurationFile config = ConfigurationFile.Current;
            
                    // Get the sections of config file.
                    CategorizedSettingsElementCollection startup = config.Settings["Startup"];
                    CategorizedSettingsElementCollection passwords = config.Settings["Passwords"];
                    CategorizedSettingsElementCollection monitoring = config.Settings["Monitoring"];
                    KeyValueConfigurationCollection appSettings = config.Configuration.AppSettings.Settings;
                    ConnectionStringSettingsCollection connStrings = config.Configuration.ConnectionStrings.ConnectionStrings;
            
                    // Add settings to the config file under the "appSettings" section.
                    appSettings.Add("SaveSettingOnExit", true.ToString());
                    // Add settings to the config file under the "connectionStrings" section.
                    connStrings.Add(new ConnectionStringSettings("DevSql", "Server=SqlServer;Database=Sandbox;Trusted_Connection=True"));
                    // Add settings to the config (if they don't exist) under a custom "monitoring" section.
                    monitoring.Add("RefreshInterval", 5, "Interval in seconds at which the Monitor screen is to be refreshed.");
                    monitoring.Add("MessagesSnapshot", 30000, "Maximum messages length to be displayed on the Monitor screen.");
                    // Add password to the config file encrypted (if it doesn't exist) under a custom "passwords" section.
                    passwords.Add("Admin", "Adm1nP4ss", "Password used for performing administrative tasks.", true);
                    // Add user-scope setting to the config (if it doesn't exist) under a custom "startup" section.
                    startup.Add("Theme", "Default", "Application theme to use for the session.", false, SettingScope.User);
                    config.Save();  // Save settings to the config file.
            
                    // Read saved settings from the config file.
                    bool saveSettingsOnExit = appSettings["SaveSettingOnExit"].Value.ParseBoolean();
                    string devConnectionString = connStrings["DevSql"].ConnectionString;
                    string appTheme = startup["Theme"].Value;
                    string adminPassword = passwords["Admin"].Value;
                    int refreshInterval = monitoring["RefreshInterval"].ValueAsInt32();
                    int messagesSnapshot = monitoring["MessagesSnapshot"].ValueAsInt32();
            
                    // Print the retrieved settings to the console.
                    Console.WriteLine("SaveSettingOnExit = {0}", saveSettingsOnExit);
                    Console.WriteLine("DevSql = {0}", devConnectionString);
                    Console.WriteLine("Theme = {0}", appTheme);
                    Console.WriteLine("Admin = {0}", adminPassword);
                    Console.WriteLine("RefreshInterval = {0}", refreshInterval);
                    Console.WriteLine("MessagesSnapshot = {0}", messagesSnapshot);
            
                    Console.ReadLine();
                }
            }
            </code>
            This example shows the content of the config file from the sample code above:
            <code>
            <![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
            <configuration>
              <configSections>
                <section name="categorizedSettings" type="TVA.Configuration.CategorizedSettingsSection, TVA.Core" />
              </configSections>
              <appSettings>
                <add key="SaveSettingOnExit" value="True" />
              </appSettings>
              <categorizedSettings>
                <startup>
                  <add name="Theme" value="Default" description="Application theme to use for the session."
                    encrypted="false" scope="User" />
                </startup>
                <passwords>
                  <add name="Admin" value="C+0j6fE/N0Q9b5xaeDKgvRmSeY9zJkO1EQCr7cHoG3x24tztlbBB54PfWsuMGXc/"
                    description="Password used for performing administrative tasks."
                    encrypted="true" />
                </passwords>
                <monitoring>
                  <add name="RefreshInterval" value="5" description="Interval in seconds at which the Monitor screen is to be refreshed."
                    encrypted="false" />
                  <add name="MessagesSnapshot" value="30000" description="Maximum messages length to be displayed on the Monitor screen."
                    encrypted="false" />
                </monitoring>
              </categorizedSettings>
              <connectionStrings>
                <add name="DevSql" connectionString="Server=SqlServer;Database=Sandbox;Trusted_Connection=True" />
              </connectionStrings>
            </configuration>
            ]]>
            </code>
            </example>
            <seealso cref="T:TVA.Configuration.CategorizedSettingsSection"/>
            <seealso cref="T:TVA.Configuration.CategorizedSettingsElement"/>
            <seealso cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/>
        </member>
        <member name="M:TVA.Configuration.ConfigurationFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Configuration.ConfigurationFile"/> class.
            </summary>        
        </member>
        <member name="M:TVA.Configuration.ConfigurationFile.Save">
            <summary>
            Writes the configuration settings contained within this <see cref="T:TVA.Configuration.ConfigurationFile"/> object to the configuration file that it represents.
            </summary>
        </member>
        <member name="M:TVA.Configuration.ConfigurationFile.Save(System.Configuration.ConfigurationSaveMode)">
            <summary>
            Writes the configuration settings contained within this <see cref="T:TVA.Configuration.ConfigurationFile"/> object to the configuration file that it represents.
            </summary>
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:TVA.Configuration.ConfigurationFile.SaveAs(System.String)">
            <summary>
            Writes the configuration settings contained within this <see cref="T:TVA.Configuration.ConfigurationFile"/> object to the specified configuration file.
            </summary>
            <param name="fileName">The path and file name to save the configuration file to.</param>
        </member>
        <member name="M:TVA.Configuration.ConfigurationFile.SetCryptoKey(System.String)">
            <summary>
            Sets the key to be used for encrypting and decrypting values of <see cref="P:TVA.Configuration.ConfigurationFile.Settings"/>.
            </summary>
            <param name="cryptoKey">New crypto key.</param>
        </member>
        <member name="M:TVA.Configuration.ConfigurationFile.Open(System.String)">
            <summary>
            Opens application config file at the specified <paramref name="configFilePath"/>.
            </summary>
            <param name="configFilePath">Path of the config file that belongs to a Windows or Web application.</param>
            <returns>An <see cref="T:TVA.Configuration.ConfigurationFile"/> object.</returns>
        </member>
        <member name="P:TVA.Configuration.ConfigurationFile.Culture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo"/> to use for the conversion of setting values to and from <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:TVA.Configuration.ConfigurationFile.Configuration">
            <summary>
            Get the underlying <see cref="T:System.Configuration.Configuration"/> that can be accessed using this <see cref="T:TVA.Configuration.ConfigurationFile"/> object.
            </summary>
        </member>
        <member name="P:TVA.Configuration.ConfigurationFile.Settings">
            <summary>
            Gets the <see cref="T:TVA.Configuration.CategorizedSettingsSection"/> object representing settings under the "categorizedSettings" section of the config file.
            </summary>
        </member>
        <member name="P:TVA.Configuration.ConfigurationFile.UserSettings">
            <summary>
            Gets the <see cref="T:TVA.Configuration.ConfigurationFile.UserConfigurationFile"/> where user specific settings are saved.
            </summary>
        </member>
        <member name="P:TVA.Configuration.ConfigurationFile.Current">
            <summary>
            Gets the <see cref="T:TVA.Configuration.ConfigurationFile"/> object that represents the config file of the currently executing Windows or Web application.
            </summary>
        </member>
        <member name="T:TVA.Bits">
            <summary>
            Represents bits in a signed or unsigned integer value.
            </summary>
        </member>
        <member name="F:TVA.Bits.Nil">
            <summary>No bits set (0x0000000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit00">
            <summary>Bit 00 (0x0000000000000001)</summary>
        </member>
        <member name="F:TVA.Bits.Bit01">
            <summary>Bit 01 (0x0000000000000002)</summary>
        </member>
        <member name="F:TVA.Bits.Bit02">
            <summary>Bit 02 (0x0000000000000004)</summary>
        </member>
        <member name="F:TVA.Bits.Bit03">
            <summary>Bit 03 (0x0000000000000008)</summary>
        </member>
        <member name="F:TVA.Bits.Bit04">
            <summary>Bit 04 (0x0000000000000010)</summary>
        </member>
        <member name="F:TVA.Bits.Bit05">
            <summary>Bit 05 (0x0000000000000020)</summary>
        </member>
        <member name="F:TVA.Bits.Bit06">
            <summary>Bit 06 (0x0000000000000040)</summary>
        </member>
        <member name="F:TVA.Bits.Bit07">
            <summary>Bit 07 (0x0000000000000080)</summary>
        </member>
        <member name="F:TVA.Bits.Bit08">
            <summary>Bit 08 (0x0000000000000100)</summary>
        </member>
        <member name="F:TVA.Bits.Bit09">
            <summary>Bit 09 (0x0000000000000200)</summary>
        </member>
        <member name="F:TVA.Bits.Bit10">
            <summary>Bit 10 (0x0000000000000400)</summary>
        </member>
        <member name="F:TVA.Bits.Bit11">
            <summary>Bit 11 (0x0000000000000800)</summary>
        </member>
        <member name="F:TVA.Bits.Bit12">
            <summary>Bit 12 (0x0000000000001000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit13">
            <summary>Bit 13 (0x0000000000002000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit14">
            <summary>Bit 14 (0x0000000000004000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit15">
            <summary>Bit 15 (0x0000000000008000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit16">
            <summary>Bit 16 (0x0000000000010000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit17">
            <summary>Bit 17 (0x0000000000020000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit18">
            <summary>Bit 18 (0x0000000000040000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit19">
            <summary>Bit 19 (0x0000000000080000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit20">
            <summary>Bit 20 (0x0000000000100000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit21">
            <summary>Bit 21 (0x0000000000200000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit22">
            <summary>Bit 22 (0x0000000000400000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit23">
            <summary>Bit 23 (0x0000000000800000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit24">
            <summary>Bit 24 (0x0000000001000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit25">
            <summary>Bit 25 (0x0000000002000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit26">
            <summary>Bit 26 (0x0000000004000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit27">
            <summary>Bit 27 (0x0000000008000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit28">
            <summary>Bit 28 (0x0000000010000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit29">
            <summary>Bit 29 (0x0000000020000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit30">
            <summary>Bit 30 (0x0000000040000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit31">
            <summary>Bit 31 (0x0000000080000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit32">
            <summary>Bit 32 (0x0000000100000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit33">
            <summary>Bit 33 (0x0000000200000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit34">
            <summary>Bit 34 (0x0000000400000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit35">
            <summary>Bit 35 (0x0000000800000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit36">
            <summary>Bit 36 (0x0000001000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit37">
            <summary>Bit 37 (0x0000002000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit38">
            <summary>Bit 38 (0x0000004000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit39">
            <summary>Bit 39 (0x0000008000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit40">
            <summary>Bit 40 (0x0000010000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit41">
            <summary>Bit 41 (0x0000020000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit42">
            <summary>Bit 42 (0x0000040000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit43">
            <summary>Bit 43 (0x0000080000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit44">
            <summary>Bit 44 (0x0000100000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit45">
            <summary>Bit 45 (0x0000200000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit46">
            <summary>Bit 46 (0x0000400000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit47">
            <summary>Bit 47 (0x0000800000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit48">
            <summary>Bit 48 (0x0001000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit49">
            <summary>Bit 49 (0x0002000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit50">
            <summary>Bit 50 (0x0004000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit51">
            <summary>Bit 51 (0x0008000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit52">
            <summary>Bit 52 (0x0010000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit53">
            <summary>Bit 53 (0x0020000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit54">
            <summary>Bit 54 (0x0040000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit55">
            <summary>Bit 55 (0x0080000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit56">
            <summary>Bit 56 (0x0100000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit57">
            <summary>Bit 57 (0x0200000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit58">
            <summary>Bit 58 (0x0400000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit59">
            <summary>Bit 59 (0x0800000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit60">
            <summary>Bit 60 (0x1000000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit61">
            <summary>Bit 61 (0x2000000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit62">
            <summary>Bit 62 (0x4000000000000000)</summary>
        </member>
        <member name="F:TVA.Bits.Bit63">
            <summary>Bit 63 (0x8000000000000000)</summary>
        </member>
        <member name="T:TVA.BitExtensions">
            <summary>
            Defines extension methods related to bit operations.
            </summary>
        </member>
        <member name="M:TVA.BitExtensions.BitVal(System.Int32)">
            <summary>
            Gets the bit value for the specified bit index (0 - 63).
            </summary>
            <param name="bit">Bit index (0 - 63)</param>
            <returns>Value of the specified <paramref name="bit"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter must be between 0 and 63.</exception>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.SByte,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:System.SByte"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.SByte,System.SByte)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:System.SByte"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.Byte,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:System.Byte"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.Byte,System.Byte)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:System.Byte"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.Int16,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:System.Int16"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.Int16,System.Int16)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:System.Int16"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.UInt16,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:System.UInt16"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.UInt16,System.UInt16)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:System.UInt16"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(TVA.Int24,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:TVA.Int24"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(TVA.Int24,TVA.Int24)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:TVA.Int24"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(TVA.UInt24,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:TVA.UInt24"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:TVA.UInt24"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.Int32,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:System.Int32"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.Int32,System.Int32)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:System.Int32"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.UInt32,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:System.UInt32"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.UInt32,System.UInt32)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:System.UInt32"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.Int64,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:System.Int64"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.Int64,System.Int64)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:System.Int64"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.UInt64,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to set.</param>
            <returns><see cref="T:System.UInt64"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetBits(System.UInt64,System.UInt64)">
            <summary>
            Returns value with specified <paramref name="bits"/> set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to set.</param>
            <returns><see cref="T:System.UInt64"/> value with specified <paramref name="bits"/> set.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.SByte,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:System.SByte"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.SByte,System.SByte)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:System.SByte"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.Byte,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:System.Byte"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.Byte,System.Byte)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:System.Byte"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.Int16,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:System.Int16"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.Int16,System.Int16)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:System.Int16"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.UInt16,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:System.UInt16"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.UInt16,System.UInt16)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:System.UInt16"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(TVA.Int24,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:TVA.Int24"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(TVA.Int24,TVA.Int24)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:TVA.Int24"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(TVA.UInt24,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:TVA.UInt24"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:TVA.UInt24"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.Int32,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:System.Int32"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.Int32,System.Int32)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:System.Int32"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.UInt32,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:System.UInt32"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.UInt32,System.UInt32)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:System.UInt32"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.Int64,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:System.Int64"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.Int64,System.Int64)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:System.Int64"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.UInt64,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to clear.</param>
            <returns><see cref="T:System.UInt64"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ClearBits(System.UInt64,System.UInt64)">
            <summary>
            Returns value with specified <paramref name="bits"/> cleared.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to clear.</param>
            <returns><see cref="T:System.UInt64"/> value with specified <paramref name="bits"/> cleared.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.SByte,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.SByte,System.SByte)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.SByte,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Byte,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Byte,System.Byte)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Byte,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int16,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int16,System.Int16)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int16,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int16,System.Int16,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt16,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt16,System.UInt16)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt16,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(TVA.Int24,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(TVA.Int24,TVA.Int24)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(TVA.Int24,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(TVA.Int24,TVA.Int24,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(TVA.UInt24,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(TVA.UInt24,TVA.UInt24)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(TVA.UInt24,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(TVA.UInt24,TVA.UInt24,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int32,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int32,System.Int32)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int32,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt32,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt32,System.UInt32)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt32,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int64,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int64,System.Int64)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int64,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt64,TVA.Bits)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt64,System.UInt64)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt64,TVA.Bits,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.CheckBits(System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Determines if specified <paramref name="bits"/> are set.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to check.</param>
            <param name="allBits">true to check if all <paramref name="bits"/> are set; otherwise false.</param>
            <returns>true if specified <paramref name="bits"/> are set in <paramref name="source"/> value; otherwise false.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.SByte,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:System.SByte"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.SByte,System.SByte)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:System.SByte"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.Byte,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:System.Byte"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.Byte,System.Byte)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:System.Byte"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.Int16,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:System.Int16"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.Int16,System.Int16)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:System.Int16"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.UInt16,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:System.UInt16"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.UInt16,System.UInt16)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:System.UInt16"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(TVA.Int24,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:TVA.Int24"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(TVA.Int24,TVA.Int24)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:TVA.Int24"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(TVA.UInt24,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:TVA.UInt24"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:TVA.UInt24"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.Int32,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:System.Int32"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.Int32,System.Int32)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:System.Int32"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.UInt32,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:System.UInt32"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.UInt32,System.UInt32)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:System.UInt32"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.Int64,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:System.Int64"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.Int64,System.Int64)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:System.Int64"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.UInt64,TVA.Bits)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits"><see cref="T:TVA.Bits"/> to toggle.</param>
            <returns><see cref="T:System.UInt64"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.ToggleBits(System.UInt64,System.UInt64)">
            <summary>
            Returns value with specified <paramref name="bits"/> toggled.
            </summary>
            <param name="source">Value source.</param>
            <param name="bits">Bit-mask of the bits to toggle.</param>
            <returns><see cref="T:System.UInt64"/> value with specified <paramref name="bits"/> toggled.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.SByte,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:System.SByte"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.SByte,System.SByte)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:System.SByte"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.Byte,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:System.Byte"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.Byte,System.Byte)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:System.Byte"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.Int16,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:System.Int16"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.Int16,System.Int16)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:System.Int16"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.UInt16,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:System.UInt16"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.UInt16,System.UInt16)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:System.UInt16"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(TVA.Int24,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:TVA.Int24"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(TVA.Int24,TVA.Int24)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:TVA.Int24"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(TVA.UInt24,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:TVA.UInt24"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:TVA.UInt24"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.Int32,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.Int32,System.Int32)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.UInt32,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:System.UInt32"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.UInt32,System.UInt32)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:System.UInt32"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.Int64,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.Int64,System.Int64)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.UInt64,TVA.Bits)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <returns><see cref="T:System.UInt64"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.GetMaskedValue(System.UInt64,System.UInt64)">
            <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <returns><see cref="T:System.UInt64"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.SByte,TVA.Bits,System.SByte)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.SByte"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.SByte,System.SByte,System.SByte)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.SByte"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.Byte,TVA.Bits,System.Byte)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.Byte"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.Byte"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.Int16,TVA.Bits,System.Int16)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.Int16"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.Int16,System.Int16,System.Int16)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.Int16"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.UInt16,TVA.Bits,System.UInt16)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.UInt16"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.UInt16"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(TVA.Int24,TVA.Bits,TVA.Int24)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:TVA.Int24"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(TVA.Int24,TVA.Int24,TVA.Int24)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:TVA.Int24"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(TVA.UInt24,TVA.Bits,TVA.UInt24)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:TVA.UInt24"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(TVA.UInt24,TVA.UInt24,TVA.UInt24)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:TVA.UInt24"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.Int32,TVA.Bits,System.Int32)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.UInt32,TVA.Bits,System.UInt32)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.UInt32"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.UInt32"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.Int64,TVA.Bits,System.Int64)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.UInt64,TVA.Bits,System.UInt64)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask"><see cref="T:TVA.Bits"/> that make-up the bit-mask.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.UInt64"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.SetMaskedValue(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Returns value after setting a new <paramref name="value"/> for the bits specified by the <paramref name="bitmask"/>.
            </summary>
            <param name="source">Value source.</param>
            <param name="bitmask">Bit-mask of the bits involved.</param>
            <param name="value">New value.</param>
            <returns><see cref="T:System.UInt64"/> value.</returns>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(System.Byte,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(System.SByte,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(System.Int16,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(System.UInt16,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(TVA.Int24,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(TVA.UInt24,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(System.Int32,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(System.UInt32,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(System.Int64,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotL(System.UInt64,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate right on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(System.Byte,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(System.SByte,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(System.Int16,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(System.UInt16,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(TVA.Int24,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(TVA.UInt24,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(System.Int32,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(System.UInt32,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(System.Int64,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="M:TVA.BitExtensions.BitRotR(System.UInt64,System.Int32)">
            <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
            <param name="value">Value used for bit-rotation.</param>
            <param name="rotations">Number of rotations to perform.</param>
            <returns>Value that has its bits rotated to the right the specified number of times.</returns>
            <remarks>
            Actual rotation direction is from a big-endian perspective - this is an artifact of the native
            .NET bit shift operators. As a result bits may actually appear to rotate left on little-endian
            architectures.
            </remarks>
        </member>
        <member name="T:TVA.BigBinaryValue">
            <summary>
            Represents a big-endian ordered binary data sample stored as a byte array, 
            but implicitly castable to most common native types.
            </summary>
        </member>
        <member name="M:TVA.BigBinaryValue.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new big-endian ordered binary value from the given byte array.</summary>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <param name="startIndex">The offset in the buffer where the data starts.</param>
            <param name="length">The number of data bytes that make up the binary value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of the <paramref name="buffer"/> -or-
            <paramref name="length"/> is less than 0 -or-
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify a valid region in the <paramref name="buffer"/>
            </exception>
            <remarks>This constructor assumes a type code of Empty to represent "undefined".</remarks>
        </member>
        <member name="M:TVA.BigBinaryValue.#ctor(System.Byte[])">
            <summary>Creates a new big-endian ordered binary value from the given byte array.</summary>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <remarks>This constructor assumes a type code of Empty to represent "undefined".</remarks>
        </member>
        <member name="M:TVA.BigBinaryValue.#ctor(System.TypeCode,System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new big-endian ordered binary value from the given byte array.</summary>
            <param name="typeCode">The type code of the native value that the binary value represents.</param>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
            <param name="startIndex">The offset in the buffer where the data starts.</param>
            <param name="length">The number of data bytes that make up the binary value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of the <paramref name="buffer"/> -or-
            <paramref name="length"/> is less than 0 -or-
            <paramref name="startIndex"/> and <paramref name="length"/> do not specify a valid region in the <paramref name="buffer"/>
            </exception>
        </member>
        <member name="M:TVA.BigBinaryValue.#ctor(System.TypeCode,System.Byte[])">
            <summary>Creates a new big-endian ordered binary value from the given byte array.</summary>
            <param name="typeCode">The type code of the native value that the binary value represents.</param>
            <param name="buffer">The buffer which contains the binary representation of the value.</param>
        </member>
        <member name="M:TVA.BigBinaryValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.ConvertToType(System.TypeCode)">
            <summary>
            Returns a <see cref="T:TVA.BigBinaryValue"/> representation of source value converted to specified <see cref="T:System.TypeCode"/>.
            </summary>
            <param name="typeCode">Desired <see cref="T:System.TypeCode"/> for destination value.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of source value converted to specified <see cref="T:System.TypeCode"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Unable to convert binary value to specified type.</exception>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~System.Byte">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:System.Byte"/>.</param>
            <returns>A <see cref="T:System.Byte"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(System.Byte)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Byte"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~System.Int16">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:System.Int16"/>.</param>
            <returns>A <see cref="T:System.Int16"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(System.Int16)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Int16"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Int16"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~System.UInt16">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:System.UInt16"/>.</param>
            <returns>A <see cref="T:System.UInt16"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(System.UInt16)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.UInt16"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt16"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~TVA.Int24">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:TVA.Int24"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:TVA.Int24"/>.</param>
            <returns>A <see cref="T:TVA.Int24"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.Int24)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:TVA.Int24"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Int24"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:TVA.Int24"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~TVA.UInt24">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:TVA.UInt24"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:TVA.UInt24"/>.</param>
            <returns>A <see cref="T:TVA.UInt24"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.UInt24)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:TVA.UInt24"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:TVA.UInt24"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:TVA.UInt24"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~System.Int32">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:System.Int32"/>.</param>
            <returns>A <see cref="T:System.Int32"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(System.Int32)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Int32"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~System.UInt32">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:System.UInt32"/>.</param>
            <returns>A <see cref="T:System.UInt32"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(System.UInt32)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.UInt32"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt32"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~System.Int64">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:System.Int64"/>.</param>
            <returns>A <see cref="T:System.Int64"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(System.Int64)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Int64"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Int64"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~System.UInt64">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:System.UInt64"/>.</param>
            <returns>A <see cref="T:System.UInt64"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(System.UInt64)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.UInt64"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt64"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~System.Single">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:System.Single"/>.</param>
            <returns>A <see cref="T:System.Single"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(System.Single)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Single"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Single"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(TVA.BigBinaryValue)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.BigBinaryValue"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value"><see cref="T:TVA.BigBinaryValue"/> to convert to <see cref="T:System.Double"/>.</param>
            <returns>A <see cref="T:System.Double"/> representation of <see cref="T:TVA.BigBinaryValue"/>.</returns>
        </member>
        <member name="M:TVA.BigBinaryValue.op_Implicit(System.Double)~TVA.BigBinaryValue">
            <summary>
            Implicitly converts <see cref="T:System.Double"/> to <see cref="T:TVA.BigBinaryValue"/>.
            </summary>
            <param name="value"><see cref="T:System.Double"/> to convert to <see cref="T:TVA.BigBinaryValue"/>.</param>
            <returns>A <see cref="T:TVA.BigBinaryValue"/> representation of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="T:TVA.Threading.NamespaceDoc">
            <summary>
            Contains classes used to define managed threads that can be used for debugging threads by providing 
            automatic tracking, total thread runtime and the ability to run threads in alternate execution contexts.
            </summary>
        </member>
        <member name="T:TVA.Reflection.NamespaceDoc">
            <summary>
            Contains classes and extension functions used to simplify and standardize access to assembly information and attributes in applications.
            </summary>
        </member>
        <member name="T:TVA.ProcessProgressHandler`1">
            <summary>
            Defines a delegate handler for a <see cref="T:TVA.ProcessProgress`1"/> instance.
            </summary>
            <remarks>
            <para>
            This handler is used by methods with an <see cref="T:System.Action"/> delegate parameter (e.g., Action&lt;ProcessProgress&lt;long&gt;&gt;)
            providing a simple callback mechanism for reporting progress on a long operation.
            </para>
            <para>
            Examples include:
            <see cref="M:TVA.IO.Compression.CompressionExtensions.Compress(System.IO.Stream,System.IO.Stream,TVA.IO.Compression.CompressionStrength,System.Action{TVA.ProcessProgress{System.Int64}})"/>, 
            <see cref="M:TVA.Security.Cryptography.Cipher.Encrypt(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength,System.Action{TVA.ProcessProgress{System.Int64}})"/> and
            <see cref="M:TVA.Security.Cryptography.Cipher.Decrypt(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength,System.Action{TVA.ProcessProgress{System.Int64}})"/>
            </para>
            </remarks>
            <typeparam name="TUnit">Unit of progress used (long, double, int, etc.)</typeparam>
        </member>
        <member name="M:TVA.ProcessProgressHandler`1.#ctor(System.Action{TVA.ProcessProgress{`0}},System.String)">
            <summary>
            Constructs a new process progress handler for the specified parameters.
            </summary>
            <param name="progressHandler">Delegate callback to invoke as process progresses.</param>
            <param name="processName">Descriptive name of process, if useful.</param>
        </member>
        <member name="M:TVA.ProcessProgressHandler`1.#ctor(System.Action{TVA.ProcessProgress{`0}},System.String,`0)">
            <summary>
            Constructs a new process progress handler for the specified parameters.
            </summary>
            <param name="progressHandler">Delegate callback to invoke as process progresses.</param>
            <param name="processName">Descriptive name of process, if useful.</param>
            <param name="total">Total number of units to be processed.</param>
        </member>
        <member name="M:TVA.ProcessProgressHandler`1.UpdateProgress(`0)">
            <summary>
            Calls callback function with updated <see cref="T:TVA.ProcessProgress`1"/> instance so consumer can track progress.
            </summary>
            <param name="completed">Number of units completed processing so far.</param>
            <remarks>
            Note that assigning a value to the <see cref="P:TVA.ProcessProgressHandler`1.Complete"/> property will have the same effect as calling this method.
            </remarks>
        </member>
        <member name="P:TVA.ProcessProgressHandler`1.ProcessProgress">
            <summary>
            Gets instance of <see cref="T:TVA.ProcessProgress`1"/> used to track progress for this handler.
            </summary>
        </member>
        <member name="P:TVA.ProcessProgressHandler`1.ProgressHandler">
            <summary>
            Gets or sets reference to delegate handler used as a callback to report process progress.
            </summary>
        </member>
        <member name="P:TVA.ProcessProgressHandler`1.Complete">
            <summary>
            Gets or sets current process progress (i.e., number of units completed processing so far) - note that when this
            property value is assigned, the callback function is automatically called with updated <see cref="T:TVA.ProcessProgress`1"/>
            instance so consumer can track progress.
            </summary>
            <value>Number of units completed processing so far.</value>
        </member>
        <member name="P:TVA.ProcessProgressHandler`1.Total">
            <summary>
            Gets or sets total number of units to be processed.
            </summary>
        </member>
        <member name="T:TVA.Parsing.ISupportFrameImage`1">
            <summary>
            Specifies that this <see cref="T:System.Type"/> can produce or consume a frame of data represented as a binary image.
            </summary>
            <remarks>
            Related types of protocol data that occur as frames in a stream can implement this interface for automated parsing
            via the <see cref="T:TVA.Parsing.FrameImageParserBase`2"/> class.
            </remarks>
            <typeparam name="TTypeIdentifier">Type of the frame identifier.</typeparam>
        </member>
        <member name="P:TVA.Parsing.ISupportFrameImage`1.CommonHeader">
            <summary>
            Gets or sets current <see cref="T:TVA.Parsing.ICommonHeader`1"/>.
            </summary>
            <remarks>
            If used, this will need to be set before call to <see cref="M:TVA.Parsing.ISupportBinaryImage.Initialize(System.Byte[],System.Int32,System.Int32)"/>.
            </remarks>
        </member>
        <member name="P:TVA.Parsing.ISupportFrameImage`1.TypeID">
            <summary>
            Gets the identifier that can be used for identifying the <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            <para>
            <see cref="P:TVA.Parsing.ISupportFrameImage`1.TypeID"/> must be unique across all siblings implementing a common <see cref="T:System.Type"/> or interface.
            </para>
            <para>
            Output types implement this class so they have a consistently addressable identification property.
            </para>
            </remarks>
        </member>
        <member name="T:TVA.Parsing.ICommonHeader`1">
            <summary>
            Defines the common header of a frame image for a set of parsed types, consisting at least of a type ID.
            </summary>
            <remarks>
            Header implementations can extend this interface as necessary to accomodate protocol specific header images.
            </remarks>
            <typeparam name="TTypeIdentifier">Type of identifier used to distinguish output types.</typeparam>
        </member>
        <member name="P:TVA.Parsing.ICommonHeader`1.TypeID">
            <summary>
            Gets or sets the identifier used for identifying the <see cref="T:System.Type"/> to be parsed.
            </summary>
        </member>
        <member name="P:TVA.Parsing.ICommonHeader`1.State">
            <summary>
            Gets or sets any additional state information that might be needed for parsing.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.Song">
             <summary>
             Allows creation of a synthesized musical score storing the resultant song in an
             in-memory wave file for play back or saving music to disk.
             </summary>
             <example>
             This example generates a multi-instrument chord:
             <code>
             using System;
             using TVA.Media;
             using TVA.Media.Music;
            
             static class Program
             {
                 static void Main()
                 {
                     Song song = new Song { Damping = Damping.Linear };
            
                     Console.WriteLine("Generating multi-instrument chord...");
            
                     song.AddNotes
                     (
                         new Note { Frequency = Note.C4, Value = 4, Timbre = Timbre.EvenHarmonicSeries },
                         new Note { Frequency = Note.C4, Value = 4, Timbre = Timbre.Clarinet },
                         new Note { Frequency = Note.C4, Value = 4, Timbre = Timbre.Organ },
                         new Note { Frequency = Note.E4, Value = 4, Timbre = Timbre.EvenHarmonicSeries },
                         new Note { Frequency = Note.E4, Value = 4, Timbre = Timbre.Clarinet },
                         new Note { Frequency = Note.E4, Value = 4, Timbre = Timbre.Organ },
                         new Note { Frequency = Note.G4, Value = 4, Timbre = Timbre.EvenHarmonicSeries },
                         new Note { Frequency = Note.G4, Value = 4, Timbre = Timbre.SimulatedClarinet },
                         new Note { Frequency = Note.G4, Value = 4, Timbre = Timbre.SimulatedOrgan }
                     );
            
                     song.Finish();
            
                     Console.WriteLine("Saving chord to disk...");
                     song.Save("MajorTriad.wav");
            
                     Console.WriteLine("Playing chord...");
                     song.Play();
            
                     Console.ReadKey();
                 }
             }
             </code>
             This example generates a familiar tune, plays the song and saves it to disk:
             <code>
             // Add reference to System.Speech
             using System;
             using System.IO;
             using TVA.Media;
             using TVA.Media.Music;
             using System.Speech;
             using System.Speech.Synthesis;
             using System.Speech.AudioFormat;
             
             static class Program
             {
                 static void Main()
                 {
                     Console.WriteLine("Synthesizing speech...");
                     WaveFile speech = CreateSynthesizedVoiceOver();
             
                     Console.WriteLine("Synthesizing song at tempo for use with speech...");
             
                     // Define all the notes of jingle bells as a single phrase of music
                     Phrase score = CreateJingleBellsScore();
             
                     // Create one song at a slower tempo to help with speech synchronization
                     Song speechTempSong = new Song { Tempo = new Tempo(160, NoteValue.Quarter) };
             
                     // Make sure audio specifications for song and speech match
                     speechTempSong.SampleRate = speech.SampleRate;
                     speechTempSong.BitsPerSample = speech.BitsPerSample;
                     speechTempSong.Channels = speech.Channels;
             
                     // Add all the notes to the song
                     speechTempSong.AddPhrase(score);
                     speechTempSong.Finish();
             
                     Console.WriteLine("Synthesizing song by itself at normal tempo...");
             
                     // Create one song at a slower tempo to help with speech synchronization
                     Song normalTempoSong = new Song();
             
                     // Add all the notes to the song
                     normalTempoSong.AddPhrase(score);
                     normalTempoSong.Finish();
             
                     Console.WriteLine("Saving normal tempo song to disk as \"JingleBells.wav\"...");
                     normalTempoSong.Save("JingleBells.wav");
             
                     Console.WriteLine("Combining speech with song...");
                     WaveFile combined = WaveFile.Combine(speech, speechTempSong);
             
                     Console.WriteLine("Saving combined work to disk as \"SingingComputer.wav\"...");
                     combined.Save("SingingComputer.wav");
             
                     Console.WriteLine("Playing combined work...");
                     combined.Play();
             
                     Console.ReadKey();
                 }
             
                 private static WaveFile CreateSynthesizedVoiceOver()
                 {
                     SpeechSynthesizer synthesizer = new SpeechSynthesizer();
                     MemoryStream speechStream = new MemoryStream();
                     PromptBuilder songText = new PromptBuilder();
             
                     synthesizer.SelectVoice("Microsoft Sam");
                     synthesizer.Rate = 5; // Range = -10 to +10
                     synthesizer.SetOutputToWaveStream(speechStream);
             
                     songText.AppendText("Jin - gull bells!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(3000000));
                     songText.AppendText("Jin - gull bells!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(3000000));
                     songText.AppendText("Jin - gull - all, theuh - way!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(12000000));
                     songText.AppendText("Oh - what - fun!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(1000000));
                     songText.AppendText("It - is!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(500000));
                     songText.AppendText("To - ride!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(500000));
                     songText.AppendText("a - one - horse!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(500000));
                     songText.AppendText("Open!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(500000));
                     songText.AppendText("Sleigh!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(1000000));
                     songText.AppendText("A!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(2500000));
                     songText.AppendText("Jin - gull bells!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(3000000));
                     songText.AppendText("Jin - gull bells!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(3000000));
                     songText.AppendText("Jin - gull - all, theuh - way!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(12000000));
                     songText.AppendText("Oh - what - fun!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(1000000));
                     songText.AppendText("It - is!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(500000));
                     songText.AppendText("To - ride!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(500000));
                     songText.AppendText("a - one - horse!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(500000));
                     songText.AppendText("Open!", PromptEmphasis.Strong);
                     songText.AppendBreak(new TimeSpan(500000));
                     songText.AppendText("Sleigh.", PromptEmphasis.Reduced);
             
                     synthesizer.Speak(songText);
                     speechStream.Position = 0;
                     return WaveFile.Load(speechStream);
                 }
             
                 private static Phrase CreateJingleBellsScore()
                 {
                     Phrase score = new Phrase();
                     Phrase passage = new Phrase();
             
                     // Define the repeating phrase of the song
                     passage.AddNotes
                     (
                         new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter },
                         new Note { Frequency = Note.C3, NamedValue = NoteValue.Whole }
                     );
                     passage.AddNotes(new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter });
                     passage.AddNotes(new Note { Frequency = Note.B3, NamedValue = NoteValue.Half });
             
                     passage.AddNotes
                     (
                         new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter },
                         new Note { Frequency = Note.G3, NamedValue = NoteValue.Whole }
                     );
                     passage.AddNotes(new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter });
                     passage.AddNotes(new Note { Frequency = Note.B3, NamedValue = NoteValue.Half });
             
                     passage.AddNotes
                     (
                         new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter },
                         new Note { Frequency = Note.C3, NamedValue = NoteValue.Whole }
                     );
                     passage.AddNotes(new Note { Frequency = Note.D4, NamedValue = NoteValue.Quarter });
                     passage.AddNotes(new Note { Frequency = Note.G3, NamedValue = NoteValue.Quarter });
                     passage.AddNotes(new Note { Frequency = Note.A3, NamedValue = NoteValue.Quarter });
             
                     passage.AddNotes
                     (
                         new Note { Frequency = Note.B3, NamedValue = NoteValue.Whole },
                         new Note { Frequency = Note.G3, NamedValue = NoteValue.Whole }
                     );
             
                     passage.AddNotes
                     (
                         new Note { Frequency = Note.C4, NamedValue = NoteValue.Quarter },
                         new Note { Frequency = Note.D3, NamedValue = NoteValue.Whole }
                     );
                     passage.AddNotes(new Note { Frequency = Note.C4, NamedValue = NoteValue.Quarter });
                     passage.AddNotes(new Note { Frequency = Note.C4, NamedValue = NoteValue.Quarter });
                     passage.AddNotes(new Note { Frequency = Note.C4, NamedValue = NoteValue.Quarter });
             
                     passage.AddNotes
                     (
                         new Note { Frequency = Note.C4, NamedValue = NoteValue.Quarter },
                         new Note { Frequency = Note.G3, NamedValue = NoteValue.Whole }
                     );
                     passage.AddNotes(new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter });
                     passage.AddNotes(new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter });
                     passage.AddNotes(new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter });
             
                     score.AddPhrase(passage);
             
                     score.AddNotes
                     (
                         new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter },
                         new Note { Frequency = Note.F3S, NamedValue = NoteValue.Whole }
                     );
                     score.AddNotes(new Note { Frequency = Note.A3, NamedValue = NoteValue.Quarter });
                     score.AddNotes(new Note { Frequency = Note.A3, NamedValue = NoteValue.Quarter });
                     score.AddNotes(new Note { Frequency = Note.B3, NamedValue = NoteValue.Quarter });
             
                     score.AddNotes
                     (
                         new Note { Frequency = Note.A3, NamedValue = NoteValue.Half },
                         new Note { Frequency = Note.G3, NamedValue = NoteValue.Whole }
                     );
                     score.AddNotes(new Note { Frequency = Note.D4, NamedValue = NoteValue.Half });
             
                     score.AddPhrase(passage);
             
                     score.AddNotes
                     (
                         new Note { Frequency = Note.D4, NamedValue = NoteValue.Quarter },
                         new Note { Frequency = Note.G3, NamedValue = NoteValue.Whole },
                         new Note { Frequency = Note.F3, NamedValue = NoteValue.Whole }
                     );
                     score.AddNotes(new Note { Frequency = Note.D4, NamedValue = NoteValue.Quarter });
                     score.AddNotes(new Note { Frequency = Note.C4, NamedValue = NoteValue.Quarter });
                     score.AddNotes(new Note { Frequency = Note.A3, NamedValue = NoteValue.Quarter });
             
                     score.AddNotes
                     (
                         new Note { Frequency = Note.G3, NamedValue = NoteValue.Whole },
                         new Note { Frequency = Note.E3, NamedValue = NoteValue.Whole }
                     );
             
                     return score;
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Media.Music.Song.#ctor">
            <summary>
            Creates a new song with a 3/4 measure size, a tempo of 240 quarter-notes per minute,
            mezzo-forte prevailing dynamic level, using a basic note timbre and standard CD-quality
            settings for the underlying sound file.
            </summary>
        </member>
        <member name="M:TVA.Media.Music.Song.#ctor(TVA.Media.SampleRate,TVA.Media.BitsPerSample,TVA.Media.DataChannels)">
            <summary>
            Creates a new song with a 3/4 measure size, a tempo of 240 quarter-notes per minute,
            mezzo-forte prevailing dynamic level, using a basic note timbre and the specified
            audio format settings.
            </summary>
            <param name="sampleRate">Desired sample rate</param>
            <param name="bitsPerSample">Desired bits-per-sample</param>
            <param name="channels">Desired data channels</param>
        </member>
        <member name="M:TVA.Media.Music.Song.AddPhrase(TVA.Media.Music.Phrase)">
            <summary>
            Add a predefined phrase of notes to the song.
            </summary>
            <param name="phrase">Phrase to add.</param>
        </member>
        <member name="M:TVA.Media.Music.Song.AddNotes(TVA.Media.Music.Note[])">
            <summary>
            Add a series of notes to the song.
            </summary>
            <param name="notes">Notes to add.</param>
        </member>
        <member name="M:TVA.Media.Music.Song.Finish">
            <summary>
            Called when there are no more notes to add.
            </summary>
            <remarks>
            This flushes the remaining queued notes into the song allowing them to run their remaining time.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Song.AddRest(System.Double)">
            <summary>
            Add a rest for the given length for the current beat.
            </summary>
            <param name="restLength">Duration of wait specified as a note value.</param>
        </member>
        <member name="M:TVA.Media.Music.Song.AddRest(TVA.Media.Music.NoteValue)">
            <summary>
            Add a rest for the given length for the current beat.
            </summary>
            <param name="restLength">Duration of wait specified as a note value.</param>
        </member>
        <member name="M:TVA.Media.Music.Song.AddRest(TVA.Media.Music.NoteValueBritish)">
            <summary>
            Add a rest for the given length for the current beat.
            </summary>
            <param name="restLength">Duration of wait specified as a note value.</param>
        </member>
        <member name="M:TVA.Media.Music.Song.AddRest(TVA.Media.Music.NoteValue,System.Int32)">
            <summary>
            Add a rest for the given length for the current beat.
            </summary>
            <param name="restLength">Duration of wait specified as a note value.</param>
            <param name="dots">Total dotted note length extensions to apply.</param>
        </member>
        <member name="M:TVA.Media.Music.Song.AddRest(TVA.Media.Music.NoteValueBritish,System.Int32)">
            <summary>
            Add a rest for the given length for the current beat.
            </summary>
            <param name="restLength">Duration of wait specified as a note value.</param>
            <param name="dots">Total dotted note length extensions to apply.</param>
        </member>
        <member name="M:TVA.Media.Music.Song.SetCrescendoDynamic(System.Int32,TVA.Media.Music.Dynamic)">
            <summary>
            Starts crescendo dynamic over the range of the specified number of beats.
            </summary>
            <param name="totalBeats">Total number of beats overwhich to gradually increase volume.</param>
            <param name="endDynamic">Desired volume when crescendo is complete.</param>
            <remarks>
            Current <see cref="P:TVA.Media.Music.Song.Dynamic"/> is the starting dynamic which should be less than <paramref name="endDynamic"/>.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Song.SetDiminuendoDynamic(System.Int32,TVA.Media.Music.Dynamic)">
            <summary>
            Starts diminuendo dynamic over the range of the specified number of beats.
            </summary>
            <param name="totalBeats">Total number of beats overwhich to gradually decrease volume.</param>
            <param name="endDynamic">Desired volume when diminuendo is complete.</param>
            <remarks>
            Current <see cref="P:TVA.Media.Music.Song.Dynamic"/> is the starting dynamic which should be greater than <paramref name="endDynamic"/>.
            </remarks>
        </member>
        <member name="P:TVA.Media.Music.Song.MeasureSize">
            <summary>
            Gets current measure size or defines a new measure size for the song.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Song.Tempo">
            <summary>
            Gets current tempo or defines a new tempo for the song.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Song.BeatTime">
            <summary>
            Returns the time for a single beat.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Song.Timbre">
            <summary>
            Gets or sets the default tibre function used to synthesize the sounds
            of the added notes (i.e., the instrument). This timbre function will be
            used if no other function is specified when adding notes.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Song.Damping">
            <summary>
            Gets or sets the default damping function used to lower the sound volume
            of the added notes over time. This damping function will be used if no
            other function is specified when adding notes.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Song.NamedDynamic">
            <summary>
            Gets or sets the prevailing named dynamic (i.e., volume) for the song.  Individual notes
            can choose to override this dynamic.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Song.Dynamic">
            <summary>
            Gets or sets the prevailing dynamic (i.e., volume) expressed as percentage in the range
            of 0 to 1 for the song. Individual notes can choose to override this dynamic.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Value must be expressed as a fractional percentage between zero and one.
            </exception>
        </member>
        <member name="P:TVA.Media.Music.Song.InterNoteDelay">
            <summary>Injects specified rest time, in seconds, between notes.</summary>
        </member>
        <member name="T:TVA.IO.NamespaceDoc">
            <summary>
            Contains classes and extension functions used to simplify and standardize operations related to files and streams.
            </summary>
        </member>
        <member name="T:TVA.Identity.UserInfo">
             <summary>
             Represents information about a domain user retrieved from Active Directory.
             </summary>
             <remarks>
             See <a href="http://msdn.microsoft.com/en-us/library/ms677980.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms677980.aspx</a> for more information on active directory properties.
             </remarks>
             <example>
             This example shows how to retrieve user information from Active Directory:
             <code>
             using System;
             using TVA.Identity;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Retrieve and display user information from Active Directory.
                     using (UserInfo user = new UserInfo("XYZCorp\\johndoe"))
                     {
                         Console.WriteLine(string.Format("First Name: {0}", user.FirstName));
                         Console.WriteLine(string.Format("Last Name: {0}", user.LastName));
                         Console.WriteLine(string.Format("Middle Initial: {0}", user.MiddleInitial));
                         Console.WriteLine(string.Format("Email Address: {0}", user.Email));
                         Console.WriteLine(string.Format("Telephone Number: {0}", user.Telephone));
                     }
            
                     Console.ReadLine();
                 }
             }
             </code>
             This example shows the config file section that can be used to specify the domain account to be used for Active Directory queries:
             <code>
             <![CDATA[
             <?xml version="1.0"?>
             <configuration>
               <configSections>
                 <section name="categorizedSettings" type="TVA.Configuration.CategorizedSettingsSection, TVA.Core" />
               </configSections>
               <categorizedSettings>
                 <activeDirectory>
                   <add name="PrivilegedDomain" value="" description="Domain of privileged domain user account."
                     encrypted="false" />
                   <add name="PrivilegedUserName" value="" description="Username of privileged domain user account."
                     encrypted="false" />
                   <add name="PrivilegedPassword" value="" description="Password of privileged domain user account."
                     encrypted="true" />
                 </activeDirectory>
               </categorizedSettings>
             </configuration>
             ]]>
             </code>
             </example>
        </member>
        <member name="F:TVA.Identity.UserInfo.DefaultPersistSettings">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Identity.UserInfo.PersistSettings"/> property.
            </summary>
        </member>
        <member name="F:TVA.Identity.UserInfo.DefaultSettingsCategory">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Identity.UserInfo.SettingsCategory"/> property.
            </summary>
        </member>
        <member name="M:TVA.Identity.UserInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Identity.UserInfo"/> class.
            </summary>
            <param name="loginID">
            Login ID in 'domain\username' format of the user's account whose information is to be retrieved. Login ID 
            can also be specified in 'username' format without the domain name, in which case the domain name will be
            approximated based on the privileged user domain if specified, default logon domain of the host machine 
            if available, or the domain of the identity that owns the host process.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="loginID"/> is a null or empty string.</exception>
        </member>
        <member name="M:TVA.Identity.UserInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Identity.UserInfo"/> class.
            </summary>
            <param name="loginID">
            Login ID in 'domain\username' format of the user's account whose information is to be retrieved. Login ID 
            can also be specified in 'username' format without the domain name, in which case the domain name will be
            approximated based on the privileged user domain if specified, default logon domain of the host machine 
            if available, or the domain of the identity that owns the host process.
            </param>
            <param name="ldapPath">
            String in 'LDAP://' format that specifies the Active Directory node where search for the user starts.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="loginID"/> is a null or empty string.</exception>
        </member>
        <member name="M:TVA.Identity.UserInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Identity.UserInfo"/> class.
            </summary>
        </member>
        <member name="M:TVA.Identity.UserInfo.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Identity.UserInfo"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Identity.UserInfo.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Identity.UserInfo"/> object.
            </summary>
        </member>
        <member name="M:TVA.Identity.UserInfo.Initialize">
            <summary>
            Initializes the <see cref="T:TVA.Identity.UserInfo"/> object.
            </summary>
        </member>
        <member name="M:TVA.Identity.UserInfo.SaveSettings">
            <summary>
            Saves settings for the <see cref="T:TVA.Identity.UserInfo"/> object to the config file if the <see cref="P:TVA.Identity.UserInfo.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Identity.UserInfo.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Identity.UserInfo.LoadSettings">
            <summary>
            Loads saved settings for the <see cref="T:TVA.Identity.UserInfo"/> object from the config file if the <see cref="P:TVA.Identity.UserInfo.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Identity.UserInfo.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Identity.UserInfo.DefinePrivilegedAccount(System.String,System.String,System.String)">
             <summary>
             Defines the credentials of a privileged domain account that can be used for impersonation prior to the 
             retrieval of user information from the Active Directory.
             </summary>
             <param name="domain">Domain of privileged domain user account.</param>
             <param name="username">Username of privileged domain user account.</param>
             <param name="password">Password of privileged domain user account.</param>
             <example>
             This example shows how to define the identity of the user to be used for retrieving information from Active Directory:
             <code>
             using System;
             using TVA.Identity;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     using (UserInfo user = new UserInfo("XYZCorp\\johndoe"))
                     {
                         // Define the identity to use for retrieving Active Directory information.
                         // Persist identity credentials encrypted to the config for easy access.
                         user.PersistSettings = true;
                         user.DefinePrivilegedAccount("XYZCorp", "admin", "Passw0rd");
            
                         // Retrieve and display user information from Active Directory.
                         Console.WriteLine(string.Format("First Name: {0}", user.FirstName));
                         Console.WriteLine(string.Format("Last Name: {0}", user.LastName));
                         Console.WriteLine(string.Format("Middle Initial: {0}", user.MiddleInitial));
                         Console.WriteLine(string.Format("Email Address: {0}", user.Email));
                         Console.WriteLine(string.Format("Telephone Number: {0}", user.Telephone));
                     }
            
                     Console.ReadLine();
                 }
             }
             </code>
            </example>
        </member>
        <member name="M:TVA.Identity.UserInfo.ImpersonatePrivilegedAccount">
            <summary>
            Impersonates the defined privileged domain account.
            </summary>
            <returns>An <see cref="T:System.Security.Principal.WindowsImpersonationContext"/> if privileged domain account has been defined, otherwise null.</returns>
        </member>
        <member name="M:TVA.Identity.UserInfo.GetUserProperty(System.String)">
            <summary>
            Returns the value for specified active directory property.
            </summary>
            <param name="propertyName">Name of the active directory property whose value is to be retrieved.</param>
            <returns>Value for the specified active directory property.</returns>
        </member>
        <member name="M:TVA.Identity.UserInfo.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Identity.UserInfo"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Identity.UserInfo.AuthenticateUser(System.String,System.String,System.String)">
             <summary>
             Authenticates the specified user credentials.
             </summary>
             <param name="domain">Domain of user to authenticate.</param>
             <param name="username">Username of user to authenticate.</param>
             <param name="password">Password of user to authenticate.</param>
             <returns>true if the user credentials are authenticated successfully; otherwise false.</returns>
             <example>
             This example shows how to validate a user's credentials:
             <code>
             using System;
             using TVA.Identity;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     string domain = "XYZCorp";
                     string username = "johndoe";
                     string password = "password";
                    
                     // Authenticate user credentials.
                     if (UserInfo.AuthenticateUser(domain, username, password) != null)
                         Console.WriteLine("Successfully authenticated user \"{0}\\{1}\".", domain, username);
                     else
                         Console.WriteLine("Failed to authenticate user \"{0}\\{1}\".", domain, username);
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Identity.UserInfo.AuthenticateUser(System.String,System.String,System.String,System.String@)">
             <summary>
             Authenticates the specified user credentials.
             </summary>
             <param name="domain">Domain of user to authenticate.</param>
             <param name="username">Username of user to authenticate.</param>
             <param name="password">Password of user to authenticate.</param>
             <param name="errorMessage">Error message returned, if authentication fails.</param>
             <returns>true if the user credentials are authenticated successfully; otherwise false.</returns>
             <example>
             This example shows how to validate a user's credentials and retrieve an error message if validation fails: 
             <code>
             using System;
             using TVA.Identity;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     string domain = "XYZCorp";
                     string username = "johndoe";
                     string password = "password";
                     string errorMessage;
            
                     // Authenticate user credentials.
                     if (UserInfo.AuthenticateUser(domain, username, password, out errorMessage) != null)
                         Console.WriteLine("Successfully authenticated user \"{0}\\{1}\".", domain, username);
                     else
                         Console.WriteLine("Failed to authenticate user \"{0}\\{1}\" due to exception: {2}", domain, username, errorMessage);
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Identity.UserInfo.ImpersonateUser(System.String,System.String,System.String)">
             <summary>
             Impersonates the specified user.
             </summary>
             <param name="domain">Domain of user to impersonate.</param>
             <param name="username">Username of user to impersonate.</param>
             <param name="password">Password of user to impersonate.</param>
             <returns>A <see cref="T:System.Security.Principal.WindowsImpersonationContext"/> object of the impersonated user.</returns>
             <remarks>After impersonating a user the code executes under the impersonated user's identity.</remarks>
             <example>
             This example shows how to impersonate a user:
             <code>
             using System;
             using TVA.Identity;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     Console.WriteLine(string.Format("User before impersonation: {0}", UserInfo.CurrentUserID));
                     UserInfo.ImpersonateUser("XYZCorp", "johndoe", "password"); // Impersonate user.
                     Console.WriteLine(string.Format("User after impersonation: {0}", UserInfo.CurrentUserID));
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Identity.UserInfo.EndImpersonation(System.Security.Principal.WindowsImpersonationContext)">
             <summary>
             Ends the impersonation of the specified user.
             </summary>
             <param name="impersonatedUser"><see cref="T:System.Security.Principal.WindowsImpersonationContext"/> of the impersonated user.</param>
             <example>
             This example shows how to terminate an active user impersonation:
             <code>
             using System;
             using System.IO;
             using System.Security.Principal;
             using TVA.Identity;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Impersonate user.
                     WindowsImpersonationContext context = UserInfo.ImpersonateUser("XYZCorp", "johndoe", "password");
                     // Perform operation requiring elevated privileges.
                     Console.WriteLine(File.ReadAllText(@"\\server\share\file.xml"));
                     // End the impersonation.
                     UserInfo.EndImpersonation(context);
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:TVA.Identity.UserInfo.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.Identity.UserInfo"/> object is currently enabled.
            </summary>
            <remarks>
            <see cref="P:TVA.Identity.UserInfo.Enabled"/> property is not be set by user-code directly.
            </remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.PersistSettings">
            <summary>
            Gets or sets a boolean value that indicates whether the settings of <see cref="T:TVA.Identity.UserInfo"/> object are 
            to be saved to the config file.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.SettingsCategory">
            <summary>
            Gets or sets the category under which the settings of <see cref="T:TVA.Identity.UserInfo"/> object are to be saved
            to the config file if the <see cref="P:TVA.Identity.UserInfo.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
        </member>
        <member name="P:TVA.Identity.UserInfo.LoginID">
            <summary>
            Gets the Login ID of the user.
            </summary>
            <remarks>Returns the value provided in the <see cref="M:TVA.Identity.UserInfo.#ctor(System.String)"/> constructor.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.LastLogon">
            <summary>
            Gets the last login time of the user.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.AccountCreationDate">
            <summary>
            Gets the <see cref="T:System.DateTime"/> when the account was created.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.NextPasswordChangeDate">
            <summary>
            Gets the <see cref="T:System.DateTime"/>, in UTC, of next password change for the user.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.UserAccountControl">
            <summary>
            Gets the account control information of the user.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.AccountIsLockedOut">
            <summary>
            Gets flag that determines if account is locked-out for this user.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.AccountIsDisabled">
            <summary>
            Gets flag that determines if account is disabled for this user.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.PasswordCannotChange">
            <summary>
            Gets flag that determines if account password cannot change for this user.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.PasswordDoesNotExpire">
            <summary>
            Gets flag that determines if account password does not expire for this user.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.MaximumPasswordAge">
            <summary>
            Gets ths maximum password age for the user.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.Groups">
            <summary>
            Gets the groups asscociated with the user.
            </summary>
            <remarks>
            Groups names are prefixed with their associated domain or computer name.
            </remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.FirstName">
            <summary>
            Gets the First Name of the user.
            </summary>
            <remarks>Returns the value retrieved for the "givenName" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.LastName">
            <summary>
            Gets the Last Name of the user.
            </summary>
            <remarks>Returns the value retrieved for the "sn" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.DisplayName">
            <summary>
            Gets the Display Name the user.
            </summary>
            <remarks>Returns the value retrieved for the "displayName" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.MiddleInitial">
            <summary>
            Gets the Middle Initial of the user.
            </summary>
            <remarks>Returns the value retrieved for the "initials" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.FullName">
            <summary>
            Gets the Full Name of the user.
            </summary>
            <remarks>Returns the concatenation of <see cref="P:TVA.Identity.UserInfo.FirstName"/>, <see cref="P:TVA.Identity.UserInfo.MiddleInitial"/> and <see cref="P:TVA.Identity.UserInfo.LastName"/> properties.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.Email">
            <summary>
            Gets the E-Mail address of the user.
            </summary>
            <remarks>Returns the value retrieved for the "mail" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.Webpage">
            <summary>
            Gets the web page address of the user.
            </summary>
            <remarks>Returns the value retrieved for the "wWWHomePage" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.Description">
            <summary>
            Gets the description specified for the user.
            </summary>
            <remarks>Returns the value retrieved for the "description" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.Telephone">
            <summary>
            Gets the Telephone Number of the user.
            </summary>
            <remarks>Returns the value retrieved for the "telephoneNumber" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.Title">
            <summary>
            Gets the Title of the user.
            </summary>
            <remarks>Returns the value retrieved for the "title" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.Company">
            <summary>
            Gets the Company of the user.
            </summary>
            <remarks>Returns the value retrieved for the "company" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.Office">
            <summary>
            Gets the Office location of the user.
            </summary>
            <remarks>Returns the value retrieved for the "physicalDeliveryOfficeName" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.Department">
            <summary>
            Gets the Department where the user works.
            </summary>
            <remarks>Returns the value retrieved for the "department" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.City">
            <summary>
            Gets the City where the user works.
            </summary>
            <remarks>Returns the value retrieved for the "l" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.Mailbox">
            <summary>
            Gets the Mailbox address of where the user works.
            </summary>
            <remarks>Returns the value retrieved for the "streetAddress" active directory property.</remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.UserEntry">
            <summary>
            Gets the <see cref="T:System.DirectoryServices.DirectoryEntry"/> object used for retrieving user information.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.IsWinNTEntry">
            <summary>
            Gets flag that determines if this <see cref="T:TVA.Identity.UserInfo"/> instance is based on a local WinNT account instead of found through LDAP.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.CurrentUserID">
            <summary>
            Gets the <see cref="P:TVA.Identity.UserInfo.LoginID"/> of the current user.
            </summary>
            <remarks>
            The <see cref="P:TVA.Identity.UserInfo.LoginID"/> returned is that of the user account under which the code is executing.
            </remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.CurrentUserInfo">
            <summary>
            Gets the <see cref="T:TVA.Identity.UserInfo"/> object for the <see cref="P:TVA.Identity.UserInfo.CurrentUserID"/>.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.RemoteUserID">
            <summary>
            Gets the <see cref="P:TVA.Identity.UserInfo.LoginID"/> of the remote web user.
            </summary>
            <remarks>
            The <see cref="P:TVA.Identity.UserInfo.LoginID"/> returned is that of the remote user accessing the web application. This is 
            available only if the virtual directory hosting the web application is configured to use "Integrated 
            Windows Authentication".
            </remarks>
        </member>
        <member name="P:TVA.Identity.UserInfo.RemoteUserInfo">
            <summary>
            Gets the <see cref="T:TVA.Identity.UserInfo"/> object for the <see cref="P:TVA.Identity.UserInfo.RemoteUserID"/>.
            </summary>
        </member>
        <member name="P:TVA.Identity.UserInfo.MachineIsJoinedToDomain">
            <summary>
            Gets a boolean value that indicates whether the current machine is joined to a domain.
            </summary>
        </member>
        <member name="T:TVA.ErrorManagement.ErrorDialog">
            <summary>
            Represents a dialog box that can be used to display detailed exception inmormation.
            </summary>
            <seealso cref="T:TVA.ErrorManagement.ErrorLogger"/>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.ErrorManagement.ErrorDialog"/> class.
            </summary>
        </member>
        <member name="T:TVA.Configuration.AppSettingsBase">
            <summary>
            Represents the base class for application settings that are synchronized with the "appSettings" section in a configuration file.
            </summary>
            <remarks>
            <para>
            In order to make custom types serializable for the configuration file, implement a <see cref="T:System.ComponentModel.TypeConverter"/> for the type.<br/>
            See <a href="http://msdn.microsoft.com/en-us/library/ayybcxe5.aspx">MSDN</a> for details.
            </para>
            <example>
            Here is an example class derived from <see cref="T:TVA.Configuration.AppSettingsBase"/> that automatically
            serializes its fields and properties to the configuration file.
            <code>
               public enum MyEnum
                {
                    One,
                    Two,
                    Three
                }
            
                public class MySettings : AppSettingsBase
                {
                    // Private property fields (private fields will not be serialized)
                    private double m_doubleVal;
            
                    // Public settings fields
                    public bool BoolVal = true;
                    public int IntVal = 1;
                    public float FloatVal = 3.14F;
                    public string StrVal = "This is a test...";
                    public MyEnum EnumVal = MyEnum.Three;
                    
                    [SettingName("UserOptions"), EncryptSetting()]
                    public string Password = "default";
            
                    // Mark this field to not be serialized to INI file...
                    [SerializeSetting(false)]
                    public decimal DecimalVal;
            
                    [Category("OtherSettings"), DefaultValue(1.159D)]
                    public double DoubleVal
                    {
                        get
                        {
                            return m_doubleVal;
                        }
                        set
                        {
                            m_doubleVal = value;
                        }
                    }
            
                    [SerializeSetting(false)]
                    public bool DontSerializeMe { get; set; }
                }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Configuration.AppSettingsBase.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.AppSettingsBase"/> class for the application's configuration file.
            </summary>
        </member>
        <member name="M:TVA.Configuration.AppSettingsBase.#ctor(TVA.Configuration.ConfigurationFile,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:TVA.Configuration.AppSettingsBase"/> class for the application's configuration file.
            </summary>
            <param name="configFile">Configuration file used for accessing settings.</param>
            <param name="requireSerializeSettingAttribute">
            Assigns flag that determines if <see cref="T:TVA.Configuration.SerializeSettingAttribute"/> is required
            to exist before a field or property is serialized to the configuration file.
            </param>
            <param name="initialize">Determines if <see cref="M:TVA.Configuration.SettingsBase.Initialize"/> method should be called from constructor.</param>
            <remarks>
            Note that some .NET languages (e.g., Visual Basic) will not initialize member elements before call to constuctor,
            in this case <paramref name="initialize"/> should be set to <c>false</c>, then the <see cref="M:TVA.Configuration.SettingsBase.Initialize"/>
            method should be called manually after all properties have been initialized. Alternately, consider using the
            <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the fields or properties and this will be used to initialize the values.
            </remarks>
        </member>
        <member name="M:TVA.Configuration.AppSettingsBase.CreateSetting(System.String,System.String,System.String)">
            <summary>
            Create setting in configuration file if it doesn't already exist.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.AppSettingsBase.RetrieveSetting(System.String,System.String)">
            <summary>
            Retrieves setting from configuration file.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <returns>Setting value.</returns>
        </member>
        <member name="M:TVA.Configuration.AppSettingsBase.StoreSetting(System.String,System.String,System.String)">
            <summary>
            Stores setting to configuration file.
            This method is for internal use.
            </summary>
            <param name="name">Field or property name, if useful (can be different from setting name).</param>
            <param name="setting">Setting name.</param>
            <param name="value">Setting value.</param>
        </member>
        <member name="M:TVA.Configuration.AppSettingsBase.PersistSettings">
            <summary>
            Persist any pending changes to configuration file.
            This method is for internal use.
            </summary>
        </member>
        <member name="P:TVA.Configuration.AppSettingsBase.ConfigFile">
            <summary>
            Gets or sets reference to working configuration file.
            </summary>
            <exception cref="T:System.NullReferenceException">value cannot be null.</exception>
        </member>
        <member name="T:TVA.Validation.ValidationService">
            <summary>
            A class that facilitates value validation using <see cref="T:TVA.Validation.IValidator"/> implementations.
            </summary>
            <example>
            This example shows how to use <see cref="T:TVA.Validation.ValidationService"/> for input validation:
            <code>
            using System;
            using System.Collections.Generic;
            using TVA.Validation;
            
            class Program
            {
                static void Main(string[] args)
                {
                    // Dictionary where captured user input is saved.
                    Dictionary&lt;string, string&gt; input = new Dictionary&lt;string, string&gt;();
            
                    // Validation service that will validate user input.
                    ValidationService validation = new ValidationService(delegate(string source)
                        {
                            string value;
                            if (input.TryGetValue(source, out value))
                                return input[source];
                            else
                                return string.Empty;
                        });
            
                    // Add validation rules to the validation service.
                    validation.AddValidation("Name", new NonNullStringValidator());
                    validation.AddValidation("Email", new EmailAddressValidator());
            
                    // Capture user input.
                    Console.Write("Enter name: ");
                    input["Name"] = Console.ReadLine();
                    Console.Write("Enter email: ");
                    input["Email"] = Console.ReadLine();
                    Console.WriteLine("");
                
                    // Validate user input.
                    string errors;
                    if (!validation.Validate(out errors))
                        Console.WriteLine(errors);
                    else
                        Console.WriteLine("No validation errors were found!");
            
                    Console.ReadLine();
                }
            }
            </code>
            </example>
            <seealso cref="T:TVA.Validation.IValidator"/>
        </member>
        <member name="M:TVA.Validation.ValidationService.#ctor(System.Func{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Validation.ValidationService"/> class.
            </summary>
            <param name="valueLookupHandler"><see cref="T:System.Delegate"/> that will lookup the value to be validated.</param>
        </member>
        <member name="M:TVA.Validation.ValidationService.AddValidation(System.String,TVA.Validation.IValidator)">
            <summary>
            Adds a new validation.
            </summary>
            <param name="source">The source that will provide the value to be validated.</param>
            <param name="validator">The <see cref="T:TVA.Validation.IValidator"/> that will validate the value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:TVA.Validation.ValidationService.Validate(System.String@)">
            <summary>
            Executes all validations.
            </summary>
            <param name="validationErrors">Errors messages returned by one or more of the validations.</param>
            <returns><strong>true</strong> if the validation completes without errors; otherwise <strong>false</strong>.</returns>
        </member>
        <member name="T:TVA.Units.NamespaceDoc">
            <summary>
            Contains classes used to simplify and standardize standard unit and SI conversions.
            </summary>
        </member>
        <member name="T:TVA.Scheduling.DateTimePart">
            <summary>
            Indicates the date/time element that a <see cref="T:TVA.Scheduling.SchedulePart"/> represents.
            </summary>
            <remarks>This enumeration specifically corresponds to the UNIX crontab date/time elements.</remarks>
        </member>
        <member name="F:TVA.Scheduling.DateTimePart.Minute">
            <summary>
            <see cref="T:TVA.Scheduling.SchedulePart"/> represents minutes. Legal values are 0 through 59.
            </summary>
        </member>
        <member name="F:TVA.Scheduling.DateTimePart.Hour">
            <summary>
            <see cref="T:TVA.Scheduling.SchedulePart"/> represents hours. Legal values are 0 through 23.
            </summary>
        </member>
        <member name="F:TVA.Scheduling.DateTimePart.Day">
            <summary>
            <see cref="T:TVA.Scheduling.SchedulePart"/> represents day of month. Legal values are 1 through 31.
            </summary>
        </member>
        <member name="F:TVA.Scheduling.DateTimePart.Month">
            <summary>
            <see cref="T:TVA.Scheduling.SchedulePart"/> represents months. Legal values are 1 through 12.
            </summary>
        </member>
        <member name="F:TVA.Scheduling.DateTimePart.DayOfWeek">
            <summary>
            <see cref="T:TVA.Scheduling.SchedulePart"/> represents day of week. Legal values are 0 through 7 where 0 is Sunday.
            </summary>
        </member>
        <member name="T:TVA.Scheduling.SchedulePartTextSyntax">
            <summary>
            Indicates the syntax used in a <see cref="T:TVA.Scheduling.SchedulePart"/> for specifying its values.
            </summary>
        </member>
        <member name="F:TVA.Scheduling.SchedulePartTextSyntax.Any">
            <summary>
            Values for the <see cref="T:TVA.Scheduling.SchedulePart"/> were specified using the '*' text syntax. Included values are 
            all legal values for the <see cref="T:TVA.Scheduling.DateTimePart"/> that the <see cref="T:TVA.Scheduling.SchedulePart"/> represents.
            </summary>
        </member>
        <member name="F:TVA.Scheduling.SchedulePartTextSyntax.EveryN">
            <summary>
            Values for the <see cref="T:TVA.Scheduling.SchedulePart"/> were specified using the '*/n' text syntax. Included values are 
            legal values for the <see cref="T:TVA.Scheduling.DateTimePart"/> that the <see cref="T:TVA.Scheduling.SchedulePart"/> represents that are 
            divisible by 'n'. 
            </summary>
        </member>
        <member name="F:TVA.Scheduling.SchedulePartTextSyntax.Range">
            <summary>
            Values for the <see cref="T:TVA.Scheduling.SchedulePart"/> were specified using the 'n1-nn' text syntax. Included values 
            are legal values for the <see cref="T:TVA.Scheduling.DateTimePart"/> that the <see cref="T:TVA.Scheduling.SchedulePart"/> represents that
            are within the specified range.
            </summary>
        </member>
        <member name="F:TVA.Scheduling.SchedulePartTextSyntax.Specific">
            <summary>
            Values for the <see cref="T:TVA.Scheduling.SchedulePart"/> were specified using the 'n1,n2,nn' text syntax. Included values 
            are specific legal values for the <see cref="T:TVA.Scheduling.DateTimePart"/> that the <see cref="T:TVA.Scheduling.SchedulePart"/> represents.
            </summary>
        </member>
        <member name="T:TVA.Scheduling.SchedulePart">
            <summary>
            Represents a part of the <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <seealso cref="T:TVA.Scheduling.Schedule"/>
        </member>
        <member name="M:TVA.Scheduling.SchedulePart.#ctor(System.String,TVA.Scheduling.DateTimePart)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Scheduling.SchedulePart"/> class.
            </summary>
            <param name="valueText">The text that specifies the values for the <see cref="T:TVA.Scheduling.SchedulePart"/> object.</param>
            <param name="dateTimePart">The <see cref="P:TVA.Scheduling.SchedulePart.DateTimePart"/> that the <see cref="T:TVA.Scheduling.SchedulePart"/> object represents.</param>
        </member>
        <member name="M:TVA.Scheduling.SchedulePart.Matches(System.DateTime)">
            <summary>
            Determines if the <see cref="P:TVA.Scheduling.SchedulePart.Values"/> for the <see cref="P:TVA.Scheduling.SchedulePart.DateTimePart"/> that the <see cref="T:TVA.Scheduling.SchedulePart"/> 
            object represents matches the specified <paramref name="dateTime"/>.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> against which the <see cref="P:TVA.Scheduling.SchedulePart.Values"/> are to be matches.</param>
            <returns>true if one of the <see cref="P:TVA.Scheduling.SchedulePart.Values"/> matches the <paramref name="dateTime"/>; otherwise false.</returns>
        </member>
        <member name="P:TVA.Scheduling.SchedulePart.ValueText">
            <summary>
            Gets the text used to specify the values for the <see cref="T:TVA.Scheduling.SchedulePart"/> object.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.SchedulePart.DateTimePart">
            <summary>
            Gets the <see cref="P:TVA.Scheduling.SchedulePart.DateTimePart"/> that the <see cref="T:TVA.Scheduling.SchedulePart"/> object represents.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.SchedulePart.ValueTextSyntax">
            <summary>
            Gets the <see cref="T:TVA.Scheduling.SchedulePartTextSyntax"/> used in the <see cref="P:TVA.Scheduling.SchedulePart.ValueText"/> for specifying the 
            values of the <see cref="T:TVA.Scheduling.SchedulePart"/> object.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.SchedulePart.Description">
            <summary>
            Gets a meaningful description of the <see cref="T:TVA.Scheduling.SchedulePart"/> object.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.SchedulePart.Values">
            <summary>
            Gets the list of values for the <see cref="T:TVA.Scheduling.SchedulePart"/> object specified using <see cref="P:TVA.Scheduling.SchedulePart.ValueText"/>.
            </summary>
        </member>
        <member name="T:TVA.Scheduling.ScheduleManager">
            <summary>
            Monitors multiple <see cref="T:TVA.Scheduling.Schedule"/> at an interval of one minute to check if they are due.
            </summary>
            <example>
            This example shows how to use the <see cref="T:TVA.Scheduling.ScheduleManager"/> component:
            <code>
            using System;
            using TVA;
            using TVA.Scheduling;
            
            class Program
            {
                static void Main(string[] args)
                {
                    ScheduleManager scheduler = new ScheduleManager();
                    scheduler.Initialize();
                    // Add event handlers.
                    scheduler.Starting += scheduler_Starting;
                    scheduler.Started += scheduler_Started;
                    scheduler.ScheduleDue += scheduler_ScheduleDue;
                    // Add test schedules.
                    scheduler.AddSchedule("Run.Notepad", "* * * * *");
                    scheduler.AddSchedule("Run.Explorer", "* * * * *");
                    // Start the scheduler.
                    scheduler.Start();
            
                    Console.ReadLine();
                }
            
                static void scheduler_Started(object sender, EventArgs e)
                {
                    Console.WriteLine("Scheduler has started successfully.");
                }
            
                static void scheduler_Starting(object sender, EventArgs e)
                {
                    Console.WriteLine("Scheduler is waiting to be started.");
                }
            
                static void scheduler_ScheduleDue(object sender, EventArgs<![CDATA[<]]>Schedule<![CDATA[>]]> e)
                {
                    Console.WriteLine(string.Format("{0} schedule is due for processing.", e.Argument.Name));
                }
            }
            </code>
            </example>
            <seealso cref="T:TVA.Scheduling.Schedule"/>
        </member>
        <member name="F:TVA.Scheduling.ScheduleManager.DefaultPersistSettings">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Scheduling.ScheduleManager.PersistSettings"/> property.
            </summary>
        </member>
        <member name="F:TVA.Scheduling.ScheduleManager.DefaultSettingsCategory">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Scheduling.ScheduleManager.SettingsCategory"/> property.
            </summary>
        </member>
        <member name="F:TVA.Scheduling.ScheduleManager.TimerInterval">
            <summary>
            Number of milliseconds between timer ticks.
            </summary>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Scheduling.ScheduleManager"/> class.
            </summary>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Scheduling.ScheduleManager"/> class.
            </summary>
            <param name="container"><see cref="T:System.ComponentModel.IContainer"/> object that contains the <see cref="T:TVA.Scheduling.ScheduleManager"/>.</param>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.Initialize">
            <summary>
            Initializes the <see cref="T:TVA.Scheduling.ScheduleManager"/> object.
            </summary>
            <remarks>
            <see cref="M:TVA.Scheduling.ScheduleManager.Initialize"/> is to be called by user-code directly only if the <see cref="T:TVA.Scheduling.ScheduleManager"/> 
            object is not consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.BeginInit">
            <summary>
            Performs necessary operations before the <see cref="T:TVA.Scheduling.ScheduleManager"/> object properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.Scheduling.ScheduleManager.BeginInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.Scheduling.ScheduleManager"/> object is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.EndInit">
            <summary>
            Performs necessary operations after the <see cref="T:TVA.Scheduling.ScheduleManager"/> object properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.Scheduling.ScheduleManager.EndInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.Scheduling.ScheduleManager"/> object is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.SaveSettings">
            <summary>
            Saves settings for the <see cref="T:TVA.Scheduling.ScheduleManager"/> object to the config file if the <see cref="P:TVA.Scheduling.ScheduleManager.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Scheduling.ScheduleManager.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.LoadSettings">
            <summary>
            Loads saved settings for the <see cref="T:TVA.Scheduling.ScheduleManager"/> object from the config file if the <see cref="P:TVA.Scheduling.ScheduleManager.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.Scheduling.ScheduleManager.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.Start">
            <summary>
            Starts the <see cref="T:TVA.Scheduling.ScheduleManager"/> asynchronously if not running.
            </summary>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.Stop">
            <summary>
            Stops the <see cref="T:TVA.Scheduling.ScheduleManager"/> if running.
            </summary>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.CheckAllSchedules">
            <summary>
            Checks all of the <see cref="P:TVA.Scheduling.ScheduleManager.Schedules"/> to determine if they are due.
            </summary>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.AddSchedule(System.String,System.String)">
            <summary>
            Attempts to add a new <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <param name="scheduleName">Name of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <param name="scheduleRule">Rule of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <returns>true if a new <see cref="T:TVA.Scheduling.Schedule"/> was added or an existing one was updated; otherwise false.</returns>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.AddSchedule(System.String,System.String,System.Boolean)">
            <summary>
            Attempts to add a new <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <param name="scheduleName">Name of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <param name="scheduleRule">Rule of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <param name="updateExisting">true to update existing <see cref="T:TVA.Scheduling.Schedule"/> with the specified <paramref name="scheduleName"/>; otherwise false.</param>
            <returns>true if a new <see cref="T:TVA.Scheduling.Schedule"/> was added or an existing one was updated; otherwise false.</returns>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.AddSchedule(System.String,System.String,System.String)">
            <summary>
            Attempts to add a new <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <param name="scheduleName">Name of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <param name="scheduleRule">Rule of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <param name="scheduleDescription">Description of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <returns>true if a new <see cref="T:TVA.Scheduling.Schedule"/> was added; otherwise false.</returns>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.AddSchedule(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Attempts to add a new <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <param name="scheduleName">Name of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <param name="scheduleRule">Rule of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <param name="scheduleDescription">Description of the new <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <param name="updateExisting">true to update existing <see cref="T:TVA.Scheduling.Schedule"/> with the specified <paramref name="scheduleName"/>; otherwise false.</param>
            <returns>true if a new <see cref="T:TVA.Scheduling.Schedule"/> was added or an existing one was updated; otherwise false.</returns>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.RemoveSchedule(System.String)">
            <summary>
            Attempts to remove a <see cref="T:TVA.Scheduling.Schedule"/> with the specified name if one exists.
            </summary>
            <param name="scheduleName">Name of the <see cref="T:TVA.Scheduling.Schedule"/> to be removed.</param>
            <returns>true if the <see cref="T:TVA.Scheduling.Schedule"/> was removed; otherwise false.</returns>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.FindSchedule(System.String)">
            <summary>
            Searches for the <see cref="T:TVA.Scheduling.Schedule"/> with the specified name.
            </summary>
            <param name="scheduleName">Name of the <see cref="T:TVA.Scheduling.Schedule"/> to be obtained.</param>
            <returns><see cref="T:TVA.Scheduling.Schedule"/> object if a match is found; otherwise null.</returns>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.OnStarting">
            <summary>
            Raises the <see cref="E:TVA.Scheduling.ScheduleManager.Starting"/> event.
            </summary>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.OnStarted">
            <summary>
            Raises the <see cref="E:TVA.Scheduling.ScheduleManager.Started"/> event.
            </summary>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.OnScheduleDue(TVA.Scheduling.Schedule)">
            <summary>
            Raises the <see cref="E:TVA.Scheduling.ScheduleManager.ScheduleDue"/> event.
            </summary>
            <param name="schedule"><see cref="T:TVA.Scheduling.Schedule"/> to send to <see cref="E:TVA.Scheduling.ScheduleManager.ScheduleDue"/> event.</param>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.OnScheduleDueCheck(TVA.EventArgs{TVA.Scheduling.Schedule})">
            <summary>
            Raises the <see cref="E:TVA.Scheduling.ScheduleManager.ScheduleDueCheck"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:TVA.Scheduling.ScheduleManager.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Scheduling.ScheduleManager"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="E:TVA.Scheduling.ScheduleManager.Starting">
            <summary>
            Occurs while the <see cref="T:TVA.Scheduling.ScheduleManager"/> is waiting to start at the top of the minute.
            </summary>
        </member>
        <member name="E:TVA.Scheduling.ScheduleManager.Started">
            <summary>
            Occurs when the <see cref="T:TVA.Scheduling.ScheduleManager"/> has started at the top of the minute.
            </summary>
        </member>
        <member name="E:TVA.Scheduling.ScheduleManager.ScheduleDue">
            <summary>
            Occurs asynchronously when a <see cref="T:TVA.Scheduling.Schedule"/> is due according to the rule specified for it.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the <see cref="T:TVA.Scheduling.Schedule"/> that is due.
            </remarks>
        </member>
        <member name="E:TVA.Scheduling.ScheduleManager.ScheduleDueCheck">
            <summary>
            Occurs when the a particular <see cref="T:TVA.Scheduling.Schedule"/> is being checked to see if it is due.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the <see cref="T:TVA.Scheduling.Schedule"/> that is being checked to see if it is due.
            </remarks>
        </member>
        <member name="P:TVA.Scheduling.ScheduleManager.PersistSettings">
            <summary>
            Gets or sets a boolean value that indicates whether the settings of <see cref="T:TVA.Scheduling.ScheduleManager"/> object are 
            to be saved to the config file.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.ScheduleManager.SettingsCategory">
            <summary>
            Gets or sets the category under which the settings of <see cref="T:TVA.Scheduling.ScheduleManager"/> object are to be saved
            to the config file if the <see cref="P:TVA.Scheduling.ScheduleManager.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
        </member>
        <member name="P:TVA.Scheduling.ScheduleManager.Schedules">
            <summary>
            Gets a list of all <see cref="T:TVA.Scheduling.Schedule"/> monitored by the <see cref="T:TVA.Scheduling.ScheduleManager"/> object.
            </summary>
            <remarks>
            Thread-safety Warning: Due to the asynchronous nature of <see cref="T:TVA.Scheduling.ScheduleManager"/>, a lock must be 
            obtained on <see cref="P:TVA.Scheduling.ScheduleManager.Schedules"/> before accessing it.
            </remarks>
        </member>
        <member name="P:TVA.Scheduling.ScheduleManager.IsRunning">
            <summary>
            Gets a boolean value that indicates whether the <see cref="T:TVA.Scheduling.ScheduleManager"/> is running.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.ScheduleManager.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.Scheduling.ScheduleManager"/> object is currently enabled.
            </summary>
            <remarks>
            <see cref="P:TVA.Scheduling.ScheduleManager.Enabled"/> property is not be set by user-code directly.
            </remarks>
        </member>
        <member name="P:TVA.Scheduling.ScheduleManager.Name">
            <summary>
            Gets the unique identifier of the <see cref="T:TVA.Scheduling.ScheduleManager"/> object.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.ScheduleManager.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:TVA.Scheduling.ScheduleManager"/> object.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpOutputDataStream">
            <summary>
            Defines a FTP data output stream for remote files.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpOutputDataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Cannot read from output stream, method is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Cannot read from output stream.</exception>
            <param name="buffer">A <see cref="T:System.Byte"/> array buffer.</param>
            <param name="count">An <see cref="T:System.Int32"/> offset into the stream to read from.</param>
            <param name="offset">An <see cref="T:System.Int32"/> number of bytes to read.</param>
            <returns>An <see cref="T:System.Int32"/> number of bytes read.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpOutputDataStream.ReadByte">
            <summary>
            Cannot read from output stream, method is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Cannot read from output stream.</exception>
            <returns>An <see cref="T:System.Int32"/> number of bytes read.</returns>
        </member>
        <member name="P:TVA.Net.Ftp.FtpOutputDataStream.CanRead">
            <summary>
            Returns false, cannot read from output stream.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.TransferMode">
            <summary>
            FTP transfer mode enumeration.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.TransferMode.Ascii">
            <summary>
            Transfer files in ASCII mode.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.TransferMode.Binary">
            <summary>
            Transfer files in binary mode.
            </summary>
        </member>
        <member name="F:TVA.Net.Ftp.TransferMode.Unknown">
            <summary>
            File transfer mode is undetermined.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpControlChannel">
            <summary>
            FTP control channel.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpControlChannel.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Net.Ftp.FtpControlChannel"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpControlChannel.Close">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Net.Ftp.FtpControlChannel"/> object.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpControlChannel.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Net.Ftp.FtpControlChannel"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpControlChannel.Connect">
            <summary>
            Connects the <see cref="T:TVA.Net.Ftp.FtpControlChannel"/>.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpControlChannel.Command(System.String)">
            <summary>
            Send FTP command to control channel.
            </summary>
            <param name="cmd">A <see cref="T:System.String"/> representing the command to send.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpControlChannel.RefreshResponse">
            <summary>
            Refresh response from control channel.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpControlChannel.LastResponse">
            <summary>
            Last response from control channel.
            </summary>
        </member>
        <member name="T:TVA.Interop.NamespaceDoc">
            <summary>
            Contains classes used to handle interoperability with older legacy applications.
            </summary>
        </member>
        <member name="T:TVA.Data.DataExtensions">
            <summary>
            Defines extension functions related to database and SQL interaction.
            </summary>
        </member>
        <member name="F:TVA.Data.DataExtensions.DefaultTimeoutDuration">
            <summary>
            The default timeout duration used for executing SQL statements when timeout duration is not specified.
            </summary>
        </member>
        <member name="M:TVA.Data.DataExtensions.SqlEncode(System.String)">
            <summary>
            Performs SQL encoding on given T-SQL string.
            </summary>
            <param name="sql">The string on which SQL encoding is to be performed.</param>
            <returns>The SQL encoded string.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteNonQuery``1(``0,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the number of rows affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <returns>The number of rows affected.</returns>
            <typeparam name="TConnection">Type of <see cref="T:System.Data.IDbConnection"/> to use.</typeparam>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteNonQuery``1(``0,System.String,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the number of rows affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>The number of rows affected.</returns>
            <typeparam name="TConnection">Type of <see cref="T:System.Data.IDbConnection"/> to use.</typeparam>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the number of rows affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.String,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the number of rows affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteNonQuery(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the number of rows affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteNonQuery(System.Data.Odbc.OdbcConnection,System.String,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the number of rows affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the number of rows affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the number of rows affected.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteReader``1(``0,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and builds a <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> object.</returns>
            <typeparam name="TConnection">Type of <see cref="T:System.Data.IDbConnection"/> to use.</typeparam>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteReader``1(``0,System.String,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and builds a <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> object.</returns>
            <typeparam name="TConnection">Type of <see cref="T:System.Data.IDbConnection"/> to use.</typeparam>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteReader``1(``0,System.String,System.Data.CommandBehavior,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and builds a <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"/> values.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> object.</returns>
            <typeparam name="TConnection">Type of <see cref="T:System.Data.IDbConnection"/> to use.</typeparam>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteReader(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and builds a <see cref="T:System.Data.OleDb.OleDbDataReader"/>.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.OleDb.OleDbDataReader"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteReader(System.Data.OleDb.OleDbConnection,System.String,System.Data.CommandBehavior,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and builds a <see cref="T:System.Data.OleDb.OleDbDataReader"/>.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"/> values.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.OleDb.OleDbDataReader"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteReader(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and builds a <see cref="T:System.Data.Odbc.OdbcDataReader"/>.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.Odbc.OdbcDataReader"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteReader(System.Data.Odbc.OdbcConnection,System.String,System.Data.CommandBehavior,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and builds a <see cref="T:System.Data.Odbc.OdbcDataReader"/>.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"/> values.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.Odbc.OdbcDataReader"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and builds a <see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlDataReader"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandBehavior,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and builds a <see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"/> values.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlDataReader"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteScalar``1(``0,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the value in the first column 
            of the first row in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <returns>Value in the first column of the first row in the resultset.</returns>
            <typeparam name="TConnection">Type of <see cref="T:System.Data.IDbConnection"/> to use.</typeparam>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteScalar``1(``0,System.String,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the value in the first column 
            of the first row in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>Value in the first column of the first row in the resultset.</returns>
            <typeparam name="TConnection">Type of <see cref="T:System.Data.IDbConnection"/> to use.</typeparam>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the value in the first column 
            of the first row in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>Value in the first column of the first row in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.String,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the value in the first column 
            of the first row in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>Value in the first column of the first row in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteScalar(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the value in the first column 
            of the first row in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>Value in the first column of the first row in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteScalar(System.Data.Odbc.OdbcConnection,System.String,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the value in the first column 
            of the first row in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>Value in the first column of the first row in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the value in the first column 
            of the first row in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>Value in the first column of the first row in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the value in the first column 
            of the first row in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>Value in the first column of the first row in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.OleDb.OleDbConnection,System.String,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.OleDb.OleDbConnection,System.String,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.Odbc.OdbcConnection,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.Odbc.OdbcConnection,System.String,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.Odbc.OdbcConnection,System.String,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.IDbConnection,System.Type,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="dataAdapterType">The <see cref="T:System.Type"/> of data adapter to use to retreieve data.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveRow(System.Data.IDbConnection,System.Type,System.String,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the first <see cref="T:System.Data.DataRow"/> in the resultset.
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="dataAdapterType">The <see cref="T:System.Type"/> of data adapter to use to retreieve data.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>The first <see cref="T:System.Data.DataRow"/> in the resultset.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.OleDb.OleDbConnection,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.OleDb.OleDbConnection,System.String,System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.Odbc.OdbcConnection,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.Odbc.OdbcConnection,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.Odbc.OdbcConnection,System.String,System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.IDbConnection,System.Type,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="dataAdapterType">The <see cref="T:System.Type"/> of data adapter to use to retreieve data.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveData(System.Data.IDbConnection,System.Type,System.String,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the first <see cref="T:System.Data.DataTable"/> 
            of resultset, if the resultset contains multiple tables.
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="dataAdapterType">The <see cref="T:System.Type"/> of data adapter to use to retreieve data.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.OleDb.OleDbConnection,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.OleDb.OleDbConnection,System.String,System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.Odbc.OdbcConnection,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.Odbc.OdbcConnection,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.Odbc.OdbcConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.Odbc.OdbcConnection,System.String,System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple table depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Int32,System.Int32,System.Object[])">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for executing the SQL statement.</param>
            <param name="startRow">The zero-based record number to start with.</param>
            <param name="maxRows">The maximum number of records to retrieve.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <param name="parameters">The parameters to be passed to the SQL stored procedure being executed.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.IDbConnection,System.Type,System.String)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="dataAdapterType">The <see cref="T:System.Type"/> of data adapter to use to retreieve data.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.RetrieveDataSet(System.Data.IDbConnection,System.Type,System.String,System.Int32)">
            <summary>
            Executes the SQL statement using <see cref="T:System.Data.IDbConnection"/>, and returns the <see cref="T:System.Data.DataSet"/> that 
            may contain multiple tables, depending on the SQL statement.
            </summary>
            <param name="connection">The <see cref="T:System.Data.IDbConnection"/> to use for executing the SQL statement.</param>
            <param name="dataAdapterType">The <see cref="T:System.Type"/> of data adapter to use to retreieve data.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <param name="timeout">The time in seconds to wait for the SQL statement to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.UpdateData(System.Data.OleDb.OleDbConnection,System.Data.DataTable,System.String)">
            <summary>
            Updates the underlying data of the <see cref="T:System.Data.DataTable"/> using <see cref="T:System.Data.OleDb.OleDbConnection"/>, and
            returns the number of rows successfully updated.
            </summary>
            <param name="sourceData">The <see cref="T:System.Data.DataTable"/> used to update the underlying data source.</param>
            <param name="sourceSql">The SQL statement used initially to populate the <see cref="T:System.Data.DataTable"/>.</param>
            <param name="connection">The <see cref="T:System.Data.OleDb.OleDbConnection"/> to use for updating the underlying data source.</param>
            <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.UpdateData(System.Data.Odbc.OdbcConnection,System.Data.DataTable,System.String)">
            <summary>
            Updates the underlying data of the <see cref="T:System.Data.DataTable"/> using <see cref="T:System.Data.Odbc.OdbcConnection"/>, and
            returns the number of rows successfully updated.
            </summary>
            <param name="sourceData">The <see cref="T:System.Data.DataTable"/> used to update the underlying data source.</param>
            <param name="sourceSql">The SQL statement used initially to populate the <see cref="T:System.Data.DataTable"/>.</param>
            <param name="connection">The <see cref="T:System.Data.Odbc.OdbcConnection"/> to use for updating the underlying data source.</param>
            <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.UpdateData(System.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String)">
            <summary>
            Updates the underlying data of the <see cref="T:System.Data.DataTable"/> using <see cref="T:System.Data.SqlClient.SqlConnection"/>, and
            returns the number of rows successfully updated.
            </summary>
            <param name="sourceData">The <see cref="T:System.Data.DataTable"/> used to update the underlying data source.</param>
            <param name="sourceSql">The SQL statement used initially to populate the <see cref="T:System.Data.DataTable"/>.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use for updating the underlying data source.</param>
            <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.PopulateParameters(System.Data.OleDb.OleDbCommand,System.Object[])">
            <summary>
            Takes the <see cref="T:System.Data.OleDb.OleDbCommand"/> object and populates it with the given parameters.
            </summary>
            <param name="command">The <see cref="T:System.Data.OleDb.OleDbCommand"/> whose parameters are to be populated.</param>
            <param name="parameters">The parameters to populate the <see cref="T:System.Data.OleDb.OleDbCommand"/> parameters with.</param>
        </member>
        <member name="M:TVA.Data.DataExtensions.PopulateParameters(System.Data.Odbc.OdbcCommand,System.Object[])">
            <summary>
            Takes the <see cref="T:System.Data.Odbc.OdbcCommand"/> object and populates it with the given parameters.
            </summary>
            <param name="command">The <see cref="T:System.Data.Odbc.OdbcCommand"/> whose parameters are to be populated.</param>
            <param name="parameters">The parameters to populate the <see cref="T:System.Data.Odbc.OdbcCommand"/> parameters with.</param>
        </member>
        <member name="M:TVA.Data.DataExtensions.PopulateParameters(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
             Takes the <see cref="T:System.Data.SqlClient.SqlCommand"/> object and populates it with the given parameters.
            </summary>
            <param name="command">The <see cref="T:System.Data.SqlClient.SqlCommand"/> whose parameters are to be populated.</param>
            <param name="parameters">The parameters to populate the <see cref="T:System.Data.SqlClient.SqlCommand"/> parameters with.</param>
        </member>
        <member name="M:TVA.Data.DataExtensions.PopulateParameters``1(``0,System.Action{``0},System.Object[])">
            <summary>
            Takes the <see cref="T:System.Data.IDbCommand"/> object and populates it with the given parameters.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> whose parameters are to be populated.</param>
            <param name="deriveParameters">The DeriveParameters implementation of the <paramref name="command"/> to use to populate parameters.</param>
            <param name="parameters">The parameters to populate the <see cref="T:System.Data.IDbCommand"/> parameters with.</param>
            <typeparam name="TDbCommand">Then <see cref="T:System.Data.IDbCommand"/> type to be used.</typeparam>
        </member>
        <member name="M:TVA.Data.DataExtensions.CreateParameterizedCommand(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Creates and returns a parameterized <see cref="T:System.Data.IDbCommand"/>. Parameter names are embedded in the SQL statement
            passed as a parameter to this method.
            </summary>
            <param name="connection">The database connection.</param>
            <param name="sql">The SQL statement.</param>
            <param name="args">The parameters for the command in the order that they appear in the SQL statement.</param>
            <remarks>
            This method does very rudimentary parsing of the SQL statement so parameter names should start with the '@'
            character and should be surrounded by either spaces, parentheses, or commas.
            </remarks>
            <returns>The parameterized command.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ToDataTable(System.String,System.String,System.Boolean)">
            <summary>
            Converts a delimited string into a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="delimitedData">The delimited text to be converted to <see cref="T:System.Data.DataTable"/>.</param>
            <param name="delimiter">The character(s) used for delimiting the text.</param>
            <param name="header">true, if the delimited text contains header information; otherwise, false.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:TVA.Data.DataExtensions.ToDelimitedString(System.Data.DataTable,System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Data.DataTable"/> to a multi-line delimited string (e.g., CSV export).
            </summary>
            <param name="table">The <see cref="T:System.Data.DataTable"/> whose data is to be converted to delimited text.</param>
            <param name="delimiter">The character(s) to be used for delimiting the text.</param>
            <param name="quoted">true, if text is to be surrounded by quotes; otherwise, false.</param>
            <param name="header">true, if the delimited text should have header information.</param>
            <returns>A string of delimited text.</returns>
        </member>
        <member name="T:TVA.BinaryCodedDecimal">
            <summary>
            Defines functions related to binary-coded decimals.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/Binary-coded_decimal">Binary-coded decimal</a> for details.
            </remarks>
        </member>
        <member name="M:TVA.BinaryCodedDecimal.Decode(System.Byte)">
            <summary>
            Gets binary value from binary-coded decimal.
            </summary>
            <param name="bcd">Binary-coded decimal value.</param>
            <returns>Standard binary representation of binary-coded decimal value.</returns>
        </member>
        <member name="M:TVA.BinaryCodedDecimal.Decode(System.UInt16)">
            <summary>
            Gets binary value from two-byte binary-coded decimal.
            </summary>
            <param name="bcd">Two-byte binary-coded decimal value.</param>
            <returns>Standard binary representation of binary-coded decimal value.</returns>
        </member>
        <member name="M:TVA.BinaryCodedDecimal.Decode(System.UInt32)">
            <summary>
            Gets binary value from four-byte binary-coded decimal.
            </summary>
            <param name="bcd">Four-byte binary-coded decimal value.</param>
            <returns>Standard binary representation of binary-coded decimal value.</returns>
        </member>
        <member name="M:TVA.BinaryCodedDecimal.Decode(System.UInt64)">
            <summary>
            Gets binary value from eight-byte binary-coded decimal.
            </summary>
            <param name="bcd">Eight-byte binary-coded decimal value.</param>
            <returns>Standard binary representation of binary-coded decimal value.</returns>
        </member>
        <member name="M:TVA.BinaryCodedDecimal.Encode(System.Byte)">
            <summary>
            Gets binary-coded decimal from binary value.
            </summary>
            <param name="value">Binary value.</param>
            <returns>Binary-coded decimal representation of standard binary value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">A binary-coded decimal has a maximum value of 99 for a single byte.</exception>
        </member>
        <member name="M:TVA.BinaryCodedDecimal.Encode(System.UInt16)">
            <summary>
            Gets binary-coded decimal from binary value.
            </summary>
            <param name="value">Binary value.</param>
            <returns>Binary-coded decimal representation of standard binary value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">A binary-coded decimal has a maximum value of 9,999 for two bytes.</exception>
        </member>
        <member name="M:TVA.BinaryCodedDecimal.Encode(System.UInt32)">
            <summary>
            Gets binary-coded decimal from binary value.
            </summary>
            <param name="value">Binary value.</param>
            <returns>Binary-coded decimal representation of standard binary value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">A binary-coded decimal has a maximum value of 99,999,999 for four bytes.</exception>
        </member>
        <member name="M:TVA.BinaryCodedDecimal.Encode(System.UInt64)">
            <summary>
            Gets binary-coded decimal from binary value.
            </summary>
            <param name="value">Binary value.</param>
            <returns>Binary-coded decimal representation of standard binary value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">A binary-coded decimal has a maximum value of 9,999,999,999,999,999 for eight bytes.</exception>
        </member>
        <member name="T:TVA.Validation.NonNullStringValidator">
            <summary>
            Represents a validator that can be used to check for <see cref="T:System.String"/>s that are null, empty, or consists only of whitespaces.
            </summary>
        </member>
        <member name="M:TVA.Validation.NonNullStringValidator.Validate(System.Object,System.String@)">
            <summary>
            Determines whether or not the specified <paramref name="value"/> is a valid string that is not null, empty or consists only of whitespaces.
            </summary>
            <param name="value">The value to be validated.</param>
            <param name="validationError">Error message returned if the <paramref name="value"/> is invalid.</param>
            <returns><strong>true</strong> if the <paramref name="value"/> is valid; otherwise <strong>false</strong>.</returns>
        </member>
        <member name="T:TVA.BaselineTimeInterval">
            <summary>
            Time intervals enumeration used by <see cref="M:TVA.Ticks.BaselinedTimestamp(TVA.BaselineTimeInterval)"/> method.
            </summary>
        </member>
        <member name="F:TVA.BaselineTimeInterval.Second">
            <summary>Baseline timestamp to the second (i.e., starting at zero milliseconds).</summary>
        </member>
        <member name="F:TVA.BaselineTimeInterval.Minute">
            <summary>Baseline timestamp to the minute (i.e., starting at zero seconds and milliseconds).</summary>
        </member>
        <member name="F:TVA.BaselineTimeInterval.Hour">
            <summary>Baseline timestamp to the hour (i.e., starting at zero minutes, seconds and milliseconds).</summary>
        </member>
        <member name="F:TVA.BaselineTimeInterval.Day">
            <summary>Baseline timestamp to the day (i.e., starting at zero hours, minutes, seconds and milliseconds).</summary>
        </member>
        <member name="F:TVA.BaselineTimeInterval.Month">
            <summary>Baseline timestamp to the month (i.e., starting at day one, zero hours, minutes, seconds and milliseconds).</summary>
        </member>
        <member name="F:TVA.BaselineTimeInterval.Year">
            <summary>Baseline timestamp to the year (i.e., starting at month one, day one, zero hours, minutes, seconds and milliseconds).</summary>
        </member>
        <member name="T:TVA.Ticks">
            <summary>
            Represents an instant in time, or time period, as a 64-bit signed integer with a value that is expressed as the number
            of 100-nanosecond intervals that have elapsed since 12:00:00 midnight, January 1, 0001.
            </summary>
            <remarks>
            <para>
            <see cref="T:TVA.Ticks"/> can represent an "instant in time" and therefore can be used exactly like a <see cref="T:System.DateTime"/>.
            The difference between <see cref="T:TVA.Ticks"/> and <see cref="T:System.DateTime"/> is that <see cref="T:TVA.Ticks"/> is essentially a long
            integer (i.e., an <see cref="T:System.Int64"/>) which represents the number of ticks that have elapsed since 12:00:00 midnight,
            January 1, 0001 with each tick having a resolution of 100-nanoseconds. You would use <see cref="T:TVA.Ticks"/> in places where
            you needed to directly represent time in high-resolution, i.e., time with subsecond accuracy, using an object that will
            act like a long integer but handle time conversions. <see cref="T:TVA.Ticks"/> can also represent a "time period" (e.g., the
            number of ticks elapsed since a process started) and thus can also be used like a <see cref="T:System.TimeSpan"/>; when used in
            this manner the <see cref="M:TVA.Ticks.ToElapsedTimeString"/> method can be used to convert the <see cref="T:TVA.Ticks"/> value
            into a handy textual representation of elapsed years, days, hours, minutes and seconds.
            </para>
            <para>
            This class behaves just like an <see cref="T:System.Int64"/> representing a time in ticks; it is implictly castable to and from
            an <see cref="T:System.Int64"/> and therefore can be generally used "as" an Int64 directly. It is also implicitly castable to and
            from a <see cref="T:System.DateTime"/>, a <see cref="T:System.TimeSpan"/>, an <see cref="T:TVA.NtpTimeTag"/> and a <see cref="T:TVA.UnixTimeTag"/>.
            </para>
            </remarks>
        </member>
        <member name="F:TVA.Ticks.PerSecond">
            <summary>Number of 100-nanosecond ticks in one second.</summary>
        </member>
        <member name="F:TVA.Ticks.PerMillisecond">
            <summary>Number of 100-nanosecond ticks in one millisecond.</summary>
        </member>
        <member name="F:TVA.Ticks.PerMicrosecond">
            <summary>Number of 100-nanosecond ticks in one microsecond.</summary>
        </member>
        <member name="F:TVA.Ticks.PerMinute">
            <summary>Number of 100-nanosecond ticks in one minute.</summary>
        </member>
        <member name="F:TVA.Ticks.PerHour">
            <summary>Number of 100-nanosecond ticks in one hour.</summary>
        </member>
        <member name="F:TVA.Ticks.PerDay">
            <summary>Number of 100-nanosecond ticks in one day.</summary>
        </member>
        <member name="M:TVA.Ticks.#ctor(System.Int64)">
            <summary>
            Creates a new <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="value">New time value in ticks.</param>
        </member>
        <member name="M:TVA.Ticks.#ctor(System.DateTime)">
            <summary>
            Creates a new <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="value">New time value as a <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:TVA.Ticks.#ctor(System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="value">New time value as a <see cref="T:System.TimeSpan"/>.</param>
        </member>
        <member name="M:TVA.Ticks.ToSeconds">
            <summary>
            Gets the <see cref="T:TVA.Ticks"/> value in equivalent number of seconds.
            </summary>
            <returns>Value of <see cref="T:TVA.Ticks"/> in seconds.</returns>
            <remarks>
            If <see cref="T:TVA.Ticks"/> value represents an instant in time, returned value will represent the number of seconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
        </member>
        <member name="M:TVA.Ticks.ToMilliseconds">
            <summary>
            Gets the <see cref="T:TVA.Ticks"/> value in equivalent number of milliseconds.
            </summary>
            <returns>Value of <see cref="T:TVA.Ticks"/> in milliseconds.</returns>
            <remarks>
            If <see cref="T:TVA.Ticks"/> value represents an instant in time, returned value will represent the number of milliseconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
        </member>
        <member name="M:TVA.Ticks.ToMicroseconds">
            <summary>
            Gets the <see cref="T:TVA.Ticks"/> value in equivalent number of microseconds.
            </summary>
            <returns>Value of <see cref="T:TVA.Ticks"/> in microseconds.</returns>
            <remarks>
            If <see cref="T:TVA.Ticks"/> value represents an instant in time, returned value will represent the number of microseconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
        </member>
        <member name="M:TVA.Ticks.UtcTimeIsValid(System.Double,System.Double)">
            <summary>
            Determines if time, represented by <see cref="T:TVA.Ticks"/> value in UTC time, is valid by comparing it to
            the system clock.
            </summary>
            <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
            <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be valid.</param>
            <returns>True, if UTC time represented by <see cref="T:TVA.Ticks"/> value, is within the specified range.</returns>
            <remarks>
            Time, represented by <see cref="T:TVA.Ticks"/> value, is considered valid if it exists within the specified
            <paramref name="lagTime"/> and <paramref name="leadTime"/> range of system clock time in UTC. Note
            that <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero, but can be set
            to sub-second intervals.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero, but can be less than one.
            </exception>
        </member>
        <member name="M:TVA.Ticks.UtcTimeIsValid(TVA.Ticks,TVA.Ticks)">
            <summary>
            Determines if time, represented by <see cref="T:TVA.Ticks"/> value in UTC time, is valid by comparing it to
            the system clock.
            </summary>
            <param name="lagTime">The allowed lag time, in ticks, before assuming time is too old to be valid.</param>
            <param name="leadTime">The allowed lead time, in ticks, before assuming time is too advanced to be valid.</param>
            <returns>True, if UTC time represented by <see cref="T:TVA.Ticks"/> value, is within the specified range.</returns>
            <remarks>
            Time, represented by <see cref="T:TVA.Ticks"/> value, is considered valid if it exists within the specified
            <paramref name="lagTime"/> and <paramref name="leadTime"/> range of system clock time in UTC. Note
            that <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero.
            </exception>
        </member>
        <member name="M:TVA.Ticks.LocalTimeIsValid(System.Double,System.Double)">
            <summary>
            Determines if time, represented by <see cref="T:TVA.Ticks"/> value in local time, is valid by comparing it to
            the system clock.
            </summary>
            <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
            <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be valid.</param>
            <returns>True, if local time represented by <see cref="T:TVA.Ticks"/> value, is within the specified range.</returns>
            <remarks>
            Time, represented by <see cref="T:TVA.Ticks"/> value, is considered valid if it exists within the specified
            <paramref name="lagTime"/> and <paramref name="leadTime"/> range of local system clock time. Note
            that <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero, but can be set
            to sub-second intervals.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero, but can be less than one.
            </exception>
        </member>
        <member name="M:TVA.Ticks.LocalTimeIsValid(TVA.Ticks,TVA.Ticks)">
            <summary>
            Determines if time, represented by <see cref="T:TVA.Ticks"/> value in local time, is valid by comparing it to
            the system clock.
            </summary>
            <param name="lagTime">The allowed lag time, in ticks, before assuming time is too old to be valid.</param>
            <param name="leadTime">The allowed lead time, in ticks, before assuming time is too advanced to be valid.</param>
            <returns>True, if local time represented by <see cref="T:TVA.Ticks"/> value, is within the specified range.</returns>
            <remarks>
            Time, represented by <see cref="T:TVA.Ticks"/> value, is considered valid if it exists within the specified
            <paramref name="lagTime"/> and <paramref name="leadTime"/> range of local system clock time. Note
            that <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero.
            </exception>
        </member>
        <member name="M:TVA.Ticks.TimeIsValid(TVA.Ticks,System.Double,System.Double)">
            <summary>
            Determines if time, represented by <see cref="T:TVA.Ticks"/> value, is valid by comparing it to the specified
            current time.
            </summary>
            <param name="currentTime">Specified current time (e.g., could be DateTime.Now.Ticks).</param>
            <param name="lagTime">The allowed lag time, in seconds, before assuming time is too old to be valid.</param>
            <param name="leadTime">The allowed lead time, in seconds, before assuming time is too advanced to be valid.</param>
            <returns>True, if time represented by <see cref="T:TVA.Ticks"/> value, is within the specified range.</returns>
            <remarks>
            Time, represented by <see cref="T:TVA.Ticks"/> value, is considered valid if it exists within the specified
            <paramref name="lagTime"/> and <paramref name="leadTime"/> range of <paramref name="currentTime"/>. Note
            that <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero, but can be set
            to sub-second intervals.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero, but can be less than one.
            </exception>
        </member>
        <member name="M:TVA.Ticks.TimeIsValid(TVA.Ticks,TVA.Ticks,TVA.Ticks)">
            <summary>
            Determines if time, represented by <see cref="T:TVA.Ticks"/> value, is valid by comparing it to the specified
            current time.
            </summary>
            <param name="currentTime">Specified current time (e.g., could be DateTime.Now.Ticks).</param>
            <param name="lagTime">The allowed lag time, in ticks, before assuming time is too old to be valid.</param>
            <param name="leadTime">The allowed lead time, in ticks, before assuming time is too advanced to be valid.</param>
            <returns>True, if time represented by <see cref="T:TVA.Ticks"/> value, is within the specified range.</returns>
            <remarks>
            Time, represented by <see cref="T:TVA.Ticks"/> value, is considered valid if it exists within the specified
            <paramref name="lagTime"/> and <paramref name="leadTime"/> range of <paramref name="currentTime"/>. Note
            that <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lagTime"/> and <paramref name="leadTime"/> must be greater than zero.
            </exception>
        </member>
        <member name="M:TVA.Ticks.DistanceBeyondSecond">
            <summary>
            Gets the distance, in 100-nanoseconds intervals, beyond the top of the second in the timestamp
            represented by the <see cref="T:TVA.Ticks"/>.
            </summary>
            <returns>
            Number of 100-nanoseconds intervals <see cref="T:TVA.Ticks"/> value is from the top of the second.
            </returns>
        </member>
        <member name="M:TVA.Ticks.BaselinedTimestamp(TVA.BaselineTimeInterval)">
            <summary>
            Creates a new <see cref="T:TVA.Ticks"/> value that represents a baselined timestamp, in 100-nanoseconds
            intervals, that begins at the beginning of the specified time interval.
            </summary>
            <param name="interval">
            <see cref="T:TVA.BaselineTimeInterval"/> to which <see cref="T:TVA.Ticks"/> timestamp should be baselined.
            </param>
            <returns>
            A new <see cref="T:TVA.Ticks"/> value that represents a baselined timestamp, in 100-nanoseconds intervals,
            that begins at the specified <see cref="T:TVA.BaselineTimeInterval"/>.
            </returns>
            <remarks>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Second"/> would return the <see cref="T:TVA.Ticks"/>
            value starting at zero milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Minute"/> would return the <see cref="T:TVA.Ticks"/>
            value starting at zero seconds and milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Hour"/> would return the <see cref="T:TVA.Ticks"/>
            value starting at zero minutes, seconds and milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Day"/> would return the <see cref="T:TVA.Ticks"/>
            value starting at zero hours, minutes, seconds and milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Month"/> would return the <see cref="T:TVA.Ticks"/>
            value starting at day one, zero hours, minutes, seconds and milliseconds.<br/>
            Baselining to the <see cref="F:TVA.BaselineTimeInterval.Year"/> would return the <see cref="T:TVA.Ticks"/>
            value starting at month one, day one, zero hours, minutes, seconds and milliseconds.
            </remarks>
        </member>
        <member name="M:TVA.Ticks.ToString">
            <summary>
            Converts the value of the <see cref="T:TVA.Ticks"/> value to its equivalent <see cref="T:System.DateTime"/> string representation.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> string representation of the <see cref="T:TVA.Ticks"/> value.</returns>
        </member>
        <member name="M:TVA.Ticks.ToString(System.String)">
            <summary>
            Converts the <see cref="T:TVA.Ticks"/> value to its equivalent string representation, using
            the specified <see cref="T:System.DateTime"/> format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Ticks.ToString(System.IFormatProvider)">
            <summary>
            Converts the <see cref="T:TVA.Ticks"/> value to its equivalent string representation, using
            the specified culture-specific <see cref="T:System.DateTime"/> format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Ticks.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the <see cref="T:TVA.Ticks"/> value to its equivalent string representation, using
            specified format and culture-specific <see cref="T:System.DateTime"/> format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Ticks.ToElapsedTimeString">
            <summary>
            Converts the <see cref="T:TVA.Ticks"/> value into a textual representation of years, days, hours,
            minutes and seconds.
            </summary>
            <remarks>
            Note that this ToString overload will not display fractional seconds. To allow display of
            fractional seconds, or completely remove second resolution from the textual representation,
            use the <see cref="M:TVA.Ticks.ToElapsedTimeString(System.Int32)"/> overload instead.
            </remarks>
            <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
        </member>
        <member name="M:TVA.Ticks.ToElapsedTimeString(System.Int32)">
            <summary>
            Converts the <see cref="T:TVA.Ticks"/> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits.
            </summary>
            <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
            <remarks>Set <paramref name="secondPrecision"/> to -1 to suppress seconds display.</remarks>
            <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
        </member>
        <member name="M:TVA.Ticks.ToElapsedTimeString(System.Int32,System.String[])">
            <summary>
            Converts the <see cref="T:TVA.Ticks"/> value into a textual representation of years, days, hours,
            minutes and seconds with the specified number of fractional digits given string array of
            time names.
            </summary>
            <param name="secondPrecision">Number of fractional digits to display for seconds.</param>
            <param name="timeNames">Time names array to use during textual conversion.</param>
            <remarks>
            <para>Set <paramref name="secondPrecision"/> to -1 to suppress seconds display.</para>
            <para>
            <paramref name="timeNames"/> array needs one string entry for each of the following names:<br/>
            "Year", "Years", "Day", "Days", "Hour", "Hours", "Minute", "Minutes", "Second", "Seconds",
            "Less Than 60 Seconds", "0 Seconds".
            </para>
            </remarks>
            <returns>
            The string representation of the value of this instance, consisting of the number of
            years, days, hours, minutes and seconds represented by this value.
            </returns>
        </member>
        <member name="M:TVA.Ticks.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not an <see cref="T:System.Int64"/> or <see cref="T:TVA.Ticks"/>.</exception>
        </member>
        <member name="M:TVA.Ticks.CompareTo(TVA.Ticks)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Ticks"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Ticks"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Ticks.CompareTo(System.DateTime)">
            <summary>
            Compares this instance to a specified <see cref="T:System.DateTime"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.DateTime"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Ticks.CompareTo(System.TimeSpan)">
            <summary>
            Compares this instance to a specified <see cref="T:System.TimeSpan"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.TimeSpan"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Ticks.CompareTo(System.Int64)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Int64"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">An <see cref="T:System.Int64"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Ticks.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Int64"/> or <see cref="T:TVA.Ticks"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Ticks.Equals(TVA.Ticks)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Ticks"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Ticks"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Ticks.Equals(System.DateTime)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.DateTime"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Ticks.Equals(System.TimeSpan)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.TimeSpan"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Ticks.Equals(System.Int64)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int64"/> value.
            </summary>
            <param name="obj">An <see cref="T:System.Int64"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Ticks.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Ticks.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Int64"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Int64"/>.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Equality(TVA.Ticks,TVA.Ticks)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1"><see cref="T:TVA.Ticks"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Ticks"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Inequality(TVA.Ticks,TVA.Ticks)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1"><see cref="T:TVA.Ticks"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Ticks"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_LessThan(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1"><see cref="T:TVA.Ticks"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Ticks"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_LessThanOrEqual(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1"><see cref="T:TVA.Ticks"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Ticks"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_GreaterThan(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1"><see cref="T:TVA.Ticks"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Ticks"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_GreaterThanOrEqual(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1"><see cref="T:TVA.Ticks"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Ticks"/> right hand operand.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Implicit(System.Int64)~TVA.Ticks">
            <summary>
            Implicitly converts value, represented in ticks, to a <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="value"><see cref="T:System.Int64"/> value to convert.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Implicit(System.DateTime)~TVA.Ticks">
            <summary>
            Implicitly converts value, represented as a <see cref="T:System.DateTime"/>, to a <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="value"><see cref="T:System.DateTime"/> value to convert.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Implicit(System.TimeSpan)~TVA.Ticks">
            <summary>
            Implicitly converts value, represented as a <see cref="T:System.TimeSpan"/>, to a <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="value"><see cref="T:System.TimeSpan"/> value to convert.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Implicit(TVA.TimeTagBase)~TVA.Ticks">
            <summary>
            Implicitly converts value, represented as a <see cref="T:TVA.TimeTagBase"/>, to a <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="value"><see cref="T:TVA.TimeTagBase"/> value to convert.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Implicit(TVA.Ticks)~System.Int64">
            <summary>
            Implicitly converts <see cref="T:TVA.Ticks"/>, represented in ticks, to an <see cref="T:System.Int64"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to convert.</param>
            <returns><see cref="T:System.Int64"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Implicit(TVA.Ticks)~System.DateTime">
            <summary>
            Implicitly converts <see cref="T:TVA.Ticks"/>, represented in ticks, to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to convert.</param>
            <returns><see cref="T:System.DateTime"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Implicit(TVA.Ticks)~System.TimeSpan">
            <summary>
            Implicitly converts <see cref="T:TVA.Ticks"/>, represented in ticks, to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to convert.</param>
            <returns><see cref="T:System.TimeSpan"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Implicit(TVA.Ticks)~TVA.NtpTimeTag">
            <summary>
            Implicitly converts <see cref="T:TVA.Ticks"/>, represented in ticks, to an <see cref="T:TVA.NtpTimeTag"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to convert.</param>
            <returns><see cref="T:TVA.NtpTimeTag"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Implicit(TVA.Ticks)~TVA.UnixTimeTag">
            <summary>
            Implicitly converts <see cref="T:TVA.Ticks"/>, represented in ticks, to a <see cref="T:TVA.UnixTimeTag"/>.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to convert.</param>
            <returns><see cref="T:TVA.UnixTimeTag"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_True(TVA.Ticks)">
            <summary>
            Returns true if value is not zero.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to evaluate.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_False(TVA.Ticks)">
            <summary>
            Returns true if value is equal to zero.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to evaluate.</param>
            <returns><see cref="T:System.Boolean"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_OnesComplement(TVA.Ticks)">
            <summary>
            Returns bitwise complement of value.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to evaluate.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_BitwiseAnd(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns logical bitwise AND of values.
            </summary>
            <param name="value1"><see cref="T:TVA.Ticks"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Ticks"/> right hand operand.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_BitwiseOr(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns logical bitwise OR of values.
            </summary>
            <param name="value1"><see cref="T:TVA.Ticks"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Ticks"/> right hand operand.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_ExclusiveOr(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns logical bitwise exclusive-OR of values.
            </summary>
            <param name="value1"><see cref="T:TVA.Ticks"/> left hand operand.</param>
            <param name="value2"><see cref="T:TVA.Ticks"/> right hand operand.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_RightShift(TVA.Ticks,System.Int32)">
            <summary>
            Returns value after right shifts of first value by the number of bits specified by second value.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to shift.</param>
            <param name="shifts"><see cref="T:System.Int32"/> number of bits to shift.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_LeftShift(TVA.Ticks,System.Int32)">
            <summary>
            Returns value after left shifts of first value by the number of bits specified by second value.
            </summary>
            <param name="value"><see cref="T:TVA.Ticks"/> value to shift.</param>
            <param name="shifts"><see cref="T:System.Int32"/> number of bits to shift.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Modulus(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">Left hand <see cref="T:TVA.Ticks"/> operand.</param>
            <param name="value2">Right hand <see cref="T:TVA.Ticks"/> operand.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Addition(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">Left hand <see cref="T:TVA.Ticks"/> operand.</param>
            <param name="value2">Right hand <see cref="T:TVA.Ticks"/> operand.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Subtraction(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">Left hand <see cref="T:TVA.Ticks"/> operand.</param>
            <param name="value2">Right hand <see cref="T:TVA.Ticks"/> operand.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Multiply(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">Left hand <see cref="T:TVA.Ticks"/> operand.</param>
            <param name="value2">Right hand <see cref="T:TVA.Ticks"/> operand.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Division(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">Left hand <see cref="T:TVA.Ticks"/> operand.</param>
            <param name="value2">Right hand <see cref="T:TVA.Ticks"/> operand.</param>
            <returns><see cref="T:TVA.Ticks"/> value representing the result.</returns>
        </member>
        <member name="M:TVA.Ticks.op_Exponent(TVA.Ticks,TVA.Ticks)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">Left hand <see cref="T:TVA.Ticks"/> operand.</param>
            <param name="value2">Right hand <see cref="T:TVA.Ticks"/> operand.</param>
            <returns><see cref="T:System.Double"/> value representing the result.</returns>
        </member>
        <member name="F:TVA.Ticks.MaxValue">
            <summary>Represents the largest possible value of a <see cref="T:TVA.Ticks"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Ticks.MinValue">
            <summary>Represents the smallest possible value of a <see cref="T:TVA.Ticks"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Ticks.ToSeconds(TVA.Ticks)">
            <summary>
            Converts <paramref name="value"/>, in 100-nanosecond tick intervals, to seconds.
            </summary>
            <param name="value">Number of ticks to convert to seconds.</param>
            <returns>Number seconds represented by specified <paramref name="value"/> in ticks.</returns>
            <remarks>
            If <paramref name="value"/> represents an instant in time, returned value will represent the number of seconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
        </member>
        <member name="M:TVA.Ticks.ToMilliseconds(TVA.Ticks)">
            <summary>
            Converts <paramref name="value"/>, in 100-nanosecond tick intervals, to milliseconds.
            </summary>
            <param name="value">Number of ticks to convert to milliseconds.</param>
            <returns>Number milliseconds represented by specified <paramref name="value"/> in ticks.</returns>
            <remarks>
            If <paramref name="value"/> represents an instant in time, returned value will represent the number of milliseconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
        </member>
        <member name="M:TVA.Ticks.ToMicroseconds(TVA.Ticks)">
            <summary>
            Converts <paramref name="value"/>, in 100-nanosecond tick intervals, to microseconds.
            </summary>
            <param name="value">Number of ticks to convert to microseconds.</param>
            <returns>Number microseconds represented by specified <paramref name="value"/> in ticks.</returns>
            <remarks>
            If <paramref name="value"/> represents an instant in time, returned value will represent the number of microseconds
            that have elapsed since 12:00:00 midnight, January 1, 0001.
            </remarks>
        </member>
        <member name="M:TVA.Ticks.FromSeconds(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Ticks"/> from the specified <paramref name="value"/> in seconds.
            </summary>
            <param name="value">New <see cref="T:TVA.Ticks"/> value in seconds.</param>
            <returns>New <see cref="T:TVA.Ticks"/> object from the specified <paramref name="value"/> in seconds.</returns>
        </member>
        <member name="M:TVA.Ticks.FromMilliseconds(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Ticks"/> from the specified <paramref name="value"/> in milliseconds.
            </summary>
            <param name="value">New <see cref="T:TVA.Ticks"/> value in milliseconds.</param>
            <returns>New <see cref="T:TVA.Ticks"/> object from the specified <paramref name="value"/> in milliseconds.</returns>
        </member>
        <member name="M:TVA.Ticks.FromMicroseconds(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Ticks"/> from the specified <paramref name="value"/> in microseconds.
            </summary>
            <param name="value">New <see cref="T:TVA.Ticks"/> value in microseconds.</param>
            <returns>New <see cref="T:TVA.Ticks"/> object from the specified <paramref name="value"/> in microseconds.</returns>
        </member>
        <member name="M:TVA.Ticks.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Ticks"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Ticks"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Ticks.MinValue"/> or greater than <see cref="F:TVA.Ticks.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Ticks.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Ticks"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Ticks"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Ticks.MinValue"/> or greater than <see cref="F:TVA.Ticks.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Ticks.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Ticks"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Ticks"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Ticks.MinValue"/> or greater than <see cref="F:TVA.Ticks.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Ticks.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Ticks"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Ticks"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Ticks.MinValue"/> or greater than <see cref="F:TVA.Ticks.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Ticks.TryParse(System.String,TVA.Ticks@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Ticks"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Ticks"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Ticks.MinValue"/> or greater than <see cref="F:TVA.Ticks.MaxValue"/>.
            This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Ticks.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Ticks@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Ticks"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Ticks"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Ticks.MinValue"/> or
            greater than <see cref="F:TVA.Ticks.MaxValue"/>. This parameter is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="T:TVA.Threading.ManagedThreadPool">
            <summary>
            Defines a managed thread pool
            </summary>
            <remarks>
            This class works like the normal thread pool but provides the benefit of automatic tracking
            of queued threads through the ManagedThreads collection, returns a reference to the
            queued thread with the ability to dequeue and/or abort, total thread runtime and the
            ability to run the queued thread in an alternate execution context
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThreadPool.QueueUserWorkItem(System.Threading.ThreadStart)">
            <summary>
            Queues a work item for processing on the managed thread pool
            </summary>
            <param name="callback">A WaitCallback representing the method to execute.</param>
            <returns>Reference to queued thread</returns>
            <remarks>
            This differs from the normal thread pool QueueUserWorkItem function in that it does
            not return a success value determing if item was queued, but rather a reference to
            to the managed thread that was actually placed on the queue.
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThreadPool.QueueUserWorkItem(System.Threading.ParameterizedThreadStart)">
            <summary>
            Queues a work item for processing on the managed thread pool
            </summary>
            <param name="callback">A WaitCallback representing the method to execute.</param>
            <returns>Reference to queued thread</returns>
            <remarks>
            This differs from the normal thread pool QueueUserWorkItem function in that it does
            not return a success value determing if item was queued, but rather a reference to
            to the managed thread that was actually placed on the queue.
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThreadPool.QueueUserWorkItem(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a work item for processing on the managed thread pool
            </summary>
            <param name="callback">A WaitCallback representing the method to execute.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Reference to queued thread</returns>
            <remarks>
            This differs from the normal thread pool QueueUserWorkItem function in that it does
            not return a success value determing if item was queued, but rather a reference to
            to the managed thread that was actually placed on the queue.
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThreadPool.QueueUserWorkItem(System.Threading.ContextCallback,System.Threading.ExecutionContext)">
            <summary>
            Queues a work item for processing on the managed thread pool
            </summary>
            <param name="callback">A WaitCallback representing the method to execute.</param>
            <param name="ctx">Alternate execution context in which to run the thread.</param>
            <returns>Reference to queued thread</returns>
            <remarks>
            This differs from the normal thread pool QueueUserWorkItem function in that it does
            not return a success value determing if item was queued, but rather a reference to
            to the managed thread that was actually placed on the queue.
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThreadPool.QueueUserWorkItem(System.Threading.ContextCallback,System.Object,System.Threading.ExecutionContext)">
            <summary>
            Queues a work item for processing on the managed thread pool
            </summary>
            <param name="callback">A WaitCallback representing the method to execute.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <param name="ctx">Alternate execution context in which to run the thread.</param>
            <returns>Reference to queued thread</returns>
            <remarks>
            This differs from the normal thread pool QueueUserWorkItem function in that it does
            not return a success value determing if item was queued, but rather a reference to
            to the managed thread that was actually placed on the queue.
            </remarks>
        </member>
        <member name="T:TVA.Reflection.AssemblyExtensions">
            <summary>Defines extension functions related to Assemblies.</summary>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.ShortName(System.Reflection.Assembly)">
            <summary>Returns only assembly name and version from full assembly name.</summary>
            <param name="assemblyInstance">An <see cref="T:System.Reflection.Assembly"/> to get the short name of.</param>
            <returns>The assembly name and version from the full assembly name.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.GetEmbeddedResource(System.Reflection.Assembly,System.String)">
            <summary>Gets the specified embedded resource from the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <param name="resourceName">The full name (including the namespace) of the embedded resource to get.</param>
            <returns>The embedded resource.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.Title(System.Reflection.Assembly)">
            <summary>Gets the title information of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The title information of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.Description(System.Reflection.Assembly)">
            <summary>Gets the description information of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The description information of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.Company(System.Reflection.Assembly)">
            <summary>Gets the company name information of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The company name information of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.Product(System.Reflection.Assembly)">
            <summary>Gets the product name information of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The product name information of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.Copyright(System.Reflection.Assembly)">
            <summary>Gets the copyright information of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The copyright information of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.Trademark(System.Reflection.Assembly)">
            <summary>Gets the trademark information of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The trademark information of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.Configuration(System.Reflection.Assembly)">
            <summary>Gets the configuration information of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The configuration information of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.DelaySign(System.Reflection.Assembly)">
            <summary>Gets a boolean value indicating if the assembly has been built as delay-signed.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>True, if the assembly has been built as delay-signed; otherwise, False.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.InformationalVersion(System.Reflection.Assembly)">
            <summary>Gets the version information of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The version information of the assembly</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.KeyFile(System.Reflection.Assembly)">
            <summary>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>A string containing the name of the file that contains the key pair.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.CultureName(System.Reflection.Assembly)">
            <summary>Gets the culture name of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The culture name of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.SatelliteContractVersion(System.Reflection.Assembly)">
            <summary>Gets the assembly version used to instruct the System.Resources.ResourceManager to ask for a particular
            version of a satellite assembly to simplify updates of the main assembly of an application.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The satellite contract version of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.ComCompatibleVersion(System.Reflection.Assembly)">
            <summary>Gets the string representing the assembly version used to indicate to a COM client that all classes
            in the current version of the assembly are compatible with classes in an earlier version of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The string representing the assembly version in MajorVersion.MinorVersion.RevisionNumber.BuildNumber
            format.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.ComVisible(System.Reflection.Assembly)">
            <summary>Gets a boolean value indicating if the assembly is exposed to COM.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>True, if the assembly is exposed to COM; otherwise, False.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.Guid(System.Reflection.Assembly)">
            <summary>Gets the assembly GUID that is used as an ID if the assembly is exposed to COM.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The assembly GUID that is used as an ID if the assembly is exposed to COM.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.TypeLibVersion(System.Reflection.Assembly)">
            <summary>Gets the string representing the assembly version number in MajorVersion.MinorVersion format.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The string representing the assembly version number in MajorVersion.MinorVersion format.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.CLSCompliant(System.Reflection.Assembly)">
            <summary>Gets a boolean value indicating whether the indicated program element is CLS-compliant.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>True, if the program element is CLS-compliant; otherwise, False.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.BuildDate(System.Reflection.Assembly)">
            <summary>Gets the date and time when the assembly was last built.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The date and time when the assembly was last built.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.RootNamespace(System.Reflection.Assembly)">
            <summary>Gets the root namespace of the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>The root namespace of the assembly.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyExtensions.GetAttributes(System.Reflection.Assembly)">
            <summary>Gets a name/value collection of assembly attributes exposed by the assembly.</summary>
            <param name="assemblyInstance">Source assembly.</param>
            <returns>A NameValueCollection of assembly attributes.</returns>
        </member>
        <member name="T:TVA.Security.Cryptography.NamespaceDoc">
            <summary>
            Contains classes and extension functions used to simplify and standardize usage of basic cryptography using a combination 
            of standard and proprietary encryption algorithms to produce decent obfuscations of strings, buffers and streams of data.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.MeasureSize">
            <summary>
            Defines the size of a musical measure as the number of beats per note value.
            </summary>
        </member>
        <member name="M:TVA.Media.Music.MeasureSize.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new musical measure defined as the number of beats per note value.
            </summary>
            <param name="beats">A <see cref="T:System.Int32"/> representing the beats.</param>
            <param name="noteValue">A <see cref="T:System.Double"/> representing the note value.</param>
        </member>
        <member name="M:TVA.Media.Music.MeasureSize.#ctor(System.Int32,TVA.Media.Music.NoteValue)">
            <summary>
            Creates a new musical measure defined as the number of beats per note value.
            </summary>
            <param name="beats">A <see cref="T:System.Int32"/> representing the beats.</param>
            <param name="noteValue">A <see cref="P:TVA.Media.Music.MeasureSize.NoteValue"/> representing the note value.</param>
        </member>
        <member name="M:TVA.Media.Music.MeasureSize.#ctor(System.Int32,TVA.Media.Music.NoteValueBritish)">
            <summary>
            Creates a new musical measure defined as the number of beats per note value.
            </summary>
            <param name="beats">A <see cref="T:System.Int32"/> representing the beats.</param>
            <param name="noteValue">A <see cref="T:TVA.Media.Music.NoteValueBritish"/> representing the note value.</param>
        </member>
        <member name="M:TVA.Media.Music.MeasureSize.ValidateNoteValueAtBeat(System.Double,System.Int32)">
            <summary>
            Validates that given note value will fit within this <see cref="T:TVA.Media.Music.MeasureSize"/> for specified beat.
            </summary>
            <param name="noteValue">Note value (i.e., length) to validate.</param>
            <param name="beat">Beat within in measure where note value is trying to fit.</param>
        </member>
        <member name="M:TVA.Media.Music.MeasureSize.ValidateNoteValueAtBeat(TVA.Media.Music.NoteValue,System.Int32,System.Int32)">
            <summary>
            Validates that given note value will fit within this <see cref="T:TVA.Media.Music.MeasureSize"/> for specified beat.
            </summary>
            <param name="noteValue">Named note value to validate.</param>
            <param name="beat">Beat within in measure where note value is trying to fit.</param>
            <param name="dots">Dot length extensions to apply to named note value.</param>
        </member>
        <member name="M:TVA.Media.Music.MeasureSize.ValidateNoteValueAtBeat(TVA.Media.Music.NoteValueBritish,System.Int32,System.Int32)">
            <summary>
            Validates that given note value will fit within this <see cref="T:TVA.Media.Music.MeasureSize"/> for specified beat.
            </summary>
            <param name="noteValue">Named note value to validate.</param>
            <param name="beat">Beat within in measure where note value is trying to fit.</param>
            <param name="dots">Dot length extensions to apply to named note value.</param>
        </member>
        <member name="P:TVA.Media.Music.MeasureSize.Beats">
            <summary>
            Gets or sets the number of beats per measure.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.MeasureSize.NoteValue">
            <summary>
            Get or sets the relative note value representing the basic pulse of the music.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.MeasureSize.NamedNoteValue">
            <summary>
            Get or sets the note value, expressed in American form, representing the basic pulse of the music.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.MeasureSize.NamedNoteValueBritish">
            <summary>
            Get or sets the note value, expressed in British form, representing the basic pulse of the music.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.DampingFunction">
            <summary>
            Provides a function signature for methods that damp an amplitude representing a
            lowering of the acoustic pressure over time.
            </summary>
            <param name="sampleIndex">Sample index (0 to <paramref name="samplePeriod"/> - 1).</param>
            <param name="samplePeriod">Total period, in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>), over which to perform damping.</param>
            <param name="sampleRate">Number of samples per second, if useful for calculation.</param>
            <returns>Scaling factor in the range of zero to one used to damp an amplitude at the given sample index.</returns>
        </member>
        <member name="T:TVA.Media.Music.Damping">
            <summary>
            Defines a few damping functions.
            </summary>
        </member>
        <member name="M:TVA.Media.Music.Damping.Natural(System.Int64,System.Int64,System.Int32)">
            <summary>
            Produces a natural damping curve very similar to that of a string based instrument - strong at
            first and damping quickly over time from 1 to 0 over the <paramref name="samplePeriod"/>.
            </summary>
            <param name="sampleIndex">Sample index (0 to <paramref name="samplePeriod"/> - 1).</param>
            <param name="samplePeriod">Total period, in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>), over which to perform damping.</param>
            <param name="sampleRate">Number of samples per second, if useful for calculation.</param>
            <returns>Scaling factor used to damp an amplitude at the given time.</returns>
            <remarks>
            This damping algorithm combines both the logarithmic and linear damping algoriths to
            produce a very natural damping curve.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Damping.Logarithmic(System.Int64,System.Int64,System.Int32)">
            <summary>
            Produces a logarithmic damping curve - strong at first and damping quickly over time from 1 to 0 over the <paramref name="samplePeriod"/>.
            </summary>
            <param name="sampleIndex">Sample index (0 to <paramref name="samplePeriod"/> - 1).</param>
            <param name="samplePeriod">Total period, in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>), over which to perform damping.</param>
            <param name="sampleRate">Number of samples per second, if useful for calculation.</param>
            <returns>Scaling factor used to damp an amplitude at the given time.</returns>
            <remarks>
            This damping would be similar to that of a note produced by a string based instrument.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Damping.InverseLogarithmic(System.Int64,System.Int64,System.Int32)">
            <summary>
            Produces an inverse logarithmic damping curve - slowly damping with a sharp end from 1 to 0 over the <paramref name="samplePeriod"/>.
            </summary>
            <param name="sampleIndex">Sample index (0 to <paramref name="samplePeriod"/> - 1).</param>
            <param name="samplePeriod">Total period, in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>), over which to perform damping.</param>
            <param name="sampleRate">Number of samples per second, if useful for calculation.</param>
            <returns>Scaling factor used to damp an amplitude at the given time.</returns>
            <remarks>
            This damping would be similar to that of a note produced on an electronic keyboard or a breath based instrument.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Damping.Linear(System.Int64,System.Int64,System.Int32)">
            <summary>
            Produces a linear damping curve - damping with a perfect slope from 1 to 0 over the <paramref name="samplePeriod"/>.
            </summary>
            <param name="sampleIndex">Sample index (0 to <paramref name="samplePeriod"/> - 1).</param>
            <param name="samplePeriod">Total period, in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>), over which to perform damping.</param>
            <param name="sampleRate">Number of samples per second, if useful for calculation.</param>
            <returns>Scaling factor used to damp an amplitude at the given time.</returns>
        </member>
        <member name="M:TVA.Media.Music.Damping.ReverseLinear(System.Int64,System.Int64,System.Int32)">
            <summary>
            Produces a reverse linear damping curve - damping with a perfect slope from 0 to 1 over the <paramref name="samplePeriod"/>.
            </summary>
            <param name="sampleIndex">Sample index (0 to <paramref name="samplePeriod"/> - 1).</param>
            <param name="samplePeriod">Total period, in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>), over which to perform damping.</param>
            <param name="sampleRate">Number of samples per second, if useful for calculation.</param>
            <returns>Scaling factor used to damp an amplitude at the given time.</returns>
            <remarks>This is just used for an interesting note effect.</remarks>
        </member>
        <member name="M:TVA.Media.Music.Damping.Sinusoidal(System.Int64,System.Int64,System.Int32)">
            <summary>
            Produces a sinusoidal damping curve oscillating from 1 to 0 to 1 over the <paramref name="samplePeriod"/>.
            </summary>
            <param name="sampleIndex">Sample index (0 to <paramref name="samplePeriod"/> - 1).</param>
            <param name="samplePeriod">Total period, in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>), over which to perform damping.</param>
            <param name="sampleRate">Number of samples per second, if useful for calculation.</param>
            <returns>Scaling factor used to damp an amplitude at the given time.</returns>
            <remarks>This is just used for an interesting note effect.</remarks>
        </member>
        <member name="M:TVA.Media.Music.Damping.Zero(System.Int64,System.Int64,System.Int32)">
            <summary>
            Produces a damping signature that represents no damping over time.
            </summary>
            <param name="sampleIndex">Sample index (0 to <paramref name="samplePeriod"/> - 1).</param>
            <param name="samplePeriod">Total period, in whole samples per second (i.e., seconds of time * <paramref name="sampleRate"/>), over which to perform damping.</param>
            <param name="sampleRate">Number of samples per second, if useful for calculation.</param>
            <returns>Returns a scalar of 1.0 regardless to time.</returns>
            <remarks>
            Zero damped sounds would be produced by synthetic sources such as an electronic keyboard.
            </remarks>
        </member>
        <member name="T:TVA.ErrorManagement.ErrorModule">
            <summary>
            Represents an HTTP module that can be used to handle exceptions globally in Web Sites and Web Services.
            </summary>
            <example>
            Below is the config file entry required for enabling error handling using <see cref="T:TVA.ErrorManagement.ErrorModule"/>:
            <code>
            <![CDATA[
            <configuration>
              <system.web>
                <httpModules>
                  <add name="ErrorModule" type="TVA.ErrorManagement.ErrorModule, TVA.Core" />
                </httpModules>
              </system.web>
            </configuration>
            ]]>
            </code>
            Below is the config file entry required for changing the settings of <see cref="P:TVA.ErrorManagement.ErrorModule.Logger"/>:
            <code>
            <![CDATA[
            <configuration>
              <configSections>
                <section name="categorizedSettings" type="TVA.Configuration.CategorizedSettingsSection, TVA.Core" />
              </configSections>
              <categorizedSettings>
                <errorLogger>
                  <add name="LogToUI" value="False" description="True if an encountered exception is to be logged to the User Interface; otherwise False."
                    encrypted="false" />
                  <add name="LogToFile" value="True" description="True if an encountered exception is to be logged to a file; otherwise False."
                    encrypted="false" />
                  <add name="LogToEmail" value="False" description="True if an email is to be sent to ContactEmail with the details of an encountered exception; otherwise False."
                    encrypted="false" />
                  <add name="LogToEventLog" value="True" description="True if an encountered exception is to be logged to the Event Log; otherwise False."
                    encrypted="false" />
                  <add name="LogToScreenshot" value="False" description="True if a screenshot is to be taken when an exception is encountered; otherwise False."
                    encrypted="false" />
                  <add name="SmtpServer" value="smtp.email.com" description="Name of the SMTP server to be used for sending the email messages."
                    encrypted="false" />
                  <add name="ContactEmail" value="" description="Comma-seperated list of recipient email addresses for the email message."
                    encrypted="false" />
                  <add name="ContactName" value="" description="Name of the person that the end-user can contact when an exception is encountered."
                    encrypted="false" />
                  <add name="ContactPhone" value="" description="Phone number of the person that the end-user can contact when an exception is encountered."
                    encrypted="false" />
                  <add name="HandleUnhandledException" value="True" description="True if unhandled exceptions are to be handled automatically; otherwise False."
                    encrypted="false" />
                  <add name="ExitOnUnhandledException" value="False" description="True if the application must exit when an unhandled exception is encountered; otherwise False."
                    encrypted="false" />
                </errorLogger>
              </categorizedSettings>
            </configuration>
            ]]>
            </code>
            </example>
            <seealso cref="T:TVA.ErrorManagement.ErrorLogger"/>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the <see cref="T:TVA.ErrorManagement.ErrorModule"/> and prepares it to handle requests.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpApplication"/> to use for initialization.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorModule.Dispose">
            <summary>
            Disposes the resources (other than memory) used by the <see cref="T:TVA.ErrorManagement.ErrorModule"/>.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorModule.Logger">
             <summary>
             Gets the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object used by the <see cref="T:TVA.ErrorManagement.ErrorModule"/> object for logging exceptions.
             </summary>
             <remarks>
             <see cref="P:TVA.ErrorManagement.ErrorModule.Logger"/> property can be used for logging handled exception throughout the web application.
             </remarks>
             <example>
             This example shows the use of <see cref="P:TVA.ErrorManagement.ErrorModule.Logger"/> for logging handled exception:
             <code>
             using System;
             using TVA.ErrorManagement;
            
             namespace WebApp
             {
                 public partial class _Default : System.Web.UI.Page
                 {
                     protected void Page_Load(object sender, EventArgs e)
                     {
                         try
                         {
                             string s = null;
                             s.ToCharArray();            // This will result in NullReferenceException.
                         }
                         catch (Exception ex)
                         {
                             ErrorModule.Logger.Log(ex); // Log the encountered exception.
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:TVA.ErrorManagement.ErrorLogger">
             <summary>
             Represents a logger that can be used for logging handled as well as unhandled exceptions across multiple 
             application types (Windows Application, Console Application, Windows Service, Web Application, Web Service).
             </summary>
             <remarks>
             Adapted from exception handling code by Jeff Atwood of CodingHorror.com. Demo projects for handling unhandled
             exception in both windows and web environment by Jeff Atwood are available at The Code Project web site.
             See: http://www.codeproject.com/script/articles/list_articles.asp?userid=450027
             </remarks>
             <example>
             This example shows how to use the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> component to log handled and unhandled exceptions:
             <code>
             using System;
             using System.IO;
             using TVA.ErrorManagement;
            
             class Program
             {
                 static ErrorLogger s_logger;
            
                 static Program()
                 {
                     s_logger = new ErrorLogger();
                     s_logger.LogToUI = true;                    // Show exception info on the UI.
                     s_logger.LogToFile = true;                  // Log exception info to a file.
                     s_logger.LogToEmail = true;                 // Send exception info in an e-mail.
                     s_logger.LogToEventLog = true;              // Log exception info to the event log.
                     s_logger.LogToScreenshot = true;            // Take a screenshot of desktop on exception.
                     s_logger.ContactEmail = "dev@email.com";    // Provide an e-mail address.
                     s_logger.HandleUnhandledException = true;   // Configure to handle unhandled exceptions.
                     s_logger.PersistSettings = true;            // Save settings to the config file.
                     s_logger.Initialize();                      // Initialize ErrorLogger component for use.
                 }
            
                 static void Main(string[] args)
                 {
                     try
                     {
                         // This may cause a handled FileNotFoundException if the file doesn't exist.
                         string data = File.ReadAllText(@"c:\NonExistentFile.txt");
                     }
                     catch (Exception ex)
                     {
                         // When logging handled exceptions we want to disable loggers (UI logger and E-mail logger) that
                         // may require interaction either directly or indirectly as it can be annoying. All the loggers
                         // are enabled automatically after the handled exception has been logged.
                         s_logger.SuppressInteractiveLogging();
                         s_logger.Log(ex);
                     }
            
                     int numerator = 1;
                     int denominator = 0;
                     int result = numerator / denominator;   // This will cause an unhandled DivideByZeroException.
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
             <seealso cref="T:TVA.ErrorManagement.ErrorModule"/>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultLogToUI">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.LogToUI"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultLogToFile">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.LogToFile"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultLogToEmail">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.LogToEmail"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultLogToEventLog">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.LogToEventLog"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultLogToScreenshot">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.LogToScreenshot"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultLogUserInfo">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.LogUserInfo"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultSmtpServer">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.SmtpServer"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultContactName">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.ContactName"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultContactEmail">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.ContactEmail"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultContactPhone">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.ContactPhone"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultPersistSettings">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.PersistSettings"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultSettingsCategory">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.SettingsCategory"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultHandleUnhandledException">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.HandleUnhandledException"/> property.
            </summary>
        </member>
        <member name="F:TVA.ErrorManagement.ErrorLogger.DefaultExitOnUnhandledException">
            <summary>
            Specifies the default value for the <see cref="P:TVA.ErrorManagement.ErrorLogger.ExitOnUnhandledException"/> property.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> class.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> class.
            </summary>
            <param name="container"><see cref="T:System.ComponentModel.IContainer"/> object that contains the <see cref="T:TVA.ErrorManagement.ErrorLogger"/>.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.Initialize">
            <summary>
            Initializes the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object.
            </summary>
            <remarks>
            <see cref="M:TVA.ErrorManagement.ErrorLogger.Initialize"/> is to be called by user-code directly only if the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> 
            object is not consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.BeginInit">
            <summary>
            Performs necessary operations before the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.ErrorManagement.ErrorLogger.BeginInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.EndInit">
            <summary>
            Performs necessary operations after the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object properties are initialized.
            </summary>
            <remarks>
            <see cref="M:TVA.ErrorManagement.ErrorLogger.EndInit"/> should never be called by user-code directly. This method exists solely for use 
            by the designer if the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object is consumed through the designer surface of the IDE.
            </remarks>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.SaveSettings">
            <summary>
            Saves settings for the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object to the config file if the <see cref="P:TVA.ErrorManagement.ErrorLogger.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.ErrorManagement.ErrorLogger.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.LoadSettings">
            <summary>
            Loads saved settings for the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object from the config file if the <see cref="P:TVA.ErrorManagement.ErrorLogger.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:TVA.ErrorManagement.ErrorLogger.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.Log(System.Exception)">
            <summary>
            Logs information about the encountered <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">Encountered <see cref="T:System.Exception"/> whose information is to be logged.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.Log(System.Exception,System.Boolean)">
            <summary>
            Logs information about the encountered <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">Encountered <see cref="T:System.Exception"/> whose information is to be logged.</param>
            <param name="exitApplication">true to exit the application; otherwise false.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.SuppressInteractiveLogging">
            <summary>
            Disables <see cref="P:TVA.ErrorManagement.ErrorLogger.Loggers"/> that require interaction either directly or indirectly when logging 
            handled <see cref="T:System.Exception"/> using the <see cref="M:TVA.ErrorManagement.ErrorLogger.Log(System.Exception)"/> method. All loggers are enabled
            automatically after a handled <see cref="T:System.Exception"/> has been logged.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.Register">
            <summary>
            Registers the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object to handle unhandled <see cref="T:System.Exception"/> if the 
            <see cref="P:TVA.ErrorManagement.ErrorLogger.HandleUnhandledException"/> property is set to true.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.Unregister">
            <summary>
            Unregister the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object from handling unhandled <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.ExceptionToUI(System.Exception)">
            <summary>
            Logs encountered <see cref="T:System.Exception"/> to the application UI.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> that was encountered.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.ExceptionToWindowsGui">
            <summary>
            Shows <see cref="T:System.Exception"/> information in a Windows Application.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.ExceptionToWindowsCui">
            <summary>
            Shows <see cref="T:System.Exception"/> information in a Console Application.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.ExceptionToWebPage">
            <summary>
            Shows <see cref="T:System.Exception"/> information in a Web Site.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.ExceptionToFile(System.Exception)">
            <summary>
            Logs encountered <see cref="T:System.Exception"/> to the <see cref="P:TVA.ErrorManagement.ErrorLogger.ErrorLog"/>.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> that was encountered.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.ExceptionToEmail(System.Exception)">
            <summary>
            Logs encountered <see cref="T:System.Exception"/> to an e-mail message.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> that was encountered.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.ExceptionToEventLog(System.Exception)">
            <summary>
            Logs encountered <see cref="T:System.Exception"/> to the <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> that was encountered.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.ExceptionToScreenshot(System.Exception)">
            <summary>
            Takes a screenshot of the user's desktop when the <see cref="T:System.Exception"/> is encountered.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> that was encountered.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.OnLoggingException(System.Exception)">
            <summary>
            Raises the <see cref="E:TVA.ErrorManagement.ErrorLogger.LoggingException"/> event.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> to send to <see cref="E:TVA.ErrorManagement.ErrorLogger.LoggingException"/> event.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object and optionally releases the 
            managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.GetErrorText">
            <summary>
            Default <see cref="T:System.Delegate"/> for <see cref="P:TVA.ErrorManagement.ErrorLogger.ErrorTextMethod"/>.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.GetScopeText">
            <summary>
            Default <see cref="T:System.Delegate"/> for <see cref="P:TVA.ErrorManagement.ErrorLogger.ScopeTextMethod"/>.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.GetActionText">
            <summary>
            Default <see cref="T:System.Delegate"/> for <see cref="P:TVA.ErrorManagement.ErrorLogger.ActionTextMethod"/>.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.GetMoreInfoText">
            <summary>
            Default <see cref="T:System.Delegate"/> for <see cref="P:TVA.ErrorManagement.ErrorLogger.MoreInfoTextMethod"/>.
            </summary>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.GetExceptionInfo(System.Exception,System.Boolean)">
            <summary>
            Gets information about an <see cref="T:System.Exception"/> complete with system and application information.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> whose information is to be retrieved.</param>
            <param name="includeUserInfo">true if user information is to be include; otherwise false.</param>
            <returns><see cref="T:System.Exception"/> information in text.</returns>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.GetSystemInfo(System.Boolean)">
            <summary>
            Gets information about the system where current application is executing.
            </summary>
            <param name="includeUserInfo">true if user information is to be include; otherwise false.</param>
            <returns>System information in text.</returns>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.GetApplicationInfo">
            <summary>
            Gets information about the current application.
            </summary>
            <returns>Application information in text.</returns>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.GetExceptionGeneralInfo(System.Exception)">
            <summary>
            Gets common information about an <see cref="T:System.Exception"/>.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> whose common information is to be retrieved.</param>
            <returns>Common <see cref="T:System.Exception"/> information in text.</returns>
        </member>
        <member name="M:TVA.ErrorManagement.ErrorLogger.GetExceptionStackTrace(System.Exception)">
            <summary>
            Gets stack trace information about an <see cref="T:System.Exception"/>.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> whose stack trace information is to be retrieved.</param>
            <returns><see cref="T:System.Exception"/> stack trace in text.</returns>
        </member>
        <member name="E:TVA.ErrorManagement.ErrorLogger.LoggingException">
            <summary>
            Occurs when an <see cref="T:System.Exception"/> is encountered while logging an <see cref="T:System.Exception"/>.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is the <see cref="T:System.Exception"/> that was encountered while logging an <see cref="T:System.Exception"/>.
            </remarks>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.LogToUI">
            <summary>
            Gets or sets a boolean value that indicates whether <see cref="T:System.Exception"/> information is to be 
            displayed on the application UI.
            </summary>
            <remarks>
            This setting is ignored in Windows Service and Web Service application types.
            </remarks>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.LogToFile">
            <summary>
            Gets or sets a boolean value that indicates whether <see cref="T:System.Exception"/> information is to be 
            written to the <see cref="P:TVA.ErrorManagement.ErrorLogger.ErrorLog"/>.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.LogToEmail">
            <summary>
            Gets or sets a boolean value that indicates whether <see cref="T:System.Exception"/> information is to be sent 
            in an e-mail to the <see cref="P:TVA.ErrorManagement.ErrorLogger.ContactEmail"/> address.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.LogToEventLog">
            <summary>
            Gets or sets a boolean value that indicates whether <see cref="T:System.Exception"/> information is to be 
            written to the <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.LogToScreenshot">
            <summary>
            Gets or sets a boolean value that indicates whether a screenshot of the user's desktop is to be taken
            when an <see cref="T:System.Exception"/> is logged.
            </summary>
            <remarks>
            This setting is ignored in Web Application and Web Service application types.
            </remarks>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.LogUserInfo">
            <summary>
            Gets or sets a boolean value that indicates whether information about local user (for windows applications) 
            or remote user (for web applications) is to be logged when logging an <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.SmtpServer">
            <summary>
            Gets or sets the SMTP server to be used for sending e-mail messages containing <see cref="T:System.Exception"/> 
            information to the <see cref="P:TVA.ErrorManagement.ErrorLogger.ContactEmail"/> address.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ContactName">
            <summary>
            Gets or sets the name of the person who can be contacted by the end-user in case of an <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ContactEmail">
            <summary>
            Gets or sets the e-mail address where e-mail messages contaning <see cref="T:System.Exception"/> information are 
            to be sent when the <see cref="P:TVA.ErrorManagement.ErrorLogger.LogToEmail"/> property is set to true.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ContactPhone">
            <summary>
            Gets or sets the phone number that can be used by the end-user to communicate about an encountered <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.PersistSettings">
            <summary>
            Gets or sets a boolean value that indicates whether the settings of <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object are 
            to be saved to the config file.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.SettingsCategory">
            <summary>
            Gets or sets the category under which the settings of <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object are to be saved
            to the config file if the <see cref="P:TVA.ErrorManagement.ErrorLogger.PersistSettings"/> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.HandleUnhandledException">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object must register 
            itself to handle <see cref="T:System.Exception"/> that are not trapped inside of a try-catch block.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ExitOnUnhandledException">
            <summary>
            Gets or sets a boolean value that indicates whether the application will terminate after logging an 
            unhandled <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ErrorLog">
            <summary>
            Get the <see cref="T:TVA.IO.LogFile"/> object used for logging <see cref="T:System.Exception"/> information to a file.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.Enabled">
            <summary>
            Gets or sets a boolean value that indicates whether the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object is currently enabled.
            </summary>
            <remarks>
            <see cref="P:TVA.ErrorManagement.ErrorLogger.Enabled"/> property is not be set by user-code directly.
            </remarks>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ErrorTextMethod">
            <summary>
            Gets or sets the <see cref="T:System.Delegate"/> that provides common text stating what could have possibly 
            caused the <see cref="T:System.Exception"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null.</exception>
            <example>
            Sample text:
            <para>
            An unexpected exception has occurred in RogueApplication. This may be due to an inconsistent system 
            state or a programming error.
            </para>
            </example>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ScopeTextMethod">
            <summary>
            Gets or sets the <see cref="T:System.Delegate"/> that provides text stating what is going to happen as a result 
            of the <see cref="T:System.Exception"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null.</exception>
            <example>
            Sample text:
            <para>The action you requested was not performed.</para>
            </example>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ActionTextMethod">
            <summary>
            Gets or sets the <see cref="T:System.Delegate"/> that provides text stating the action(s) that can be taken by 
            the end-user after an <see cref="T:System.Exception"/> is encountered.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null.</exception>
            <example>
            Sample text:
            <para>Close your browser, navigate back to the website, and try repeating you last action.</para>
            </example>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.MoreInfoTextMethod">
            <summary>
            Gets or sets the <see cref="T:System.Delegate"/> that provides text contaning detailed information about the 
            encountered <see cref="T:System.Exception"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null.</exception>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ApplicationName">
            <summary>
            Gets the name of the currently executing application.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.ApplicationType">
            <summary>
            Gets the type of the currently executing application.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.LastException">
            <summary>
            Get the last encountered <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.Loggers">
            <summary>
            Gets a list of methods registered for logging information about an encountered <see cref="T:System.Exception"/>.
            </summary>
            <remarks>
            This property can be used to register additional methods for logging information about an encountered
            <see cref="T:System.Exception"/>. When an <see cref="T:System.Exception"/> is logged, all registered methods that take 
            <see cref="T:System.Exception"/> as a parameter are invoked.
            </remarks>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.Name">
            <summary>
            Gets the unique identifier of the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object.
            </summary>
        </member>
        <member name="P:TVA.ErrorManagement.ErrorLogger.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:TVA.ErrorManagement.ErrorLogger"/> object.
            </summary>
        </member>
        <member name="T:TVA.EnumExtensions">
            <summary>
            Defines extension methods related to enumerations.
            </summary>
        </member>
        <member name="M:TVA.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Retrieves the description of the value that this <see cref="T:System.Enum"/> represents extracted from the <see cref="T:System.ComponentModel.DescriptionAttribute"/>, or the enumeration name
            if no description is available.
            </summary>
            <param name="enumeration"><see cref="T:System.Enum"/> to operate on.</param>
            <returns>Description of the <see cref="T:System.Enum"/> if specified, otherwise the <see cref="T:System.String"/> representation of this <paramref name="enumeration"/>.</returns>
        </member>
        <member name="M:TVA.EnumExtensions.GetEnumValueByDescription(System.String,System.Type,System.Boolean)">
            <summary>
            Gets the enumeration of the specified <paramref name="type"/> whose description matches this <paramref name="description"/>.
            </summary>
            <param name="description">Description to be used for lookup of the enumeration.</param>
            <param name="type"><see cref="T:System.Type"/> of the enumeration.</param>
            <param name="ignoreCase"><c>true</c> to ignore case during the comparison; otherwise, <c>false</c>.</param>
            <returns>An enumeration of the specified <paramref name="type"/> if a match is found, otherwise null.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="type"/> is not an enumeration.</exception>
        </member>
        <member name="M:TVA.EnumExtensions.GetEnumValueByName(System.String,System.Type,System.Boolean)">
            <summary>
            Gets the enumeration value with the specified name.
            </summary>
            <param name="name">Name to search for.</param>
            <param name="type"><see cref="T:System.Type"/> of the enumeration.</param>
            <param name="ignoreCase"><c>true</c> to ignore case during the comparison; otherwise, <c>false</c>.</param>
            <returns>Specific value of the enumerated constant in terms of its underlying type associated with the specified <paramref name="name"/>, or <c>null</c>
            if no macthing enumerated value was found.</returns>
        </member>
        <member name="M:TVA.EnumExtensions.GetFormattedName(System.Enum)">
            <summary>
            Retrieves a formatted name of the value that this <see cref="T:System.Enum"/> represents for visual display.
            </summary>
            <param name="enumeration"><see cref="T:System.Enum"/> to operate on.</param>
            <returns>Formatted enumeration name of the specified value for visual display.</returns>
        </member>
        <member name="T:TVA.Diagnostics.PerformanceMonitor">
             <summary>
             Represents a process performance monitor that operates similar to the Windows Performance Monitor utility
             that can be used to monitor system performance.
             </summary>
             <example>
             This example shows how to use <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> for monitoring application performance:
             <code>
             using System;
             using System.Threading;
             using TVA.Diagnostics;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     PerformanceMonitor perfMon = new PerformanceMonitor();
                     while (true)
                     {
                         // Display process performance.
                         Thread.Sleep(5000);
                         Console.WriteLine("");
                         Console.Write(perfMon.Status);
                     }
                 }
             }
             </code>
             </example>
             <seealso cref="T:TVA.Diagnostics.PerformanceCounter"/>
        </member>
        <member name="F:TVA.Diagnostics.PerformanceMonitor.DefaultSamplingInterval">
            <summary>
            Default interval for sampling the <see cref="P:TVA.Diagnostics.PerformanceMonitor.Counters"/>.
            </summary>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> class.
            </summary>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> class.
            </summary>
            <param name="samplingInterval">Interval, in milliseconds, at which the <see cref="P:TVA.Diagnostics.PerformanceMonitor.Counters"/> are to be sampled.</param>
            <param name="addDefaultCounters">Set to <c>true</c> to add default counters; otherwise <c>false</c>.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> class.
            </summary>
            <param name="processName">Name of the <see cref="T:System.Diagnostics.Process"/> whose performance is to be monitored.</param>
            <param name="addDefaultCounters">Set to <c>true</c> to add default counters; otherwise <c>false</c>.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.#ctor(System.String,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> class.
            </summary>
            <param name="processName">Name of the <see cref="T:System.Diagnostics.Process"/> whose performance is to be monitored.</param>
            <param name="samplingInterval">Interval, in milliseconds, at which the <see cref="P:TVA.Diagnostics.PerformanceMonitor.Counters"/> are to be sampled.</param>
            <param name="addDefaultCounters">Set to <c>true</c> to add default counters; otherwise <c>false</c>.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> object.
            </summary>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.AddCounter(System.String,System.String,System.String)">
            <summary>
            Adds a <see cref="T:TVA.Diagnostics.PerformanceCounter"/> to be monitored.
            </summary>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.AddCounter(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a <see cref="T:TVA.Diagnostics.PerformanceCounter"/> to be monitored.
            </summary>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
            <param name="aliasName">The alias name for the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.AddCounter(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a <see cref="T:TVA.Diagnostics.PerformanceCounter"/> to be monitored.
            </summary>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
            <param name="aliasName">The alias name for the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
            <param name="valueUnit">The measurement unit for the statistical values of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.AddCounter(System.String,System.String,System.String,System.String,System.String,System.Single)">
            <summary>
            Adds a <see cref="T:TVA.Diagnostics.PerformanceCounter"/> to be monitored.
            </summary>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
            <param name="aliasName">The alias name for the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
            <param name="valueUnit">The measurement unit for the statistical values of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
            <param name="valueDivisor">The divisor to be applied to the statistical values of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.AddCounter(TVA.Diagnostics.PerformanceCounter)">
            <summary>
            Adds a <see cref="T:TVA.Diagnostics.PerformanceCounter"/> to be monitored.
            </summary>
            <param name="counter">The <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object to be monitored.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.RemoveCounter(TVA.Diagnostics.PerformanceCounter)">
            <summary>
            Removes a <see cref="T:TVA.Diagnostics.PerformanceCounter"/> being monitored.
            </summary>
            <param name="counter">The <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object to be unmonitored.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.FindCounter(System.String)">
            <summary>
            Returns a <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object matching the specified counter name.
            </summary>
            <param name="counterName">Name of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> to be retrieved.</param>
            <returns>A <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object if a match is found; otherwise null.</returns>
            <remarks>
            First <see cref="T:TVA.Diagnostics.PerformanceCounter"/> with matching name is returned. If same name exists within
            muliple monitored categories, use <see cref="M:TVA.Diagnostics.PerformanceMonitor.FindCounter(System.String,System.String)"/> overload instead.
            </remarks>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.FindCounter(System.String,System.String)">
            <summary>
            Returns a <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object matching the specified counter name.
            </summary>
            <param name="categoryName">Category of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> to be retrieved.</param>
            <param name="counterName">Name of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> to be retrieved.</param>
            <returns>A <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object if a match is found; otherwise null.</returns>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceMonitor.SampleCounters">
            <summary>
            Sample all defined counters.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.ProcessName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Diagnostics.Process"/> to be monitored.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.SamplingInterval">
            <summary>
            Gets or sets the interval, in milliseconds, at which the <see cref="P:TVA.Diagnostics.PerformanceMonitor.Counters"/> are to be sampled.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.Counters">
            <summary>
            Gets a read-only list of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> objects monitored by the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> object.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.CPUUsage">
            <summary>
            Gets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> that monitors the processor utilization of the monitored process.
            </summary>
            <remarks>This <see cref="T:TVA.Diagnostics.PerformanceCounter"/> is added by default.</remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.DatagramSendRate">
            <summary>
            Gets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> that monitors the IP based datagrams sent / second of the system.
            </summary>
            <remarks>This <see cref="T:TVA.Diagnostics.PerformanceCounter"/> is added by default.</remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.DatagramReceiveRate">
            <summary>
            Gets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> that monitors the IP based datagrams received / second of the system.
            </summary>
            <remarks>This <see cref="T:TVA.Diagnostics.PerformanceCounter"/> is added by default.</remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.ThreadingContentionRate">
            <summary>
            Gets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> that monitors the .NET threading contention rate / second of the process.
            </summary>
            <remarks>This <see cref="T:TVA.Diagnostics.PerformanceCounter"/> is added by default.</remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.MemoryUsage">
            <summary>
            Gets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> that monitors the memory utilization of the monitored process.
            </summary>
            <remarks>This <see cref="T:TVA.Diagnostics.PerformanceCounter"/> is added by default.</remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.IOUsage">
            <summary>
            Gets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> that monitors the rate at which the monitored process is 
            issuing bytes to I/O operations that do not involve data such as control operations.
            </summary>
            <remarks>This <see cref="T:TVA.Diagnostics.PerformanceCounter"/> is added by default.</remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.IOActivity">
            <summary>
            Gets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> that monitors the rate at which the monitored process is 
            issuing read and write I/O operations.
            </summary>
            <remarks>This <see cref="T:TVA.Diagnostics.PerformanceCounter"/> is added by default.</remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.HandleCount">
            <summary>
            Gets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> that monitors the total number of handles currently open by 
            the monitored process.
            </summary>
            <remarks>This <see cref="T:TVA.Diagnostics.PerformanceCounter"/> is added by default.</remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.ThreadCount">
            <summary>
            Gets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> that monitors the number of threads currently active in the 
            monitored process.
            </summary>
            <remarks>This <see cref="T:TVA.Diagnostics.PerformanceCounter"/> is added by default.</remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.Name">
            <summary>
            Gets the friendly name of the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> object.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.Status">
            <summary>
            Gets the current status of the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> object.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceMonitor.LifetimeStatus">
            <summary>
            Gets the lifetime status statistics of the <see cref="T:TVA.Diagnostics.PerformanceMonitor"/> object.
            </summary>
        </member>
        <member name="T:TVA.Windows.NamespaceDoc">
            <summary>
            Contains classes and extension functions related to .NET Windows-based platforms such as Windows Forms and WPF.
            </summary>
        </member>
        <member name="T:TVA.Windows.Forms.NamespaceDoc">
            <summary>
            Contains classes, extension functions and forms used to simplify and standardize usage of basic Windows forms.
            </summary>
        </member>
        <member name="T:TVA.Windows.Forms.FormExtensions">
            <summary>Extensions applied to all System.Windows.Forms.Form objects.</summary>
        </member>
        <member name="F:TVA.Windows.Forms.FormExtensions.LastWindowSizeSettingsCategory">
            <summary>
            Config file category under which the window size information will be saved.
            </summary>
        </member>
        <member name="F:TVA.Windows.Forms.FormExtensions.LastWindowLocationSettingsCategory">
            <summary>
            Config file category under which the window location information will be saved.
            </summary>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.SaveLayout(System.Windows.Forms.Form)">
            <summary>
            Saves the size and location information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size and location information is to be saved.</param>
            <remarks>This function simply calls the SaveWindowSize and SaveWindowLocation functions using the default settings categories</remarks>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.RestoreLayout(System.Windows.Forms.Form)">
            <summary>
            Restores the size and location of the specified windowsForm from the size and location information saved in the
            application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size and location is to be restored.</param>
            <remarks>This function simply calls the RestoreWindowSize and RestoreWindowLocation functions using the default settings categories</remarks>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.SaveSize(System.Windows.Forms.Form)">
            <summary>
            Saves the size information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size information is to be saved.</param>
            <remarks>This function uses the default settings category "LastWindowSize"</remarks>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.SaveSize(System.Windows.Forms.Form,System.String)">
            <summary>
            Saves the size information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size information is to be saved.</param>
            <param name="settingsCategory">Settings category used to persist form size information</param>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.SaveLocation(System.Windows.Forms.Form)">
            <summary>
            Saves the location information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose location information is to be saved.</param>
            <remarks>This function uses the default settings category "LastWindowLocation"</remarks>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.SaveLocation(System.Windows.Forms.Form,System.String)">
            <summary>
            Saves the location information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose location information is to be saved.</param>
            <param name="settingsCategory">Settings category used to persist form location information</param>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.RestoreSize(System.Windows.Forms.Form)">
            <summary>
            Restores the size of the specified windowsForm from the size information saved in the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size is to be restored.</param>
            <remarks>This function uses the default settings category "LastWindowSize"</remarks>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.RestoreSize(System.Windows.Forms.Form,System.String)">
            <summary>
            Restores the size of the specified windowsForm from the size information saved in the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size is to be restored.</param>
            <param name="settingsCategory">Settings category used to persist form size information</param>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.RestoreLocation(System.Windows.Forms.Form)">
            <summary>
            Restores the location of the specified windowsForm from the location information saved in the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose location is to be restored.</param>
            <remarks>This function uses the default settings category "LastWindowLocation"</remarks>
        </member>
        <member name="M:TVA.Windows.Forms.FormExtensions.RestoreLocation(System.Windows.Forms.Form,System.String)">
            <summary>
            Restores the location of the specified windowsForm from the location information saved in the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose location is to be restored.</param>
            <param name="settingsCategory">Settings category used to persist form location information</param>
        </member>
        <member name="T:TVA.Units.Mass">
            <summary>Represents a mass measurement, in kilograms, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a mass in kilograms; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other mass representations, specifically
            ounces, pounds and tons. Metric conversions are handled simply by applying the needed <see cref="T:TVA.Units.SI"/>
            conversion factor, for example:
            <example>
            Convert mass, in kilograms, to grams:
            <code>
            public double GetGrams(Mass kilograms)
            {
                return kilograms * SI.Kilo;
            }
            </code>
            This example converts tons to pounds:
            <code>
            public double GetPounds(double tons)
            {
                return Mass.FromTons(tons).ToPounds();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Mass.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Mass"/>.
            </summary>
            <param name="value">New mass value in kilograms.</param>
        </member>
        <member name="M:TVA.Units.Mass.ToOunces">
            <summary>
            Gets the <see cref="T:TVA.Units.Mass"/> value in ounces (avoirdupois).
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Mass"/> in ounces.</returns>
        </member>
        <member name="M:TVA.Units.Mass.ToPounds">
            <summary>
            Gets the <see cref="T:TVA.Units.Mass"/> value in pounds (avoirdupois).
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Mass"/> in pounds.</returns>
        </member>
        <member name="M:TVA.Units.Mass.ToMetricPounds">
            <summary>
            Gets the <see cref="T:TVA.Units.Mass"/> value in metric pounds.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Mass"/> in metric pounds.</returns>
        </member>
        <member name="M:TVA.Units.Mass.ToTons">
            <summary>
            Gets the <see cref="T:TVA.Units.Mass"/> value in short tons.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Mass"/> in short tons.</returns>
        </member>
        <member name="M:TVA.Units.Mass.ToMetricTons">
            <summary>
            Gets the <see cref="T:TVA.Units.Mass"/> value in metric tons.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Mass"/> in metric tons.</returns>
        </member>
        <member name="M:TVA.Units.Mass.ToLongTons">
            <summary>
            Gets the <see cref="T:TVA.Units.Mass"/> value in long tons.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Mass"/> in long tons.</returns>
        </member>
        <member name="M:TVA.Units.Mass.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Mass"/>.</exception>
        </member>
        <member name="M:TVA.Units.Mass.CompareTo(TVA.Units.Mass)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Mass"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Mass"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Mass"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.Equals(TVA.Units.Mass)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Mass"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Mass"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Mass.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Mass"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Mass"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Mass.MinValue"/> or greater than <see cref="F:TVA.Units.Mass.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Mass.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Mass"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Mass"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Mass.MinValue"/> or greater than <see cref="F:TVA.Units.Mass.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Mass.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Mass"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Mass"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Mass.MinValue"/> or greater than <see cref="F:TVA.Units.Mass.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Mass.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Mass"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Mass"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Mass.MinValue"/> or greater than <see cref="F:TVA.Units.Mass.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Mass.TryParse(System.String,TVA.Units.Mass@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Mass"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Mass"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paraampere is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Mass.MinValue"/> or greater than <see cref="F:TVA.Units.Mass.MaxValue"/>.
            This paraampere is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Mass.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Mass@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Mass"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Mass"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paraampere is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Mass.MinValue"/> or
            greater than <see cref="F:TVA.Units.Mass.MaxValue"/>. This paraampere is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Mass.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Equality(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Inequality(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_LessThan(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_LessThanOrEqual(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_GreaterThan(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_GreaterThanOrEqual(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Implicit(System.Double)~TVA.Units.Mass">
            <summary>
            Implicitly converts value, represented in kilograms, to a <see cref="T:TVA.Units.Mass"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Mass"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Implicit(TVA.Units.Mass)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Mass"/>, represented in kilograms, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Mass"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Modulus(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Mass"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Addition(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Mass"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Subtraction(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Mass"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Multiply(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Mass"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Division(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Mass"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Mass.op_Exponent(TVA.Units.Mass,TVA.Units.Mass)">
            <summary>
            Returns result of first value raised to mass of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Mass"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Mass"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result of the operation.</returns>
        </member>
        <member name="F:TVA.Units.Mass.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Mass"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Mass.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Mass"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Mass.FromOunces(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Mass"/> value from the specified <paramref name="value"/> in ounces (avoirdupois).
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Mass"/> value in ounces.</param>
            <returns>New <see cref="T:TVA.Units.Mass"/> object from the specified <paramref name="value"/> in ounces.</returns>
        </member>
        <member name="M:TVA.Units.Mass.FromPounds(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Mass"/> value from the specified <paramref name="value"/> in pounds (avoirdupois).
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Mass"/> value in pounds.</param>
            <returns>New <see cref="T:TVA.Units.Mass"/> object from the specified <paramref name="value"/> in pounds.</returns>
        </member>
        <member name="M:TVA.Units.Mass.FromMetricPounds(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Mass"/> value from the specified <paramref name="value"/> in metric pounds.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Mass"/> value in metric pounds.</param>
            <returns>New <see cref="T:TVA.Units.Mass"/> object from the specified <paramref name="value"/> in metric pounds.</returns>
        </member>
        <member name="M:TVA.Units.Mass.FromTons(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Mass"/> value from the specified <paramref name="value"/> in short tons.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Mass"/> value in short tons.</param>
            <returns>New <see cref="T:TVA.Units.Mass"/> object from the specified <paramref name="value"/> in short tons.</returns>
        </member>
        <member name="M:TVA.Units.Mass.FromMetricTons(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Mass"/> value from the specified <paramref name="value"/> in metric tons.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Mass"/> value in metric tons.</param>
            <returns>New <see cref="T:TVA.Units.Mass"/> object from the specified <paramref name="value"/> in metric tons.</returns>
        </member>
        <member name="M:TVA.Units.Mass.FromLongTons(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Mass"/> value from the specified <paramref name="value"/> in long tons.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Mass"/> value in long tons.</param>
            <returns>New <see cref="T:TVA.Units.Mass"/> object from the specified <paramref name="value"/> in long tons.</returns>
        </member>
        <member name="T:TVA.Threading.ManagedThreads">
            <summary>
            Maintains a reference to all managed threads
            </summary>
        </member>
        <member name="M:TVA.Threading.ManagedThreads.Add(TVA.Threading.ManagedThread)">
            <summary>
            Add an item to the active thread list
            </summary>
            <remarks>
            Typically only used by standard threads when user calls "Start"
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThreads.Remove(TVA.Threading.ManagedThread)">
            <summary>
            Remove completed thread from active thread list
            </summary>
        </member>
        <member name="M:TVA.Threading.ManagedThreads.Queue(TVA.Threading.ManagedThread)">
            <summary>
            Queue thread for processing
            </summary>
            <remarks>
            Typically only used by queued threads to add work items to the queue
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThreads.Pop">
            <summary>
            Removes first item from the queue and transfers the item to the active thread list
            </summary>
            <returns>Next item to be processed</returns>
        </member>
        <member name="M:TVA.Threading.ManagedThreads.Cancel(TVA.Threading.ManagedThread,System.Boolean,System.Object)">
            <summary>
            Removes a queued thread from thread pool if still queued, if allowAbort is True
            aborts the thread if executing (standard or queued)
            </summary>
            <param name="item">Thread to cancel</param>
            <param name="allowAbort">Set to True to abort thread if executing</param>
            <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</param>
        </member>
        <member name="P:TVA.Threading.ManagedThreads.ActiveThreadStatus">
            <summary>
            Returns a descriptive status of all queued and active mananged threads
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThreads.QueuedThreads">
            <summary>
            Returns a copy of the currently queued and active threads
            </summary>
        </member>
        <member name="T:TVA.Security.Cryptography.CipherStrength">
            <summary>
            Cryptographic strength enumeration.
            </summary>
        </member>
        <member name="F:TVA.Security.Cryptography.CipherStrength.None">
            <summary>Uses no encryption.</summary>
        </member>
        <member name="F:TVA.Security.Cryptography.CipherStrength.Aes128">
            <summary>Uses AES 128-bit encryption.</summary>
        </member>
        <member name="F:TVA.Security.Cryptography.CipherStrength.Aes256">
            <summary>Uses AES 256-bit encryption.</summary>
        </member>
        <member name="T:TVA.Security.Cryptography.Cipher">
            <summary>
            Provides general use cryptographic functions.
            </summary>
            <remarks>
            This class exists to simplify usage of basic cryptography functionality.
            </remarks>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.#cctor">
            <summary>
            Static constructor for the <see cref="T:TVA.Security.Cryptography.Cipher"/> class.
            Prepares the file watcher for receiving events.
            </summary>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.ImportKeyIV(System.String,System.Int32,System.String)">
            <summary>
            Imports a key and initialization vector into the local system key cache.
            </summary>
            <param name="password">User password used for key lookups.</param>
            <param name="keySize">Specifies the desired key size.</param>
            <param name="keyIVText">Text based key and initialization vector to import into local key cache.</param>
            <remarks>
            This method is used to manually import a key created on another computer.
            </remarks>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.ExportKeyIV(System.String,System.Int32)">
            <summary>
            Exports a key and initialization vector from the local system key cache.
            </summary>
            <param name="password">User password used for key lookup.</param>
            <param name="keySize">Specifies the desired key size.</param>
            <returns>Text based key and initialization vector exported from local key cache.</returns>
            <remarks>
            This method is used to manually export a key to be installed on another computer. 
            </remarks>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.GetPasswordHash(System.String,System.Int32)">
            <summary>
            Gets the Base64 encoded SHA-2 hash of given user password.
            </summary>
            <param name="password">User password to get hash for.</param>
            <param name="keySize">Specifies the desired key size.</param>
            <returns>Base64 encoded SHA-2 hash of user password.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.GetCryptoKeyIV(System.String,System.Int32)">
            <summary>
            Gets the crypto key and initialization vector for the given user password.
            </summary>
            <param name="password">User password used for key lookup.</param>
            <param name="keySize">Specifies the desired key size.</param>
            <returns>Crypto key, index 0, and initialization vector, index 1, for the given user password.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.SerializeKeyIVTable(System.Object)">
            <summary>
            Serializes key and initialization vector table to local cache file that can only be decrypted from local machine.
            </summary>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.DeserializeKeyIVTable">
            <summary>
            Deserializes key and initialization vector table from local cache that was encrypted on local machine.
            </summary>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.GetSystemLevelMutex(System.String)">
            <summary>
            Gets the specified named system level mutex.
            </summary>
            <param name="mutexName">Mutext name to retrieve.</param>
            <returns>Specified system level mutex; it is created if it does not exist.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.s_keyIVCacheFileWatcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Reloads the key and initialization vector table when the cache file is modified externally.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An object which provides data for directory events.</param>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Encrypt(System.String,System.String,TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a Base64 encoded string of the returned binary array of the encrypted data, generated with
            the given parameters.
            </summary>
            <param name="source">Source string to encrypt.</param>
            <param name="password">User password used for key lookup.</param>
            <param name="strength">Cryptographic strength to use when encrypting string.</param>
            <returns>An encrypted version of the source string.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Encrypt(System.Byte[],System.String,TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a binary array of encrypted data for the given parameters.
            </summary>
            <param name="source">Binary array of data to encrypt.</param>
            <param name="password">User password used for key lookup.</param>
            <param name="strength">Cryptographic strength to use when encrypting data.</param>
            <returns>An encrypted version of the source data.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.String,TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a binary array of encrypted data for the given parameters.
            </summary>
            <param name="source">Binary array of data to encrypt.</param>
            <param name="startIndex">Offset into <paramref name="source"/> buffer.</param>
            <param name="length">Number of bytes in <paramref name="source"/> buffer to encrypt starting from <paramref name="startIndex"/> offset.</param>
            <param name="password">User password used for key lookup.</param>
            <param name="strength">Cryptographic strength to use when encrypting data.</param>
            <returns>An encrypted version of the source data.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Encrypt(System.Byte[],System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a binary array of encrypted data for the given parameters.
            </summary>
            <param name="source">Binary array of data to encrypt.</param>
            <param name="key">Encryption key to use to encrypt data.</param>
            <param name="iv">Initialization vector to use to encrypt data.</param>
            <param name="strength">Cryptographic strength to use when encrypting data.</param>
            <returns>An encrypted version of the source data.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a binary array of encrypted data for the given parameters.
            </summary>
            <param name="source">Binary array of data to encrypt.</param>
            <param name="startIndex">Offset into <paramref name="source"/> buffer.</param>
            <param name="length">Number of bytes in <paramref name="source"/> buffer to encrypt starting from <paramref name="startIndex"/> offset.</param>
            <param name="key">Encryption key to use to encrypt data.</param>
            <param name="iv">Initialization vector to use to encrypt data.</param>
            <param name="strength">Cryptographic strength to use when encrypting data.</param>
            <returns>An encrypted version of the source data.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Encrypt(System.IO.Stream,System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a stream of encrypted data for the given parameters.
            </summary>
            <param name="source">Source stream that contains data to encrypt.</param>
            <param name="key">Encryption key to use to encrypt stream.</param>
            <param name="iv">Initialization vector to use to encrypt stream.</param>
            <param name="strength">Cryptographic strength to use when encrypting stream.</param>
            <returns>An encrypted version of the source stream.</returns>
            <remarks>
            This returns a memory stream of the encrypted results, if the incoming stream is
            very large this will consume a large amount of memory.  In this case use the overload
            that takes the destination stream as a parameter instead.
            </remarks>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Encrypt(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength,System.Action{TVA.ProcessProgress{System.Int64}})">
            <summary>
            Encrypts input stream onto output stream for the given parameters.
            </summary>
            <param name="source">Source stream that contains data to encrypt.</param>
            <param name="destination">Destination stream used to hold encrypted data.</param>
            <param name="key">Encryption key to use to encrypt stream.</param>
            <param name="iv">Initialization vector to use to encrypt stream.</param>
            <param name="strength">Cryptographic strength to use when encrypting stream.</param>
            <param name="progressHandler">Optional delegate to handle progress updates for encrypting large streams.</param>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.EncryptFile(System.String,System.String,System.String,TVA.Security.Cryptography.CipherStrength,System.Action{TVA.ProcessProgress{System.Int64}})">
            <summary>
            Creates an encrypted file from source file data.
            </summary>
            <param name="sourceFileName">Source file name.</param>
            <param name="destinationFileName">Destination file name.</param>
            <param name="password">User password used for key lookup.</param>
            <param name="strength">Cryptographic strength to use when encrypting file.</param>
            <param name="progressHandler">Optional delegate to handle progress updates for encrypting large files.</param>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Decrypt(System.String,System.String,TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a decrypted string from a Base64 encoded string of binary encrypted data from the given
            parameters.
            </summary>
            <param name="source">Source string to decrypt.</param>
            <param name="password">User password used for key lookup.</param>
            <param name="strength">Cryptographic strength to use when decrypting string.</param>
            <returns>A decrypted version of the source string.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Decrypt(System.Byte[],System.String,TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a binary array of decrypted data for the given parameters.
            </summary>
            <param name="source">Binary array of data to decrypt.</param>
            <param name="password">User password used for key lookup.</param>
            <param name="strength">Cryptographic strength to use when decrypting data.</param>
            <returns>A decrypted version of the source data.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.String,TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a binary array of decrypted data for the given parameters.
            </summary>
            <param name="source">Binary array of data to decrypt.</param>
            <param name="startIndex">Offset into <paramref name="source"/> buffer.</param>
            <param name="length">Number of bytes in <paramref name="source"/> buffer to decrypt starting from <paramref name="startIndex"/> offset.</param>
            <param name="password">User password used for key lookup.</param>
            <param name="strength">Cryptographic strength to use when decrypting data.</param>
            <returns>A decrypted version of the source data.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Decrypt(System.Byte[],System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a binary array of decrypted data for the given parameters.
            </summary>
            <param name="source">Binary array of data to decrypt.</param>
            <param name="key">Encryption key to use to decrypt data.</param>
            <param name="iv">Initialization vector to use to decrypt data.</param>
            <param name="strength">Cryptographic strength to use when decrypting data.</param>
            <returns>A decrypted version of the source data.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a binary array of decrypted data for the given parameters.
            </summary>
            <param name="source">Binary array of data to decrypt.</param>
            <param name="startIndex">Offset into <paramref name="source"/> buffer.</param>
            <param name="length">Number of bytes in <paramref name="source"/> buffer to decrypt starting from <paramref name="startIndex"/> offset.</param>
            <param name="key">Encryption key to use to decrypt data.</param>
            <param name="iv">Initialization vector to use to decrypt data.</param>
            <param name="strength">Cryptographic strength to use when decrypting data.</param>
            <returns>A decrypted version of the source data.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Decrypt(System.IO.Stream,System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength)">
            <summary>
            Returns a stream of decrypted data for the given parameters.
            </summary>
            <param name="source">Source stream that contains data to decrypt.</param>
            <param name="key">Encryption key to use to decrypt stream.</param>
            <param name="iv">Initialization vector to use to decrypt stream.</param>
            <param name="strength">Cryptographic strength to use when decrypting stream.</param>
            <returns>A decrypted version of the source stream.</returns>
            <remarks>
            This returns a memory stream of the decrypted results, if the incoming stream is
            very large this will consume a large amount of memory.  In this case use the overload
            that takes the destination stream as a parameter instead.
            </remarks>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.Decrypt(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[],TVA.Security.Cryptography.CipherStrength,System.Action{TVA.ProcessProgress{System.Int64}})">
            <summary>
            Decrypts input stream onto output stream for the given parameters.
            </summary>
            <param name="source">Source stream that contains data to decrypt.</param>
            <param name="destination">Destination stream used to hold decrypted data.</param>
            <param name="key">Encryption key to use to decrypt stream.</param>
            <param name="iv">Initialization vector to use to decrypt stream.</param>
            <param name="strength">Cryptographic strength to use when decrypting stream.</param>
            <param name="progressHandler">Optional delegate to handle progress updates for decrypting large streams.</param>
        </member>
        <member name="M:TVA.Security.Cryptography.Cipher.DecryptFile(System.String,System.String,System.String,TVA.Security.Cryptography.CipherStrength,System.Action{TVA.ProcessProgress{System.Int64}})">
            <summary>
            Creates a decrypted file from source file data.
            </summary>
            <param name="sourceFileName">Source file name.</param>
            <param name="destinationFileName">Destination file name.</param>
            <param name="password">User password used for key lookup.</param>
            <param name="strength">Cryptographic strength to use when decrypting file.</param>
            <param name="progressHandler">Optional delegate to handle progress updates for decrypting large files.</param>
        </member>
        <member name="T:TVA.NumericalAnalysis.RealTimeSlope">
            <summary>Calculates slope for a real-time continuous data stream.</summary>
        </member>
        <member name="M:TVA.NumericalAnalysis.RealTimeSlope.#ctor">
            <summary>
            Creates a default instance of the real-time slope calculation class. Must call Initialize before using.
            </summary>
        </member>
        <member name="M:TVA.NumericalAnalysis.RealTimeSlope.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance of the real-time slope calculation class.</summary>
            <param name="regressionInterval">Time span over which to calculate slope.</param>
            <param name="estimatedRefreshInterval">Estimated data points per second.</param>
        </member>
        <member name="M:TVA.NumericalAnalysis.RealTimeSlope.Calculate(System.Double,System.Double)">
            <summary>Adds a new x, y data pair to continuous data set.</summary>
            <param name="x">New x-axis value.</param>
            <param name="y">New y-axis value.</param>
        </member>
        <member name="M:TVA.NumericalAnalysis.RealTimeSlope.Initialize(System.Int32,System.Double)">
            <summary>
            Initializes real-time slope calculation.
            </summary>
            <param name="regressionInterval">Time span over which to calculate slope.</param>
            <param name="estimatedRefreshInterval">Estimated data points per second.</param>
        </member>
        <member name="E:TVA.NumericalAnalysis.RealTimeSlope.Status">
            <summary>
            Raised when new status messages come from the <see cref="T:TVA.NumericalAnalysis.RealTimeSlope"/>.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is status message from the <see cref="T:TVA.NumericalAnalysis.RealTimeSlope"/>.
            </remarks>
        </member>
        <member name="E:TVA.NumericalAnalysis.RealTimeSlope.Recalculated">
            <summary>
            Raised when new real-time <see cref="P:TVA.NumericalAnalysis.RealTimeSlope.Slope"/> has been calculated and is available.
            </summary>
        </member>
        <member name="P:TVA.NumericalAnalysis.RealTimeSlope.Slope">
            <summary>Gets current calculated slope for data set.</summary>
        </member>
        <member name="P:TVA.NumericalAnalysis.RealTimeSlope.RunTime">
            <summary>Gets run-time, in seconds, for which slope has maintained a continuous positive or negative
            trend.</summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpSessionConnected.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Net.Ftp.FtpSessionConnected"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpSessionConnected.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Net.Ftp.FtpSessionConnected"/> object.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpSessionConnected.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Net.Ftp.FtpSessionConnected"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:TVA.Console.Events">
             <summary>
             Defines a set of consumable events that can be raised by a console application.
             </summary>
             <example>
             This example shows how to subscribe to console application events:
             <code>
             using System;
             using TVA.Console;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     // Subscribe to console events.
                     Events.CancelKeyPress += Events_CancelKeyPress;
                     Events.ConsoleClosing += Events_ConsoleClosing;
                     Events.EnableRaisingEvents();
                    
                     Console.ReadLine();
                 }
                
                 static void Events_CancelKeyPress(object sender, System.ComponentModel.CancelEventArgs e)
                 {
                     // Abort processing.
                 }
                
                 static void Events_ConsoleClosing(object sender, System.ComponentModel.CancelEventArgs e)
                 {
                     // Put clean-up code.
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:TVA.Console.Events.EnableRaisingEvents">
            <summary>
            Enables the raising of console application <see cref="T:TVA.Console.Events"/>. Prior to calling this method, handlers 
            must be defined for the <see cref="T:TVA.Console.Events"/> raised by a console application.
            </summary>
        </member>
        <member name="M:TVA.Console.Events.DisableRaisingEvents">
            <summary>
            Enables the raising of console application <see cref="T:TVA.Console.Events"/>. 
            </summary>
        </member>
        <member name="M:TVA.Console.Events.HandleConsoleWindowEvents(TVA.Console.Events.ConsoleEventType)">
            <summary>
            Delegate method that gets called when console application events occur.
            </summary>
        </member>
        <member name="E:TVA.Console.Events.CancelKeyPress">
            <summary>
            Occurs when CTRL+C signal is received from keyboard input.
            </summary>
            <remarks>
            <see cref="M:TVA.Console.Events.EnableRaisingEvents"/> method must be called to enable event publication.
            </remarks>
        </member>
        <member name="E:TVA.Console.Events.BreakKeyPress">
            <summary>
            Occurs when CTRL+BREAK signal is received from keyboard input.
            </summary>
            <remarks>
            <see cref="M:TVA.Console.Events.EnableRaisingEvents"/> method must be called to enable event publication.
            </remarks>
        </member>
        <member name="E:TVA.Console.Events.ConsoleClosing">
            <summary>
            Occurs when the user closes the console application window.
            </summary>
            <remarks>
            <see cref="M:TVA.Console.Events.EnableRaisingEvents"/> method must be called to enable event publication.
            </remarks>
        </member>
        <member name="E:TVA.Console.Events.UserLoggingOff">
            <summary>
            Occurs when the user is logging off.
            </summary>
            <remarks>
            <see cref="M:TVA.Console.Events.EnableRaisingEvents"/> method must be called to enable event publication.
            </remarks>
        </member>
        <member name="E:TVA.Console.Events.SystemShutdown">
            <summary>
            Occurs when the system is shutting down.
            </summary>
            <remarks>
            <see cref="M:TVA.Console.Events.EnableRaisingEvents"/> method must be called to enable event publication.
            </remarks>
        </member>
        <member name="T:TVA.Configuration.NamespaceDoc">
            <summary>
            Contains classes, base classes and attributes related to simplifying access to configuration files including creating a categorized settings section.
            </summary>
        </member>
        <member name="T:TVA.Configuration.SettingScope">
            <summary>
            Specifies the scope of a setting represented by <see cref="T:TVA.Configuration.CategorizedSettingsElement"/>.
            </summary>
        </member>
        <member name="F:TVA.Configuration.SettingScope.User">
            <summary>
            Settings is intended for user specific use.
            </summary>
        </member>
        <member name="F:TVA.Configuration.SettingScope.Application">
            <summary>
            Settings is intended for application wide use.
            </summary>
        </member>
        <member name="T:TVA.Configuration.CategorizedSettingsElement">
            <summary>
            Represents a settings entry in the config file.
            </summary>
        </member>
        <member name="F:TVA.Configuration.CategorizedSettingsElement.DefaultValue">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Configuration.CategorizedSettingsElement.Value"/> property.
            </summary>
        </member>
        <member name="F:TVA.Configuration.CategorizedSettingsElement.DefaultDescription">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Configuration.CategorizedSettingsElement.Description"/> property.
            </summary>
        </member>
        <member name="F:TVA.Configuration.CategorizedSettingsElement.DefaultEncrypted">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Configuration.CategorizedSettingsElement.Encrypted"/> property.
            </summary>
        </member>
        <member name="F:TVA.Configuration.CategorizedSettingsElement.DefaultScope">
            <summary>
            Specifies the default value for the <see cref="P:TVA.Configuration.CategorizedSettingsElement.Scope"/> property.
            </summary>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.#ctor(TVA.Configuration.CategorizedSettingsElementCollection)">
            <summary>
            Required by the configuration API and is for internal use only.
            </summary>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.#ctor(TVA.Configuration.CategorizedSettingsElementCollection,System.String)">
            <summary>
            Required by the configuration API and is for internal use only.
            </summary>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.SetCryptoKey(System.String)">
            <summary>
            Sets the key to be used for encrypting and decrypting the <see cref="P:TVA.Configuration.CategorizedSettingsElement.Value"/>.
            </summary>
            <param name="cryptoKey">New crypto key.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.Update(System.Object)">
            <summary>
            Updates setting information.
            </summary>
            <param name="value">New setting value.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.Update(System.Object,System.String)">
            <summary>
            Updates setting information.
            </summary>
            <param name="value">New setting value.</param>
            <param name="description">New setting description.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.Update(System.Object,System.String,System.Boolean)">
            <summary>
            Updates setting information.
            </summary>
            <param name="value">New setting value.</param>
            <param name="description">New setting description.</param>
            <param name="encrypted">A boolean value that indicated whether the new setting value is to be encrypted.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.Update(System.Object,System.String,System.Boolean,TVA.Configuration.SettingScope)">
            <summary>
            Updates setting information.
            </summary>
            <param name="value">New setting value.</param>
            <param name="description">New setting description.</param>
            <param name="encrypted">A boolean value that indicated whether the new setting value is to be encrypted.</param>
            <param name="scope">One of the <see cref="T:TVA.Configuration.SettingScope"/> values.</param>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAs``1">
            <summary>
            Gets the setting value as the specified type.
            </summary>
            <typeparam name="T">Type to which the setting value is to be converted.</typeparam>
            <returns>The type-coerced value of the setting.</returns>
            <remarks>
            If this function fails to properly coerce value to specified type, the default value is returned.
            </remarks>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAs``1(``0)">
            <summary>
            Gets the setting value as the specified type.
            </summary>
            <typeparam name="T">Type to which the setting value is to be converted.</typeparam>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>The type-coerced value of the setting.</returns>
            <remarks>
            If this function fails to properly coerce value to specified type, the default value is returned.
            </remarks>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsString">
            <summary>
            Gets the setting value as a string.
            </summary>
            <returns>Value as string.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsString(System.String)">
            <summary>
            Gets the setting value as a string.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as string.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsBoolean">
            <summary>
            Gets the setting value as a boolean.
            </summary>
            <returns>Value as boolean.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsBoolean(System.Boolean)">
            <summary>
            Gets the setting value as a boolean.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as boolean.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsByte">
            <summary>
            Gets the setting value as a byte.
            </summary>
            <returns>Value as byte.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsByte(System.Byte)">
            <summary>
            Gets the setting value as a byte.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as byte.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsSByte">
            <summary>
            Gets the setting value as a signed byte.
            </summary>
            <returns>Value as signed byte.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsSByte(System.SByte)">
            <summary>
            Gets the setting value as a signed byte.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as signed byte.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsChar">
            <summary>
            Gets the setting value as a char.
            </summary>
            <returns>Value as char.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsChar(System.Char)">
            <summary>
            Gets the setting value as a char.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as char.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsInt16">
            <summary>
            Gets the setting value as a short.
            </summary>
            <returns>Value as short.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsInt16(System.Int16)">
            <summary>
            Gets the setting value as a short.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as short.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsInt32">
            <summary>
            Gets the setting value as an int.
            </summary>
            <returns>Value as int.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsInt32(System.Int32)">
            <summary>
            Gets the setting value as an int.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as int.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsInt64">
            <summary>
            Gets the setting value as a long.
            </summary>
            <returns>Value as long.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsInt64(System.Int64)">
            <summary>
            Gets the setting value as a long.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as long.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsUInt16">
            <summary>
            Gets the setting value as an unsigned short.
            </summary>
            <returns>Value as unsigned short.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsUInt16(System.UInt16)">
            <summary>
            Gets the setting value as an unsigned short.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as unsigned short.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsUInt32">
            <summary>
            Gets the setting value as an unsigned int.
            </summary>
            <returns>Value as unsigned int.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsUInt32(System.UInt32)">
            <summary>
            Gets the setting value as an unsigned int.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as unsigned int.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsUInt64">
            <summary>
            Gets the setting value as an unsigned long.
            </summary>
            <returns>Value as unsigned long.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsUInt64(System.UInt64)">
            <summary>
            Gets the setting value as an unsigned long.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as unsigned long.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsSingle">
            <summary>
            Gets the setting value as a float.
            </summary>
            <returns>Value as float.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsSingle(System.Single)">
            <summary>
            Gets the setting value as a float.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as float.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsDouble">
            <summary>
            Gets the setting value as a double.
            </summary>
            <returns>Value as double.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsDouble(System.Double)">
            <summary>
            Gets the setting value as a double.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as double.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsDecimal">
            <summary>
            Gets the setting value as a decimal.
            </summary>
            <returns>Value as decimal.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsDecimal(System.Decimal)">
            <summary>
            Gets the setting value as a decimal.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as decimal.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsDateTime">
            <summary>
            Gets the setting value as DateTime.
            </summary>
            <returns>Value as DateTime.</returns>
        </member>
        <member name="M:TVA.Configuration.CategorizedSettingsElement.ValueAsDateTime(System.DateTime)">
            <summary>
            Gets the setting value as DateTime.
            </summary>
            <param name="defaultValue">The default value to return if the setting value is empty.</param>
            <returns>Value as DateTime.</returns>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElement.Category">
            <summary>
            Gets or sets the <see cref="T:TVA.Configuration.CategorizedSettingsElementCollection"/> to which this <see cref="T:TVA.Configuration.CategorizedSettingsElement"/> belongs.
            </summary>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElement.Name">
            <summary>
            Gets or sets the identifier of the setting.
            </summary>
            <returns>The identifier of the setting.</returns>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElement.Value">
            <summary>
            Gets or sets the value of the setting.
            </summary>
            <returns>The value of the setting.</returns>
            <remarks>
            <see cref="P:TVA.Configuration.CategorizedSettingsElement.Value"/> can reference the value of another setting using <b>Eval([Section].[Setting])</b> syntax or the value of a known .NET 
            type's static member (field, non-indexed property or parameterless method) using <b>Eval([Type].[Member])</b> syntax as shown in the example below:
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <configuration>
              <configSections>
                <section name="categorizedSettings" type="TVA.Configuration.CategorizedSettingsSection, TVA.Core" />
              </configSections>
              <categorizedSettings>
                <database>
                  <add name="SettingsTable" value="dbo.Settings" description="Table that contains the settings." 
                    encrypted="false" />
                  <add name="AdminEmail" value="SELECT * FROM Eval(Database.SettingsTable) WHERE Name = 'AdminEmail'" 
                    description="Email address of the administrator." encrypted="false" />
                  <add name="AuditQuery" value="SELECT * FROM dbo.Log WHERE EntryTime < 'Eval(System.DateTime.UtcNow)'" 
                    description="Query for retrieving audit records." encrypted="false" />
                </database>
              </categorizedSettings>
            </configuration>
            ]]>
            </code>
            </remarks>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElement.Description">
            <summary>
            Gets or sets the description of the setting.
            </summary>
            <returns>The description of the setting.</returns>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElement.Encrypted">
            <summary>
            Gets or sets a boolean value that indicates whether the setting value is to be encrypted.
            </summary>
            <returns>true, if the setting value is to be encrypted; otherwise false.</returns>
        </member>
        <member name="P:TVA.Configuration.CategorizedSettingsElement.Scope">
            <summary>
            Gets or sets the <see cref="T:TVA.Configuration.SettingScope"/>.
            </summary>
        </member>
        <member name="T:TVA.ApplicationType">
            <summary>Specifies the type of the application.</summary>
        </member>
        <member name="F:TVA.ApplicationType.Unknown">
            <summary>
            Application is of unknown type.
            </summary>
        </member>
        <member name="F:TVA.ApplicationType.Native">
            <summary>
            Application doesn't require a subsystem.
            </summary>
        </member>
        <member name="F:TVA.ApplicationType.WindowsGui">
            <summary>
            Application runs in the Windows GUI subsystem.
            </summary>
        </member>
        <member name="F:TVA.ApplicationType.WindowsCui">
            <summary>
            Application runs in the Windows character subsystem.
            </summary>
        </member>
        <member name="F:TVA.ApplicationType.OS2Cui">
            <summary>
            Application runs in the OS/2 character subsystem.
            </summary>
        </member>
        <member name="F:TVA.ApplicationType.PosixCui">
            <summary>
            Application runs in the Posix character subsystem.
            </summary>
        </member>
        <member name="F:TVA.ApplicationType.NativeWindows">
            <summary>
            Application is a native Win9x driver.
            </summary>
        </member>
        <member name="F:TVA.ApplicationType.WindowsCEGui">
            <summary>
            Application runs in the Windows CE subsystem.
            </summary>
        </member>
        <member name="F:TVA.ApplicationType.Web">
            <summary>
            The application is a web site or web application.
            </summary>
        </member>
        <member name="T:TVA.Common">
            <summary>
            Defines common global functions.
            </summary>
        </member>
        <member name="M:TVA.Common.IIf``1(System.Boolean,``0,``0)">
            <summary>Returns one of two strongly-typed objects.</summary>
            <returns>One of two objects, depending on the evaluation of given expression.</returns>
            <param name="expression">The expression you want to evaluate.</param>
            <param name="truePart">Returned if expression evaluates to True.</param>
            <param name="falsePart">Returned if expression evaluates to False.</param>
            <typeparam name="T">Return type used for immediate expression</typeparam>
            <remarks>
            <para>This function acts as a strongly-typed immediate if (a.k.a. inline if).</para>
            <para>It is expected that this function will only be used in Visual Basic.NET as a strongly-typed IIf replacement.</para>
            </remarks>
        </member>
        <member name="M:TVA.Common.CreateArray``1(System.Int32)">
            <summary>Creates a strongly-typed Array.</summary>
            <returns>New array of specified type.</returns>
            <param name="length">Desired length of new array.</param>
            <typeparam name="T">Return type for new array.</typeparam>
            <remarks>
            <para>It is expected that this function will only be used in Visual Basic.NET.</para>
            <para>
            The Array.CreateInstance provides better performance and more direct CLR access for array creation (not to
            mention less confusion on the matter of array lengths) in VB.NET, however the returned System.Array is not
            typed properly. This function properly casts the return array based on the the type specification helping
            when Option Strict is enabled.
            </para>
            </remarks>
            <example>
            <code language="VB">
                Dim buffer As Byte() = CreateArray(Of Byte)(12)
                Dim matrix As Integer()() = CreateArray(Of Integer())(10)
            </code>
            </example>
        </member>
        <member name="M:TVA.Common.CreateArray``1(System.Int32,``0)">
            <summary>Creates a strongly-typed Array with an initial value parameter.</summary>
            <returns>New array of specified type.</returns>
            <param name="length">Desired length of new array.</param>
            <param name="initialValue">Value used to initialize all array elements.</param>
            <typeparam name="T">Return type for new array.</typeparam>
            <remarks>
            It is expected that this function will only be used in Visual Basic.NET.
            </remarks>
            <example>
            <code language="VB">
                Dim elements As Integer() = CreateArray(12, -1)
                Dim names As String() = CreateArray(100, "undefined")
            </code>
            </example>
        </member>
        <member name="M:TVA.Common.GetApplicationType">
            <summary>
            Gets the type of the currently executing application.
            </summary>
            <returns>One of the <see cref="T:TVA.ApplicationType"/> values.</returns>
        </member>
        <member name="M:TVA.Common.ToNonNullString``1(``0)">
            <summary>
            Converts value to string, null objects (or DBNull objects) will return an empty string (""). 
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of <see cref="T:System.Object"/> to convert to string.</typeparam>
            <param name="value">Value to convert to string.</param>
            <returns><paramref name="value"/> as a string; if <paramref name="value"/> is null, empty string ("") will be returned. </returns>
        </member>
        <member name="M:TVA.Common.ToNonNullString``1(``0,System.String)">
            <summary>
            Converts value to string, null objects (or DBNull objects) will return specified <paramref name="nonNullValue"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of <see cref="T:System.Object"/> to convert to string.</typeparam>
            <param name="value">Value to convert to string.</param>
            <param name="nonNullValue"><see cref="T:System.String"/> to return if <paramref name="value"/> is null.</param>
            <returns><paramref name="value"/> as a string; if <paramref name="value"/> is null, <paramref name="nonNullValue"/> will be returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="nonNullValue"/> cannot be null.</exception>
        </member>
        <member name="M:TVA.Common.ToNonNullString(System.String)">
            <summary>
            Makes sure returned string value is not null; if this string is null, empty string ("") will be returned. 
            </summary>
            <param name="value"><see cref="T:System.String"/> to verify is not null.</param>
            <returns><see cref="T:System.String"/> value; if <paramref name="value"/> is null, empty string ("") will be returned. </returns>
        </member>
        <member name="M:TVA.Common.TypeConvertToString(System.Object)">
            <summary>
            Converts <paramref name="value"/> to a <see cref="T:System.String"/> using an appropriate <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <param name="value">Value to convert to a <see cref="T:System.String"/>.</param>
            <returns><paramref name="value"/> converted to a <see cref="T:System.String"/>.</returns>
            <remarks>
            <para>
            If <see cref="T:System.ComponentModel.TypeConverter"/> fails, the value's <c>ToString()</c> value will be returned.
            Returned value will never be null, if no value exists an empty string ("") will be returned.
            </para>
            <para>
            You can use the <see cref="M:TVA.StringExtensions.ConvertToType``1(System.String)"/> string extension method to
            convert the string back to its original <see cref="T:System.Type"/>.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Common.TypeConvertToString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <paramref name="value"/> to a <see cref="T:System.String"/> using an appropriate <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <param name="value">Value to convert to a <see cref="T:System.String"/>.</param>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/> to use for the conversion.</param>
            <returns><paramref name="value"/> converted to a <see cref="T:System.String"/>.</returns>
            <remarks>
            <para>
            If <see cref="T:System.ComponentModel.TypeConverter"/> fails, the value's <c>ToString()</c> value will be returned.
            Returned value will never be null, if no value exists an empty string ("") will be returned.
            </para>
            <para>
            You can use the <see cref="M:TVA.StringExtensions.ConvertToType``1(System.String)"/> string extension method to
            convert the string back to its original <see cref="T:System.Type"/>.
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Common.IsDefaultValue(System.Object)">
            <summary>Determines if given item is equal to its default value (e.g., null or 0.0).</summary>
            <param name="item">Object to evaluate.</param>
            <returns>Result of evaluation as a <see cref="T:System.Boolean"/>.</returns>
            <remarks>
            Native types default to zero, not null, therefore this can be used to evaulate if an item is its default (i.e., uninitialized) value.
            </remarks>
        </member>
        <member name="M:TVA.Common.IsReference(System.Object)">
            <summary>Determines if given item is a reference type.</summary>
            <param name="item">Object to evaluate.</param>
            <returns>Result of evaluation as a <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:TVA.Common.IsNonStringReference(System.Object)">
            <summary>Determines if given item is a reference type but not a string.</summary>
            <param name="item">Object to evaluate.</param>
            <returns>Result of evaluation as a <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:TVA.Common.IsNumeric(System.Object)">
            <summary>Determines if given item is numeric.</summary>
            <param name="item">Object to evaluate.</param>
            <returns>Result of evaluation as a <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:TVA.Common.Min``1(``0[])">
            <summary>Returns the smallest item from a list of parameters.</summary>
            <typeparam name="T">Return type <see cref="T:System.Type"/> that is the minimum value in the <paramref name="itemList"/>.</typeparam>
            <param name="itemList">A variable number of parameters of the specified type.</param>
            <returns>Result is the minimum value of type <see cref="T:System.Type"/> in the <paramref name="itemList"/>.</returns>
        </member>
        <member name="M:TVA.Common.Max``1(``0[])">
            <summary>Returns the largest item from a list of parameters.</summary>
            <typeparam name="T">Return type <see cref="T:System.Type"/> that is the maximum value in the <paramref name="itemList"/>.</typeparam>
            <param name="itemList">A variable number of parameters of the specified type .</param>
            <returns>Result is the maximum value of type <see cref="T:System.Type"/> in the <paramref name="itemList"/>.</returns>
        </member>
        <member name="P:TVA.Common.SystemTimer">
            <summary>Gets a high-resolution number of seconds, including fractional seconds, that have
            elapsed since 12:00:00 midnight, January 1, 0001.</summary>
        </member>
        <member name="T:TVA.Units.Current">
            <summary>Represents an electric current measurement, in amperes, as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing a current in amperes; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other current representations, specifically
            abampere (a.k.a., an electromagnetic unit) and statampere (a.k.a., esu per second). Metric conversions are handled
            simply by applying the needed <see cref="T:TVA.Units.SI"/> conversion factor, for example:
            <example>
            Convert current, in amperes, to kiloamperes:
            <code>
            public double GetKiloamperes(Current amperes)
            {
                return amperes / SI.Kilo;
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Current.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Current"/>.
            </summary>
            <param name="value">New current value in amperes.</param>
        </member>
        <member name="M:TVA.Units.Current.ToAbamperes">
            <summary>
            Gets the <see cref="T:TVA.Units.Current"/> value in abamperes.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Current"/> in abamperes.</returns>
        </member>
        <member name="M:TVA.Units.Current.ToStatamperes">
            <summary>
            Gets the <see cref="T:TVA.Units.Current"/> value in statamperes.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Current"/> in statamperes.</returns>
        </member>
        <member name="M:TVA.Units.Current.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Current"/>.</exception>
        </member>
        <member name="M:TVA.Units.Current.CompareTo(TVA.Units.Current)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Current"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Current"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Current"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.Equals(TVA.Units.Current)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Current"/> value.
            </summary>
            <param name="obj">A <see cref="T:TVA.Units.Current"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Current.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Current"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            A <see cref="T:TVA.Units.Current"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Current.MinValue"/> or greater than <see cref="F:TVA.Units.Current.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Current.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Current"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Current"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Current.MinValue"/> or greater than <see cref="F:TVA.Units.Current.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Current.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Current"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Current"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Current.MinValue"/> or greater than <see cref="F:TVA.Units.Current.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Current.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Current"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            A <see cref="T:TVA.Units.Current"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Current.MinValue"/> or greater than <see cref="F:TVA.Units.Current.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Current.TryParse(System.String,TVA.Units.Current@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Current"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Current"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paraampere is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Current.MinValue"/> or greater than <see cref="F:TVA.Units.Current.MaxValue"/>.
            This paraampere is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Current.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Current@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Current"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Current"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s paraampere is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Current.MinValue"/> or
            greater than <see cref="F:TVA.Units.Current.MaxValue"/>. This paraampere is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Current.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Equality(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Inequality(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_LessThan(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_LessThanOrEqual(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_GreaterThan(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_GreaterThanOrEqual(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Implicit(System.Double)~TVA.Units.Current">
            <summary>
            Implicitly converts value, represented in amperes, to a <see cref="T:TVA.Units.Current"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:TVA.Units.Current"/> object as the result.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Implicit(TVA.Units.Current)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Current"/>, represented in amperes, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">A <see cref="T:TVA.Units.Current"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value as the result.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Modulus(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Current"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Addition(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Current"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Subtraction(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Current"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Multiply(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Current"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Division(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:TVA.Units.Current"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Current.op_Exponent(TVA.Units.Current,TVA.Units.Current)">
            <summary>
            Returns result of first value raised to current of second value.
            </summary>
            <param name="value1">A <see cref="T:TVA.Units.Current"/> object as the left hand operand.</param>
            <param name="value2">A <see cref="T:TVA.Units.Current"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result of the operation.</returns>
        </member>
        <member name="F:TVA.Units.Current.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Current"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Current.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Current"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Current.FromAbamperes(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Current"/> value from the specified <paramref name="value"/> in abamperes.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Current"/> value in abamperes.</param>
            <returns>New <see cref="T:TVA.Units.Current"/> object from the specified <paramref name="value"/> in abamperes.</returns>
        </member>
        <member name="M:TVA.Units.Current.FromStatamperes(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Current"/> value from the specified <paramref name="value"/> in statamperes.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Current"/> value in statamperes.</param>
            <returns>New <see cref="T:TVA.Units.Current"/> object from the specified <paramref name="value"/> in statamperes.</returns>
        </member>
        <member name="T:TVA.Scheduling.Schedule">
            <summary>
            Represents a schedule defined using UNIX crontab syntax.
            </summary>
            <remarks>
            <para>
            Operators:
            </para>
            <para>
            There are several ways of specifying multiple date/time values in a field:
            <list type="bullet">
            <item>
                <description>
                    The comma (',') operator specifies a list of values, for example: "1,3,4,7,8"
                </description>
            </item>
            <item>
                <description>
                    The dash ('-') operator specifies a range of values, for example: "1-6",
                    which is equivalent to "1,2,3,4,5,6"
                </description>
            </item>
            <item>
                <description>
                    The asterisk ('*') operator specifies all possible values for a field.
                    For example, an asterisk in the hour time field would be equivalent to
                    'every hour' (subject to matching other specified fields).
                </description>
            </item>
            <item>
                <description>
                    The slash ('/') operator (called "step"), which can be used to skip a given
                    number of values. For example, "*/3" in the hour time field is equivalent
                    to "0,3,6,9,12,15,18,21". So "*" specifies 'every hour' but the "*/3" means
                    only those hours divisible by 3.
                </description>
            </item>
            </list>
            </para>
            <para>
            Fields:
            </para>
            <para>
            <code>
                +---------------- minute (0 - 59)
                |  +------------- hour (0 - 23)
                |  |  +---------- day of month (1 - 31)
                |  |  |  +------- month (1 - 12)
                |  |  |  |  +---- day of week (0 - 7) (Sunday=0 or 7)
                |  |  |  |  |
                *  *  *  *  *
            </code>
            </para>
            <para>
            Each of the patterns from the first five fields may be either * (an asterisk), which matches all legal values,
            or a list of elements separated by commas. 
            </para>
            <para>
            See <a href="http://en.wikipedia.org/wiki/Cron" target="_blank">http://en.wikipedia.org/wiki/Cron</a> for more information.
            </para>
            </remarks>
            <seealso cref="T:TVA.Scheduling.SchedulePart"/>
            <seealso cref="T:TVA.Scheduling.ScheduleManager"/>
        </member>
        <member name="M:TVA.Scheduling.Schedule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Scheduling.Schedule"/> class.
            </summary>
        </member>
        <member name="M:TVA.Scheduling.Schedule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Scheduling.Schedule"/> class.
            </summary>
            <param name="name">Name of the schedule.</param>
            <remarks>Default <see cref="P:TVA.Scheduling.Schedule.Rule"/> of '* * * * *' is used.</remarks>
        </member>
        <member name="M:TVA.Scheduling.Schedule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Scheduling.Schedule"/> class.
            </summary>
            <param name="name">Name of the schedule.</param>
            <param name="rule">Rule formated in UNIX crontab syntax.</param>
        </member>
        <member name="M:TVA.Scheduling.Schedule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Scheduling.Schedule"/> class.
            </summary>
            <param name="name">Name of the schedule.</param>
            <param name="rule">Rule formated in UNIX crontab syntax.</param>
            <param name="description">Description of defined schedule.</param>
        </member>
        <member name="M:TVA.Scheduling.Schedule.IsDue">
            <summary>
            Checks whether the <see cref="T:TVA.Scheduling.Schedule"/> is due at the present system time.
            </summary>
            <returns>true if the <see cref="T:TVA.Scheduling.Schedule"/> is due at the present system time; otherwise false.</returns>
        </member>
        <member name="M:TVA.Scheduling.Schedule.GetHashCode">
            <summary>
            Gets a hash code for the <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <returns>An <see cref="T:System.Int32"/> based hashcode.</returns>
        </member>
        <member name="M:TVA.Scheduling.Schedule.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:TVA.Scheduling.Schedule"/> is equal to the current <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <param name="obj">The <see cref="T:TVA.Scheduling.Schedule"/> to compare with the current <see cref="T:TVA.Scheduling.Schedule"/>.</param>
            <returns>
            true if the specified <see cref="T:TVA.Scheduling.Schedule"/> is equal to the current <see cref="T:TVA.Scheduling.Schedule"/>; otherwise false
            </returns>
        </member>
        <member name="M:TVA.Scheduling.Schedule.ToString">
            <summary>
            Gets the string representation of <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <returns>String representation of <see cref="T:TVA.Scheduling.Schedule"/>.</returns>
        </member>
        <member name="P:TVA.Scheduling.Schedule.Name">
            <summary>
            Gets or sets the name of the <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
        </member>
        <member name="P:TVA.Scheduling.Schedule.Rule">
            <summary>
            Gets or sets the rule of the <see cref="T:TVA.Scheduling.Schedule"/> defined in UNIX crontab syntax.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is null or empty string.</exception>
            <exception cref="T:System.ArgumentException">The number of <see cref="T:TVA.Scheduling.SchedulePart"/> in the rule is not exactly 5.</exception>
        </member>
        <member name="P:TVA.Scheduling.Schedule.Description">
            <summary>
            Gets or sets a description of the <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
            <remarks>A default description is created automatically when the <see cref="P:TVA.Scheduling.Schedule.Rule"/> is set.</remarks>
        </member>
        <member name="P:TVA.Scheduling.Schedule.MinutePart">
            <summary>
            Gets the <see cref="T:TVA.Scheduling.SchedulePart"/> of the <see cref="T:TVA.Scheduling.Schedule"/> that represents minute <see cref="T:TVA.Scheduling.DateTimePart"/>.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.Schedule.HourPart">
            <summary>
            Gets the <see cref="T:TVA.Scheduling.SchedulePart"/> of the <see cref="T:TVA.Scheduling.Schedule"/> that represents hour <see cref="T:TVA.Scheduling.DateTimePart"/>.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.Schedule.DayPart">
            <summary>
            Gets the <see cref="T:TVA.Scheduling.SchedulePart"/> of the <see cref="T:TVA.Scheduling.Schedule"/> that represents day of month <see cref="T:TVA.Scheduling.DateTimePart"/>.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.Schedule.MonthPart">
            <summary>
            Gets the <see cref="T:TVA.Scheduling.SchedulePart"/> of the <see cref="T:TVA.Scheduling.Schedule"/> that represents month <see cref="T:TVA.Scheduling.DateTimePart"/>.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.Schedule.DaysOfWeekPart">
            <summary>
            Gets the <see cref="T:TVA.Scheduling.SchedulePart"/> of the <see cref="T:TVA.Scheduling.Schedule"/> that represents day of week <see cref="T:TVA.Scheduling.DateTimePart"/>.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.Schedule.LastDueAt">
            <summary>
            Gets the <see cref="T:System.DateTime"/> when the <see cref="T:TVA.Scheduling.Schedule"/> was last due.
            </summary>
        </member>
        <member name="P:TVA.Scheduling.Schedule.Status">
            <summary>
            Gets the current status of the <see cref="T:TVA.Scheduling.Schedule"/>.
            </summary>
        </member>
        <member name="T:TVA.Reflection.MemberInfoExtensions">
            <summary>
            Defines extensions methods related to <see cref="T:System.Reflection.MemberInfo"/> objects and derived types (e.g., <see cref="T:System.Reflection.FieldInfo"/>,
            <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.MethodInfo"/>, etc.)
            </summary>
        </member>
        <member name="M:TVA.Reflection.MemberInfoExtensions.TryGetAttribute``2(``0,``1@)">
            <summary>
            Attempts to get the specified <paramref name="attribute"/> from a <see cref="T:System.Reflection.MemberInfo"/> object, returning <c>true</c> if it does.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> object over which to search attributes.</param>
            <param name="attribute">The <see cref="T:System.Attribute"/> that was found, if any.</param>
            <returns><c>true</c> if <paramref name="attribute"/> was found; otherwise <c>false</c>.</returns>
            <typeparam name="TMemberInfo"><see cref="T:System.Reflection.MemberInfo"/> or derived type to get <see cref="T:System.Attribute"/> from.</typeparam>
            <typeparam name="TAttribute"><see cref="T:System.Type"/> of <see cref="T:System.Attribute"/> to attempt to retrieve.</typeparam>
            <remarks>
            If more than of the same type of attribute exists on the member, only the first one is returned.
            </remarks>
        </member>
        <member name="M:TVA.Reflection.MemberInfoExtensions.TryGetAttributes``2(``0,``1[]@)">
            <summary>
            Attempts to get the specified <paramref name="attributes"/> from a <see cref="T:System.Reflection.MemberInfo"/> object, returning <c>true</c> if it does.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> object over which to search attributes.</param>
            <param name="attributes">The array of <see cref="T:System.Attribute"/> objects that were found, if any.</param>
            <returns><c>true</c> if <paramref name="attributes"/> was found; otherwise <c>false</c>.</returns>
            <typeparam name="TMemberInfo"><see cref="T:System.Reflection.MemberInfo"/> or derived type to get <see cref="T:System.Attribute"/> from.</typeparam>
            <typeparam name="TAttribute"><see cref="T:System.Type"/> of <see cref="T:System.Attribute"/> to attempt to retrieve.</typeparam>
        </member>
        <member name="T:TVA.Reflection.AssemblyInfo">
            <summary>Assembly Information Class.</summary>
        </member>
        <member name="M:TVA.Reflection.AssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>Initializes a new instance of the <see cref="T:TVA.Reflection.AssemblyInfo"/> class.</summary>
            <param name="assemblyInstance">An <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> object.</param>
        </member>
        <member name="M:TVA.Reflection.AssemblyInfo.GetAttributes">
            <summary>Gets a collection of assembly attributes exposed by the assembly.</summary>
            <returns>A System.Specialized.KeyValueCollection of assembly attributes.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyInfo.GetCustomAttribute(System.Type)">
            <summary>Gets the specified assembly attribute if it is exposed by the assembly.</summary>
            <param name="attributeType">Type of the attribute to get.</param>
            <returns>The requested assembly attribute if it exists; otherwise null.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyInfo.GetEmbeddedResource(System.String)">
            <summary>Gets the specified embedded resource from the assembly.</summary>
            <param name="resourceName">The full name (including the namespace) of the embedded resource to get.</param>
            <returns>The embedded resource.</returns>
        </member>
        <member name="M:TVA.Reflection.AssemblyInfo.LoadAssemblyFromResource(System.String)">
            <summary>Loads the specified assembly that is embedded as a resource in the assembly.</summary>
            <param name="assemblyName">Name of the assembly to load.</param>
            <remarks>This cannot be used to load TVA.Core itself.</remarks>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Assembly">
            <summary>
            Gets the underlying <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> being represented by this <see cref="T:TVA.Reflection.AssemblyInfo"/> object.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Title">
            <summary>
            Gets the title information of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Description">
            <summary>
            Gets the description information of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Company">
            <summary>
            Gets the company name information of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Product">
            <summary>
            Gets the product name information of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Copyright">
            <summary>
            Gets the copyright information of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Trademark">
            <summary>
            Gets the trademark information of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Configuration">
            <summary>
            Gets the configuration information of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.DelaySign">
            <summary>
            Gets a boolean value indicating if the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> has been built as delay-signed.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.InformationalVersion">
            <summary>
            Gets the version information of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.KeyFile">
            <summary>
            Gets the name of the file containing the key pair used to generate a strong name for the attributed <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.CultureName">
            <summary>
            Gets the culture name of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.SatelliteContractVersion">
            <summary>
            Gets the assembly version used to instruct the System.Resources.ResourceManager to ask for a particular
            version of a satellite assembly to simplify updates of the main assembly of an application.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.ComCompatibleVersion">
            <summary>
            Gets the string representing the assembly version used to indicate to a COM client that all classes
            in the current version of the assembly are compatible with classes in an earlier version of the assembly.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.ComVisible">
            <summary>
            Gets a boolean value indicating if the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> is exposed to COM.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Guid">
            <summary>
            Gets the GUID that is used as an ID if the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> is exposed to COM.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.TypeLibVersion">
            <summary>
            Gets the string representing the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> version number in MajorVersion.MinorVersion format.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.CLSCompliant">
            <summary>
            Gets a boolean value indicating whether the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> is CLS-compliant.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Location">
            <summary>
            Gets the path or UNC location of the loaded file that contains the manifest.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.CodeBase">
            <summary>
            Gets the location of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> as specified originally.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.FullName">
            <summary>
            Gets the display name of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Name">
            <summary>
            Gets the simple, unencrypted name of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.Version">
            <summary>
            Gets the major, minor, revision, and build numbers of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.ImageRuntimeVersion">
            <summary>
            Gets the string representing the version of the common language runtime (CLR) saved in the file
            containing the manifest.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.GACLoaded">
            <summary>
            Gets a boolean value indicating whether the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> was loaded from the global assembly cache.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.BuildDate">
            <summary>
            Gets the date and time when the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/> was built.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.RootNamespace">
            <summary>
            Gets the root namespace of the <see cref="P:TVA.Reflection.AssemblyInfo.Assembly"/>.
            </summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.CallingAssembly">
            <summary>Gets the <see cref="T:TVA.Reflection.AssemblyInfo"/> object of the assembly that invoked the currently executing method.</summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.EntryAssembly">
            <summary>Gets the <see cref="T:TVA.Reflection.AssemblyInfo"/> object of the process executable in the default application domain.</summary>
        </member>
        <member name="P:TVA.Reflection.AssemblyInfo.ExecutingAssembly">
            <summary>Gets the <see cref="T:TVA.Reflection.AssemblyInfo"/> object of the assembly that contains the code that is currently executing.</summary>
        </member>
        <member name="T:TVA.Parsing.NamespaceDoc">
            <summary>
            Contains classes used to simplify, standardize and automate any kind of stream based parsing operation.
            </summary>
        </member>
        <member name="T:TVA.NumericalAnalysis.NamespaceDoc">
            <summary>
            Contains classes and extension functions used to calculate common numerical operations such as curve fits and standard deviations.
            </summary>
        </member>
        <member name="T:TVA.Media.WaveFormatChunk">
            <summary>
            Represents the format chunk in a WAVE media format file.
            </summary>
        </member>
        <member name="F:TVA.Media.WaveFormatChunk.RiffTypeID">
            <summary>
            RIFF type ID for wave format chunk (i.e., "fmt ").
            </summary>
        </member>
        <member name="M:TVA.Media.WaveFormatChunk.#ctor(System.Int32,System.Int16,System.Int16,System.UInt16)">
            <summary>
            Constructs a new <see cref="T:TVA.Media.WaveFormatChunk"/> using the specified audio parameters.
            </summary>
            <param name="sampleRate">Sample rate for the <see cref="T:TVA.Media.WaveFormatChunk"/>.</param>
            <param name="bitsPerSample">Bits per sample for the <see cref="T:TVA.Media.WaveFormatChunk"/>.</param>
            <param name="channels">Audio channels for the <see cref="T:TVA.Media.WaveFormatChunk"/>.</param>
            <param name="audioFormat">Audio format for the <see cref="T:TVA.Media.WaveFormatChunk"/>.</param>
            <exception cref="T:System.IO.InvalidDataException">Invalid bit rate specified - wave file bit rates must be a multiple of 8.</exception>
        </member>
        <member name="M:TVA.Media.WaveFormatChunk.#ctor(TVA.Media.RiffChunk,System.IO.Stream)">
            <summary>Reads a new <see cref="T:TVA.Media.WaveFormatChunk"/> from the specified stream.</summary>
            <param name="preRead">Pre-parsed <see cref="T:TVA.Media.RiffChunk"/> header.</param>
            <param name="source">Source stream to read data from.</param>
            <exception cref="T:System.InvalidOperationException">WAVE format or extra parameters section too small, wave file corrupted.</exception>
            <exception cref="T:System.IO.InvalidDataException">Invalid bit rate encountered - wave file bit rates must be a multiple of 8.</exception>
        </member>
        <member name="M:TVA.Media.WaveFormatChunk.Initialize(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses <see cref="T:TVA.Media.WaveFormatChunk"/> object from <paramref name="binaryImage"/>.
            </summary>
            <param name="binaryImage">Binary image to be used for initialization.</param>
            <param name="startIndex">0-based starting index in the <paramref name="binaryImage"/> to be used for initialization.</param>
            <param name="length">Valid number of bytes within binary image.</param>
            <returns>The number of bytes used for initialization in the <paramref name="binaryImage"/> (i.e., the number of bytes parsed).</returns>
            <exception cref="T:System.InvalidOperationException">WAVE format section too small, wave file corrupted.</exception>
            <exception cref="T:System.IO.InvalidDataException">Invalid bit rate encountered - wave file bit rates must be a multiple of 8.</exception>
        </member>
        <member name="M:TVA.Media.WaveFormatChunk.Clone">
            <summary>
            Creates a copy of the <see cref="T:TVA.Media.WaveFormatChunk"/>.
            </summary>
            <returns>A new copy of the <see cref="T:TVA.Media.WaveFormatChunk"/>.</returns>
        </member>
        <member name="M:TVA.Media.WaveFormatChunk.GetSampleTypeCode">
            <summary>
            Determines sample data type code based on defined <see cref="P:TVA.Media.WaveFormatChunk.BitsPerSample"/>
            and <see cref="P:TVA.Media.WaveFormatChunk.AudioFormat"/>.
            </summary>
            <returns>
            Sample type code based on defined <see cref="P:TVA.Media.WaveFormatChunk.BitsPerSample"/> and
            <see cref="P:TVA.Media.WaveFormatChunk.AudioFormat"/>.
            </returns>
        </member>
        <member name="M:TVA.Media.WaveFormatChunk.CastSample(System.Double)">
            <summary>
            Casts sample value to its equivalent native type based on defined <see cref="P:TVA.Media.WaveFormatChunk.BitsPerSample"/>
            and <see cref="P:TVA.Media.WaveFormatChunk.AudioFormat"/>.
            </summary>
            <param name="sample">Sample value.</param>
            <returns>
            Sample value cast to its equivalent native type based on defined <see cref="P:TVA.Media.WaveFormatChunk.BitsPerSample"/>
            and <see cref="P:TVA.Media.WaveFormatChunk.AudioFormat"/>.
            </returns>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.ChunkSize">
            <summary>Size of <see cref="T:TVA.Media.WaveFormatChunk"/>.</summary>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.BinaryImage">
            <summary>
            Returns a binary representation of this <see cref="T:TVA.Media.WaveFormatChunk"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.BinaryLength">
            <summary>
            Gets the length of <see cref="T:TVA.Media.WaveFormatChunk"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.AudioFormat">
            <summary>
            Gets or sets audio format used by the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            PCM = 1 (i.e., linear quantization), values other than 1 typically indicate some form of compression.
            See <see cref="T:TVA.Media.WaveFormat"/> enumeration for more details.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.Channels">
            <summary>
            Gets or sets number of audio channels in the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            This property defines the number of channels (e.g., mono = 1, stereo = 2, etc.) defined
            in each sample block. See <see cref="T:TVA.Media.DataChannels"/> enumeration for more details.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.SampleRate">
            <summary>
            Gets or sets the sample rate (i.e., the number of samples per second) defined in the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            This property defines the number of samples per second defined in each second of data in
            the <see cref="T:TVA.Media.WaveFile"/>.  See <see cref="P:TVA.Media.WaveFormatChunk.SampleRate"/> enumeraion for more details.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.ByteRate">
            <summary>
            Gets or sets the byte rate used for buffer estimation.
            </summary>
            <remarks>
            <para>
            This property is not usually changed.  It will be automatically calculated for new wave files.
            </para>
            <para>
            This is typically just the arithmetic result of:
            <see cref="P:TVA.Media.WaveFormatChunk.SampleRate"/> * <see cref="P:TVA.Media.WaveFormatChunk.Channels"/> * <see cref="P:TVA.Media.WaveFormatChunk.BitsPerSample"/> / 8.
            However, this value can be changed as needed to accomodate better buffer estimations during
            data read cycle.
            </para>
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.BlockAlignment">
            <summary>
            Gets or sets the block size of a complete sample of data (i.e., samples for all channels of data at
            one instant in time).
            </summary>
            <remarks>
            <para>
            This property is not usually changed.  It will be automatically calculated for new wave files.
            </para>
            <para>
            This is typically just the arithmetic result of:
            <see cref="P:TVA.Media.WaveFormatChunk.Channels"/> * <see cref="P:TVA.Media.WaveFormatChunk.BitsPerSample"/> / 8.
            However, this value can be changed as needed to accomodate even block-alignment of non-standard
            <see cref="P:TVA.Media.WaveFormatChunk.BitsPerSample"/> values.
            </para>
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.BitsPerSample">
            <summary>
            Gets or sets number of bits-per-sample in the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            This property defines the number of bits-per-sample (e.g., 8, 16, 24, 32, etc.) used
            by each sample in a block of samples - effectively the data sample size. See
            <see cref="P:TVA.Media.WaveFormatChunk.BitsPerSample"/> enumeration for more details.
            </remarks>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.ExtraParametersSize">
            <summary>
            Gets the size of the <see cref="P:TVA.Media.WaveFormatChunk.ExtraParameters"/> buffer, if defined.
            </summary>
        </member>
        <member name="P:TVA.Media.WaveFormatChunk.ExtraParameters">
            <summary>
            Gets or sets any extra parameters defined in the format header of the <see cref="T:TVA.Media.WaveFile"/>.
            </summary>
            <remarks>
            See the <see cref="T:TVA.Media.WaveFormatExtensible"/> class for an example of usage of this property.
            </remarks>
        </member>
        <member name="T:TVA.IO.FilePath">
            <summary>
            Contains File and Path manipulation methods.
            </summary>
        </member>
        <member name="M:TVA.IO.FilePath.ConnectToNetworkShare(System.String,System.String,System.String,System.String)">
            <summary>
            Connects to a network share with the specified user's credentials.
            </summary>
            <param name="sharename">UNC share name to connect to.</param>
            <param name="username">Username to use for connection.</param>
            <param name="password">Password to use for connection.</param>
            <param name="domain">Domain name to use for connetion. Specify the computer name for local system accounts.</param>
        </member>
        <member name="M:TVA.IO.FilePath.DisconnectFromNetworkShare(System.String)">
            <summary>
            Disconnects the specified network share.
            </summary>
            <param name="sharename">UNC share name to disconnect from.</param>
        </member>
        <member name="M:TVA.IO.FilePath.DisconnectFromNetworkShare(System.String,System.Boolean)">
            <summary>
            Disconnects the specified network share.
            </summary>
            <param name="sharename">UNC share name to disconnect from.</param>
            <param name="force"><c>true</c> to force a disconnect; otherwise <c>false</c>.</param>
        </member>
        <member name="M:TVA.IO.FilePath.IsFilePatternMatch(System.String[],System.String,System.Boolean)">
            <summary>
            Determines whether the specified file name matches any of the given file specs (wildcards are defined as '*' or '?' characters).
            </summary>
            <param name="fileSpecs">The file specs used for matching the specified file name.</param>
            <param name="fileName">The file name to be tested against the specified file specs for a match.</param>
            <param name="ignoreCase"><c>true</c> to specify a case-insensitive match; otherwise <c>false</c>.</param>
            <returns><c>true</c> if the specified file name matches any of the given file specs; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.IsFilePatternMatch(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether the specified file name matches the given file spec (wildcards are defined as '*' or '?' characters).
            </summary>
            <param name="fileSpec">The file spec used for matching the specified file name.</param>
            <param name="fileName">The file name to be tested against the specified file spec for a match.</param>
            <param name="ignoreCase"><c>true</c> to specify a case-insensitive match; otherwise <c>false</c>.</param>
            <returns><c>true</c> if the specified file name matches the given file spec; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.IsValidFileName(System.String)">
            <summary>
            Determines if the specified file name and path is valid.
            </summary>
            <param name="filePath">The file name with optional path to test for validity.</param>
            <returns><c>true</c> if the specified <paramref name="filePath"/> is a valid name; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.GetFileName(System.String)">
            <summary>
            Gets the file name and extension from the specified file path.
            </summary>
            <param name="filePath">The file path from which the file name and extension is to be obtained.</param>
            <returns>File name and extension if the file path has it; otherwise empty string.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.GetExtension(System.String)">
            <summary>
            Gets the extension from the specified file path.
            </summary>
            <param name="filePath">The file path from which the extension is to be obtained.</param>
            <returns>File extension.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets the file name without extension from the specified file path.
            </summary>
            <param name="filePath">The file path from which the file name is to be obtained.</param>
            <returns>File name without the extension if the file path has it; otherwise empty string.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.GetFileLength(System.String)">
            <summary>
            Gets the size of the specified file.
            </summary>
            <param name="fileName">Name of file whose size is to be retrieved.</param>
            <returns>The size of the specified file.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.GetFileList(System.String)">
            <summary>
            Gets a list of files under the specified path. Search wildcard pattern (c:\Data\*.dat) can be used for 
            including only the files matching the pattern or path wildcard pattern (c:\Data\*\*.dat) to indicate the 
            inclusion of files under all subdirectories in the list.
            </summary>
            <param name="path">The path for which a list of files is to be returned.</param>
            <returns>A list of files under the given path.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.GetFilePatternRegularExpression(System.String)">
            <summary>
            Gets a regular expression pattern that simulates wildcard matching for filenames (wildcards are defined as '*' or '?' characters).
            </summary>
            <param name="fileSpec">The file spec for which the regular expression pattern if to be generated.</param>
            <returns>Regular expression pattern that simulates wildcard matching for filenames.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.GetDirectoryName(System.String)">
            <summary>
            Gets the directory information from the specified file path.
            </summary>
            <param name="filePath">The file path from which the directory information is to be obtained.</param>
            <returns>Directory information.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.GetLastDirectoryName(System.String)">
            <summary>
            Gets the last directory name from a file path.
            </summary>
            <param name="filePath">The file path from where the last directory name is to be retrieved.</param>
            <returns>The last directory name from a file path.</returns>
            <remarks>
            <see cref="M:TVA.IO.FilePath.GetLastDirectoryName(System.String)"/> would return sub2 from c:\windows\sub2\filename.ext.
            </remarks>
        </member>
        <member name="M:TVA.IO.FilePath.GetAbsolutePath(System.String)">
            <summary>
            Gets the absolute file path for the specified file name or relative file path.
            </summary>
            <param name="filePath">File name or relative file path.</param>
            <returns>Absolute file path for the specified file name or relative file path.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.GetApplicationDataFolder">
            <summary>
            Gets the path to the folder where data related to the current application can be stored.
            </summary>
            <returns>Path to the folder where data related to the current application can be stored.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.AddPathSuffix(System.String)">
            <summary>
            Makes sure path is suffixed with standard <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
            <param name="filePath">The file path to be suffixed.</param>
            <returns>Suffixed path.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.RemovePathSuffix(System.String)">
            <summary>
            Makes sure path is not suffixed with <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.
            </summary>
            <param name="filePath">The file path to be unsuffixed.</param>
            <returns>Unsuffixed path.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.DropPathRoot(System.String)">
            <summary>
            Remove any path root present in the path.
            </summary>
            <param name="filePath">The file path whose root is to be removed.</param>
            <returns>The path with the root removed if it was present.</returns>
        </member>
        <member name="M:TVA.IO.FilePath.TrimFileName(System.String,System.Int32)">
            <summary>
            Returns a file name, for display purposes, of the specified length using "..." to indicate a longer name.
            </summary>
            <param name="fileName">The file path to be trimmed.</param>
            <param name="length">The maximum length of the trimmed file path.</param>
            <returns>Trimmed file path.</returns>
            <remarks>
            Minimum value for the <paramref name="length" /> parameter is 12. 12 will be used for any value 
            specified as less than 12.
            </remarks>
        </member>
        <member name="M:TVA.IO.FilePath.WaitForReadLock(System.String)">
            <summary>
            Waits for the default duration (5 seconds) for read access on a file.
            </summary>
            <param name="fileName">The name of the file to wait for to obtain read access.</param>
        </member>
        <member name="M:TVA.IO.FilePath.WaitForReadLock(System.String,System.Double)">
            <summary>
            Waits for read access on a file for the specified number of seconds.
            </summary>
            <param name="fileName">The name of the file to wait for to obtain read access.</param>
            <param name="secondsToWait">The time to wait for in seconds to obtain read access on a file. Set to zero to wait infinitely.</param>
        </member>
        <member name="M:TVA.IO.FilePath.WaitForWriteLock(System.String)">
            <summary>
            Waits for the default duration (5 seconds) for write access on a file.
            </summary>
            <param name="fileName">The name of the file to wait for to obtain write access.</param>
        </member>
        <member name="M:TVA.IO.FilePath.WaitForWriteLock(System.String,System.Double)">
            <summary>
            Waits for write access on a file for the specified number of seconds.
            </summary>
            <param name="fileName">The name of the file to wait for to obtain write access.</param>
            <param name="secondsToWait">The time to wait for in seconds to obtain write access on a file. Set to zero to wait infinitely.</param>
        </member>
        <member name="M:TVA.IO.FilePath.WaitTillExists(System.String)">
            <summary>
            Waits for the default duration (5 seconds) for a file to exist.
            </summary>
            <param name="fileName">The name of the file to wait for until it is created.</param>
        </member>
        <member name="M:TVA.IO.FilePath.WaitTillExists(System.String,System.Double)">
            <summary>
            Waits for a file to exist for the specified number of seconds.
            </summary>
            <param name="fileName">The name of the file to wait for until it is created.</param>
            <param name="secondsToWait">The time to wait for in seconds for the file to be created. Set to zero to wait infinitely.</param>
        </member>
        <member name="T:TVA.EventArgs`1">
            <summary>
            Represents a generic event arguments class with one data argument.
            </summary>
            <typeparam name="T">Type of data argument for this event arguments instance.</typeparam>
        </member>
        <member name="F:TVA.EventArgs`1.Argument">
            <summary>
            Gets or sets the data argument for the event using <see cref="T:TVA.EventArgs`1"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="M:TVA.EventArgs`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.EventArgs`1"/> class.
            </summary>
        </member>
        <member name="M:TVA.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.EventArgs`1"/> class.
            </summary>
            <param name="argument">The argument data for the event.</param>
        </member>
        <member name="T:TVA.EventArgs`2">
            <summary>
            Represents a generic event arguments class with two data arguments.
            </summary>
            <typeparam name="T1">The type of the first data argument for this event arguments instance.</typeparam>
            <typeparam name="T2">The type of the second data argument for this event arguments instance.</typeparam>
        </member>
        <member name="F:TVA.EventArgs`2.Argument1">
            <summary>
            Gets or sets the first data argument for the event using <see cref="T:TVA.EventArgs`2"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:TVA.EventArgs`2.Argument2">
            <summary>
            Gets or sets the second data argument for the event using <see cref="T:TVA.EventArgs`2"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="M:TVA.EventArgs`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.EventArgs`2"/> class.
            </summary>
        </member>
        <member name="M:TVA.EventArgs`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.EventArgs`2"/> class.
            </summary>
            <param name="argument1">The first data argument for the event.</param>
            <param name="argument2">The second data argument for the event.</param>
        </member>
        <member name="T:TVA.EventArgs`3">
            <summary>
            Represents a generic event arguments class with three data arguments.
            </summary>
            <typeparam name="T1">The type of the first data argument for this event arguments instance.</typeparam>
            <typeparam name="T2">The type of the second data argument for this event arguments instance.</typeparam>
            <typeparam name="T3">The type of the third data argument for this event arguments instance.</typeparam>
        </member>
        <member name="F:TVA.EventArgs`3.Argument1">
            <summary>
            Gets or sets the first data argument for the event using <see cref="T:TVA.EventArgs`3"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:TVA.EventArgs`3.Argument2">
            <summary>
            Gets or sets the second data argument for the event using <see cref="T:TVA.EventArgs`3"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:TVA.EventArgs`3.Argument3">
            <summary>
            Gets or sets the third data argument for the event using <see cref="T:TVA.EventArgs`3"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="M:TVA.EventArgs`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.EventArgs`3"/> class.
            </summary>
        </member>
        <member name="M:TVA.EventArgs`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.EventArgs`3"/> class.
            </summary>
            <param name="argument1">The first data argument for the event.</param>
            <param name="argument2">The second data argument for the event.</param>
            <param name="argument3">The third data argument for the event.</param>
        </member>
        <member name="T:TVA.EventArgs`4">
            <summary>
            Represents a generic event arguments class with three data arguments.
            </summary>
            <typeparam name="T1">The type of the first data argument for this event arguments instance.</typeparam>
            <typeparam name="T2">The type of the second data argument for this event arguments instance.</typeparam>
            <typeparam name="T3">The type of the third data argument for this event arguments instance.</typeparam>
            <typeparam name="T4">The type of the fourth data argument for this event arguments instance.</typeparam>
        </member>
        <member name="F:TVA.EventArgs`4.Argument1">
            <summary>
            Gets or sets the first data argument for the event using <see cref="T:TVA.EventArgs`4"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:TVA.EventArgs`4.Argument2">
            <summary>
            Gets or sets the second data argument for the event using <see cref="T:TVA.EventArgs`4"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:TVA.EventArgs`4.Argument3">
            <summary>
            Gets or sets the third data argument for the event using <see cref="T:TVA.EventArgs`4"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:TVA.EventArgs`4.Argument4">
            <summary>
            Gets or sets the fourth data argument for the event using <see cref="T:TVA.EventArgs`4"/> for its <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="M:TVA.EventArgs`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.EventArgs`4"/> class.
            </summary>
        </member>
        <member name="M:TVA.EventArgs`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.EventArgs`3"/> class.
            </summary>
            <param name="argument1">The first data argument for the event.</param>
            <param name="argument2">The second data argument for the event.</param>
            <param name="argument3">The third data argument for the event.</param>
            <param name="argument4">The fourth data argument for the event.</param>
        </member>
        <member name="T:TVA.Data.NamespaceDoc">
            <summary>
            Contains extension functions used to simplify and standardize database access.
            </summary>
        </member>
        <member name="T:TVA.Validation.NamespaceDoc">
            <summary>
            Contains classes that facilitate the validation of data.
            </summary>
        </member>
        <member name="T:TVA.Threading.ThreadType">
            <summary>
            Managed Thread Types
            </summary>
        </member>
        <member name="F:TVA.Threading.ThreadType.StandardThread">
            <summary>Standard thread created with public constructor</summary>
        </member>
        <member name="F:TVA.Threading.ThreadType.QueuedThread">
            <summary>Queued thread added into managed thread pool</summary>
        </member>
        <member name="T:TVA.Threading.ThreadStatus">
            <summary>
            Managed Thread States
            </summary>
        </member>
        <member name="F:TVA.Threading.ThreadStatus.Unstarted">
            <summary>Thread created, not started</summary>
        </member>
        <member name="F:TVA.Threading.ThreadStatus.Queued">
            <summary>Thread queued for execution</summary>
        </member>
        <member name="F:TVA.Threading.ThreadStatus.Started">
            <summary>Thread start requested, execution pending</summary>
        </member>
        <member name="F:TVA.Threading.ThreadStatus.Executing">
            <summary>Thread executing</summary>
        </member>
        <member name="F:TVA.Threading.ThreadStatus.Completed">
            <summary>Thread completed</summary>
        </member>
        <member name="F:TVA.Threading.ThreadStatus.Aborted">
            <summary>Thread aborted</summary>
        </member>
        <member name="T:TVA.Threading.ManagedThread">
            <summary>
            Defines a managed thread
            </summary>
            <remarks>
            This class works like any normal thread but provides the benefit of automatic tracking
            through the ManagedThreads collection, total thread runtime and the ability to run
            the thread in an alternate execution context
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThread.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the ManagedThread class.
            </summary>
            <param name="callback">A <see cref="T:System.Threading.ThreadStart"/> object.</param>
        </member>
        <member name="M:TVA.Threading.ManagedThread.#ctor(System.Threading.ParameterizedThreadStart)">
            <summary>
            Initializes a new instance of the ManagedThread class, specifying a delegate that allows an object to be passed to the thread when the thread is started.
            </summary>
            <param name="callback">A <see cref="T:System.Threading.ParameterizedThreadStart"/> object.</param>
        </member>
        <member name="M:TVA.Threading.ManagedThread.#ctor(System.Threading.ContextCallback,System.Threading.ExecutionContext)">
            <summary>
            Initializes a new instance of the ManagedThread class, specifying a delegate that allows an object to be passed to the thread when the thread is started
            and allowing the user to specify an alternate execution context for the thread.
            </summary>
            <param name="callback">A <see cref="T:System.Threading.ContextCallback"/> delgate to execute.</param>
            <param name="ctx">An <see cref="T:System.Threading.ExecutionContext"/>.</param>
        </member>
        <member name="M:TVA.Threading.ManagedThread.Abort">
            <summary>
            Raises a ThreadAbortException in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.
            </summary>
        </member>
        <member name="M:TVA.Threading.ManagedThread.Abort(System.Object)">
            <summary>
            Raises a ThreadAbortException in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.
            </summary>
            <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</param>
        </member>
        <member name="M:TVA.Threading.ManagedThread.Start">
            <summary>
            Causes a thread to be scheduled for execution.
            </summary>
        </member>
        <member name="M:TVA.Threading.ManagedThread.Start(System.Object)">
            <summary>
            Causes a thread to be scheduled for execution.
            </summary>
            <param name="parameter">An object that contains data to be used by the method the thread executes.</param>
        </member>
        <member name="M:TVA.Threading.ManagedThread.Join">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <remarks>
            This is only available for standard threads - queued threads don't have an associated thread until they are executing.
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThread.Join(System.Int32)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate. </param>
            <returns>true if the thread has terminated; false if the thread has not terminated after the amount of time specified by the millisecondsTimeout parameter has elapsed.</returns>
            <remarks>
            This is only available for standard threads - queued threads don't have an associated thread until they are executing.
            </remarks>
        </member>
        <member name="M:TVA.Threading.ManagedThread.Join(System.TimeSpan)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <param name="timeout">A TimeSpan set to the amount of time to wait for the thread to terminate. </param>
            <returns>true if the thread terminated; false if the thread has not terminated after the amount of time specified by the timeout parameter has elapsed.</returns>
            <remarks>
            This is only available for standard threads - queued threads don't have an associated thread until they are executing.
            </remarks>
        </member>
        <member name="P:TVA.Threading.ManagedThread.State">
            <summary>
            An object containing data to be used by the thread's execution method.
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThread.Tag">
            <summary>
            An object that allows additional user defined information to be tracked along with this thread.
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThread.Type">
            <summary>
            Returns the managed thread type (either StandardThread or QueuedThread)
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThread.Status">
            <summary>
            Gets a value containing the curretn status of the current thread.
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThread.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread.
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThread.Name">
            <summary>
            Gets or sets the name of the thread.
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThread.StartTime">
            <summary>
            Get the time, in ticks, that the thread started executing
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThread.StopTime">
            <summary>
            Get the time, in ticks, that the thread finished executing
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThread.RunTime">
            <summary>
            Gets the total amount of time, in seconds, that the managed thread has been active.
            </summary>
        </member>
        <member name="P:TVA.Threading.ManagedThread.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a thread.
            </summary>
            <returns>One of the ThreadPriority values. The default value is Normal.</returns>
            <remarks>
            Changing of this value is only available to standard threads - you can't change the priorty of queued threads since they are already
            allocated and owned by the .NET thread pool.
            </remarks>
        </member>
        <member name="T:TVA.StringExtensions">
            <summary>Defines extension functions related to string manipulation.</summary>
        </member>
        <member name="M:TVA.StringExtensions.ParseBoolean(System.String)">
            <summary>
            Parses a string intended to represent a boolean value.
            </summary>
            <param name="value">String representing a boolean value.</param>
            <returns>Parsed boolean value.</returns>
            <remarks>
            This function, unlike Boolean.Parse, correctly parses a boolean value, even if the string value
            specified is a number (e.g., 0 or -1). Boolean.Parse expects a string to be represented as
            "True" or "False" (i.e., Boolean.TrueString or Boolean.FalseString respectively).
            </remarks>
        </member>
        <member name="M:TVA.StringExtensions.ConvertToType``1(System.String)">
            <summary>
            Converts this string into the specified type.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> to convert string to.</typeparam>
            <param name="value">Source string to convert to type.</param>
            <returns><see cref="T:System.String"/> converted to specfied <see cref="T:System.Type"/>; default value of specified type T if conversion fails.</returns>
            <remarks>
            This function makes use of a <see cref="T:System.ComponentModel.TypeConverter"/> to convert this <see cref="T:System.String"/> to the specified type T,
            the best way to make sure <paramref name="value"/> can be converted back to its original type is to use the same
            <see cref="T:System.ComponentModel.TypeConverter"/> to convert the original object to a <see cref="T:System.String"/>; see the
            <see cref="M:TVA.Common.TypeConvertToString(System.Object)"/> method for an easy way to do this.
            </remarks>
        </member>
        <member name="M:TVA.StringExtensions.ConvertToType``1(System.String,System.Type)">
            <summary>
            Converts this string into the specified type.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> to convert string to.</typeparam>
            <param name="value">Source string to convert to type.</param>
            <param name="type"><see cref="T:System.Type"/> to convert string to.</param>
            <returns><see cref="T:System.String"/> converted to specfied <see cref="T:System.Type"/>; default value of specified type T if conversion fails.</returns>
            <remarks>
            This function makes use of a <see cref="T:System.ComponentModel.TypeConverter"/> to convert this <see cref="T:System.String"/> to the specified <paramref name="type"/>,
            the best way to make sure <paramref name="value"/> can be converted back to its original type is to use the same
            <see cref="T:System.ComponentModel.TypeConverter"/> to convert the original object to a <see cref="T:System.String"/>; see the
            <see cref="M:TVA.Common.TypeConvertToString(System.Object)"/> method for an easy way to do this.
            </remarks>
        </member>
        <member name="M:TVA.StringExtensions.ConvertToType``1(System.String,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Converts this string into the specified type.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> to convert string to.</typeparam>
            <param name="value">Source string to convert to type.</param>
            <param name="type"><see cref="T:System.Type"/> to convert string to.</param>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/> to use for the conversion.</param>
            <returns><see cref="T:System.String"/> converted to specfied <see cref="T:System.Type"/>; default value of specified type T if conversion fails.</returns>
            <remarks>
            This function makes use of a <see cref="T:System.ComponentModel.TypeConverter"/> to convert this <see cref="T:System.String"/> to the specified <paramref name="type"/>,
            the best way to make sure <paramref name="value"/> can be converted back to its original type is to use the same
            <see cref="T:System.ComponentModel.TypeConverter"/> to convert the original object to a <see cref="T:System.String"/>; see the
            <see cref="M:TVA.Common.TypeConvertToString(System.Object)"/> method for an easy way to do this.
            </remarks>
        </member>
        <member name="M:TVA.StringExtensions.GetSegments(System.String,System.Int32)">
            <summary>
            Turns source string into an array of string segements - each with a set maximum width - for parsing or displaying.
            </summary>
            <param name="value">Input string to break up into segements.</param>
            <param name="segmentSize">Maximum size of returned segment.</param>
            <returns>Array of string segments as parsed from source string.</returns>
            <remarks>Returns a single element array with an empty string if source string is null or empty.</remarks>
        </member>
        <member name="M:TVA.StringExtensions.JoinKeyValuePairs(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Combines a dictionary of key-value pairs in to a string.
            </summary>
            <param name="pairs">Dictionary of key-value pairs.</param>
            <returns>A string of key-value pairs.</returns>
            <remarks>
            Values will be escaped within braces to contain nested key value pair expressions like
            the following: <c>normalKVP=-1; nestedKVP={p1=true; p2=0.001}</c>, when either the
            ";" or "=" are detected in the value of the key/value pair.
            </remarks>
        </member>
        <member name="M:TVA.StringExtensions.JoinKeyValuePairs(System.Collections.Generic.Dictionary{System.String,System.String},System.Char,System.Char)">
            <summary>
            Combines a dictionary of key-value pairs in to a string.
            </summary>
            <param name="pairs">Dictionary of key-value pairs.</param>
            <param name="parameterDelimeter">Character that delimits one key-value pair from another (eg. ';').</param>
            <param name="keyValueDelimeter">Character that delimits a key from its value (eg. '=').</param>
            <returns>A string of key-value pairs.</returns>
            <remarks>
            Values will be escaped within braces to contain nested key value pair expressions like
            the following: <c>normalKVP=-1; nestedKVP={p1=true; p2=0.001}</c>, when either the
            <paramref name="parameterDelimeter"/> or <paramref name="keyValueDelimeter"/> are
            detected in the value of the key/value pair.
            </remarks>
        </member>
        <member name="M:TVA.StringExtensions.JoinKeyValuePairs(System.Collections.Generic.Dictionary{System.String,System.String},System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Combines a dictionary of key-value pairs in to a string.
            </summary>
            <param name="pairs">Dictionary of key-value pairs.</param>
            <param name="parameterDelimeter">Character that delimits one key-value pair from another (eg. ';').</param>
            <param name="keyValueDelimeter">Character that delimits a key from its value (eg. '=').</param>
            <param name="startValueDelimeter">Optional character that marks the start of a value such that value could contain other
            <paramref name="parameterDelimeter"/> or <paramref name="keyValueDelimeter"/> characters (e.g., "{").</param>
            <param name="endValueDelimeter">Optional character that marks the end of a value such that value could contain other
            <paramref name="parameterDelimeter"/> or <paramref name="keyValueDelimeter"/> characters (e.g., "}").</param>
            <returns>A string of key-value pairs.</returns>
            <remarks>
            Values will be escaped within <paramref name="startValueDelimeter"/> and <paramref name="endValueDelimeter"/>
            to contain nested key value pair expressions like the following: <c>normalKVP=-1; nestedKVP={p1=true; p2=0.001}</c>,
            when either the <paramref name="parameterDelimeter"/> or <paramref name="keyValueDelimeter"/> are detected in the
            value of the key/value pair.
            </remarks>
        </member>
        <member name="M:TVA.StringExtensions.ParseKeyValuePairs(System.String)">
            <summary>
            Parses key value pair parameters from a string. Parameter pairs are delimited by an equals sign, and multiple
            pairs separated by a semi-colon.
            </summary>
            <param name="value">Key pair string to parse.</param>
            <returns>Dictionary of key/value pairs.</returns>
            <remarks>
            <para>
            Parses a string formatted like a typical connection string, e.g.:
            <c>IP=localhost; Port=1002; MaxEvents=50; UseTimeout=True</c>.
            Note that "keys" are case-insensitive.
            </para>
            <para>
            Values can be escaped within braces to contain nested key value pair expressions like
            the following: <c>normalKVP=-1; nestedKVP={p1=true; p2=0.001}</c>.
            Multiple levels of nesting is supported.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.FormatException">Total nested key value value pair expressions are mismatched -or-
            encountered end value delimeter '}' before start value delimeter '{'.</exception>
        </member>
        <member name="M:TVA.StringExtensions.ParseKeyValuePairs(System.String,System.Char,System.Char)">
            <summary>
            Parses key value pair parameters from a string. Parameter pairs are delimited by <paramref name="keyValueDelimeter"/>,
            and multiple pairs separated by <paramref name="parameterDelimeter"/>.
            </summary>
            <param name="value">Key pair string to parse.</param>
            <param name="parameterDelimeter">
            Character that delimits one key value pair from another (e.g., would be a ";" in a typical connection string).
            </param>
            <param name="keyValueDelimeter">
            Character that delimits key from value (e.g., would be an "=" in a typical connection string).
            </param>
            <returns>Dictionary of key/value pairs.</returns>
            <remarks>
            <para>
            Parses a key value string that contains one or many pairs. Note that "keys" are case-insensitive.
            </para>
            <para>
            Values can be escaped within braces to contain nested key value pair expressions like
            the following: <c>normalKVP=-1; nestedKVP={p1=true; p2=0.001}</c>.
            Multiple levels of nesting is supported.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">All delimeters must be unique.</exception>
            <exception cref="T:System.FormatException">Total nested key value value pair expressions are mismatched -or-
            encountered end value delimeter '}' before start value delimeter '{'.</exception>
        </member>
        <member name="M:TVA.StringExtensions.ParseKeyValuePairs(System.String,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Parses key value pair parameters from a string. Parameter pairs are delimited by <paramref name="keyValueDelimeter"/>,
            and multiple pairs separated by <paramref name="parameterDelimeter"/>.
            </summary>
            <param name="value">Key pair string to parse.</param>
            <param name="parameterDelimeter">Character that delimits one key value pair from another (e.g., would be a ";" in a typical connection
            string).</param>
            <param name="keyValueDelimeter">Character that delimits key from value (e.g., would be an "=" in a typical connection string).</param>
            <param name="startValueDelimeter">Optional character that marks the start of a value such that value could contain other
            <paramref name="parameterDelimeter"/> or <paramref name="keyValueDelimeter"/> characters (e.g., "{").</param>
            <param name="endValueDelimeter">Optional character that marks the end of a value such that value could contain other
            <paramref name="parameterDelimeter"/> or <paramref name="keyValueDelimeter"/> characters (e.g., "}").</param>
            <returns>Dictionary of key/value pairs.</returns>
            <remarks>
            <para>
            Parses a key value string that contains one or many pairs. Note that "keys" are case-insensitive.
            </para>
            <para>
            If value includes <paramref name="startValueDelimeter"/>, it must include <paramref name="endValueDelimeter"/>
            otherwise results will be unexpected.
            Multiple levels of nesting is supported.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">All delimeters must be unique.</exception>
            <exception cref="T:System.FormatException">Total nested key value value pair expressions are mismatched -or-
            encountered <paramref name="endValueDelimeter"/> before <paramref name="startValueDelimeter"/>.</exception>
        </member>
        <member name="M:TVA.StringExtensions.NotEmpty(System.String)">
            <summary>
            Ensures parameter is not an empty or null string. Returns a single space if test value is empty.
            </summary>
            <param name="testValue">Value to test for null or empty.</param>
            <returns>A non-empty string.</returns>
        </member>
        <member name="M:TVA.StringExtensions.NotEmpty(System.String,System.String)">
            <summary>
            Ensures parameter is not an empty or null string.
            </summary>
            <param name="testValue">Value to test for null or empty.</param>
            <param name="nonEmptyReturnValue">Value to return if <paramref name="testValue">testValue</paramref> is null or empty.</param>
            <returns>A non-empty string.</returns>
        </member>
        <member name="M:TVA.StringExtensions.ReplaceCharacters(System.String,System.Char,System.Func{System.Char,System.Boolean})">
            <summary>
            Replaces all characters passing delegate test with specified replacement character.
            </summary>
            <param name="value">Input string.</param>
            <param name="replacementCharacter">Character used to replace characters passing delegate test.</param>
            <param name="characterTestFunction">Delegate used to determine whether or not character should be replaced.</param>
            <returns>Returns <paramref name="value" /> with all characters passing delegate test replaced.</returns>
            <remarks>Allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160)).</remarks>
        </member>
        <member name="M:TVA.StringExtensions.RemoveCharacters(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Removes all characters passing delegate test from a string.
            </summary>
            <param name="value">Input string.</param>
            <param name="characterTestFunction">Delegate used to determine whether or not character should be removed.</param>
            <returns>Returns <paramref name="value" /> with all characters passing delegate test removed.</returns>
        </member>
        <member name="M:TVA.StringExtensions.RemoveWhiteSpace(System.String)">
            <summary>
            Removes all white space (as defined by IsWhiteSpace) from a string.
            </summary>
            <param name="value">Input string.</param>
            <returns>Returns <paramref name="value" /> with all white space removed.</returns>
        </member>
        <member name="M:TVA.StringExtensions.ReplaceWhiteSpace(System.String,System.Char)">
            <summary>
            Replaces all white space characters (as defined by IsWhiteSpace) with specified replacement character.
            </summary>
            <param name="value">Input string.</param>
            <param name="replacementCharacter">Character used to "replace" white space characters.</param>
            <returns>Returns <paramref name="value" /> with all white space characters replaced.</returns>
            <remarks>Allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160)).</remarks>
        </member>
        <member name="M:TVA.StringExtensions.RemoveControlCharacters(System.String)">
            <summary>
            Removes all control characters from a string.
            </summary>
            <param name="value">Input string.</param>
            <returns>Returns <paramref name="value" /> with all control characters removed.</returns>
        </member>
        <member name="M:TVA.StringExtensions.ReplaceControlCharacters(System.String)">
            <summary>
            Replaces all control characters in a string with a single space.
            </summary>
            <param name="value">Input string.</param>
            <returns>Returns <paramref name="value" /> with all control characters replaced as a single space.</returns>
        </member>
        <member name="M:TVA.StringExtensions.ReplaceControlCharacters(System.String,System.Char)">
            <summary>
            Replaces all control characters in a string with specified replacement character.
            </summary>
            <param name="value">Input string.</param>
            <param name="replacementCharacter">Character used to "replace" control characters.</param>
            <returns>Returns <paramref name="value" /> with all control characters replaced.</returns>
            <remarks>Allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160)).</remarks>
        </member>
        <member name="M:TVA.StringExtensions.RemoveCrLfs(System.String)">
            <summary>
            Removes all carriage returns and line feeds from a string.
            </summary>
            <param name="value">Input string.</param>
            <returns>Returns <paramref name="value" /> with all CR and LF characters removed.</returns>
        </member>
        <member name="M:TVA.StringExtensions.ReplaceCrLfs(System.String,System.Char)">
            <summary>
            Replaces all carriage return and line feed characters (as well as CR/LF sequences) in a string with specified replacement character.
            </summary>
            <param name="value">Input string.</param>
            <param name="replacementCharacter">Character used to "replace" CR and LF characters.</param>
            <returns>Returns <paramref name="value" /> with all CR and LF characters replaced.</returns>
            <remarks>Allows you to specify a replacement character (e.g., you may want to use a non-breaking space: Convert.ToChar(160)).</remarks>
        </member>
        <member name="M:TVA.StringExtensions.RemoveDuplicates(System.String,System.String)">
            <summary>
            Removes duplicate character strings (adjoining replication) in a string.
            </summary>
            <param name="value">Input string.</param>
            <param name="duplicatedValue">String whose duplicates are to be removed.</param>
            <returns>Returns <paramref name="value" /> with all duplicated <paramref name="duplicatedValue" /> removed.</returns>
        </member>
        <member name="M:TVA.StringExtensions.RemoveNull(System.String)">
            <summary>
            Removes the terminator ('\0') from a null terminated string.
            </summary>
            <param name="value">Input string.</param>
            <returns>Returns <paramref name="value" /> with all characters to the left of the terminator.</returns>
        </member>
        <member name="M:TVA.StringExtensions.RemoveDuplicateWhiteSpace(System.String)">
            <summary>
            Replaces all repeating white space with a single space.
            </summary>
            <param name="value">Input string.</param>
            <returns>Returns <paramref name="value" /> with all duplicate white space removed.</returns>
        </member>
        <member name="M:TVA.StringExtensions.RemoveDuplicateWhiteSpace(System.String,System.Char)">
            <summary>
            Replaces all repeating white space with specified spacing character.
            </summary>
            <param name="value">Input string.</param>
            <param name="spacingCharacter">Character value to use to insert as single white space value.</param>
            <returns>Returns <paramref name="value" /> with all duplicate white space removed.</returns>
            <remarks>This function allows you to specify spacing character (e.g., you may want to use a non-breaking space: <c>Convert.ToChar(160)</c>).</remarks>
        </member>
        <member name="M:TVA.StringExtensions.CharCount(System.String,System.Char)">
            <summary>
            Counts the total number of the occurances of a character in the given string.
            </summary>
            <param name="value">Input string.</param>
            <param name="characterToCount">Character to be counted.</param>
            <returns>Total number of the occurances of <paramref name="characterToCount" /> in the given string.</returns>
        </member>
        <member name="M:TVA.StringExtensions.IsAllDigits(System.String)">
            <summary>
            Tests to see if a string is contains only digits based on Char.IsDigit function.
            </summary>
            <param name="value">Input string.</param>
            <returns>True, if all string's characters are digits; otherwise, false.</returns>
            <seealso cref="M:System.Char.IsDigit(System.Char)"/>
        </member>
        <member name="M:TVA.StringExtensions.IsAllNumbers(System.String)">
            <summary>
            Tests to see if a string contains only numbers based on Char.IsNumber function.
            </summary>
            <param name="value">Input string.</param>
            <returns>True, if all string's characters are numbers; otherwise, false.</returns>
            <seealso cref="M:System.Char.IsNumber(System.Char)"/>
        </member>
        <member name="M:TVA.StringExtensions.IsAllUpper(System.String)">
            <summary>
            Tests to see if a string's letters are all upper case.
            </summary>
            <param name="value">Input string.</param>
            <returns>True, if all string's letter characters are upper case; otherwise, false.</returns>
        </member>
        <member name="M:TVA.StringExtensions.IsAllLower(System.String)">
            <summary>
            Tests to see if a string's letters are all lower case.
            </summary>
            <param name="value">Input string.</param>
            <returns>True, if all string's letter characters are lower case; otherwise, false.</returns>
        </member>
        <member name="M:TVA.StringExtensions.IsAllLetters(System.String)">
            <summary>
            Tests to see if a string contains only letters.
            </summary>
            <param name="value">Input string.</param>
            <returns>True, if all string's characters are letters; otherwise, false.</returns>
            <remarks>Any non-letter character (e.g., punctuation marks) causes this function to return false (See overload to ignore punctuation
            marks.).</remarks>
        </member>
        <member name="M:TVA.StringExtensions.IsAllLetters(System.String,System.Boolean)">
            <summary>
            Tests to see if a string contains only letters.
            </summary>
            <param name="value">Input string.</param>
            <param name="ignorePunctuation">Set to True to ignore punctuation.</param>
            <returns>True, if all string's characters are letters; otherwise, false.</returns>
        </member>
        <member name="M:TVA.StringExtensions.IsAllLettersOrDigits(System.String)">
            <summary>
            Tests to see if a string contains only letters or digits.
            </summary>
            <param name="value">Input string.</param>
            <returns>True, if all string's characters are either letters or digits; otherwise, false.</returns>
            <remarks>Any non-letter, non-digit character (e.g., punctuation marks) causes this function to return false (See overload to ignore
            punctuation marks.).</remarks>
        </member>
        <member name="M:TVA.StringExtensions.IsAllLettersOrDigits(System.String,System.Boolean)">
            <summary>
            Tests to see if a string contains only letters or digits.
            </summary>
            <param name="value">Input string.</param>
            <param name="ignorePunctuation">Set to True to ignore punctuation.</param>
            <returns>True, if all string's characters are letters or digits; otherwise, false.</returns>
        </member>
        <member name="M:TVA.StringExtensions.RegexDecode(System.String)">
            <summary>
            Decodes the specified Regular Expression character back into a standard Unicode character.
            </summary>
            <param name="value">Regular Expression character to decode back into a Unicode character.</param>
            <returns>Standard Unicode character representation of specified Regular Expression character.</returns>
        </member>
        <member name="M:TVA.StringExtensions.Base64Encode(System.String)">
            <summary>
            Encodes a string into a base-64 string.
            </summary>
            <param name="value">Input string.</param>
            <remarks>
            <para>Performs a base-64 style of string encoding useful for data obfuscation or safe XML data string transmission.</para>
            <para>Note: This function encodes a "String". Use the Convert.ToBase64String function to encode a binary data buffer.</para>
            </remarks>
            <returns>A <see cref="T:System.String"></see> value representing the encoded input of <paramref name="value"/>.</returns>
        </member>
        <member name="M:TVA.StringExtensions.Base64Decode(System.String)">
            <summary>
            Decodes a given base-64 encoded string encoded with <see cref="M:TVA.StringExtensions.Base64Encode(System.String)"/>.
            </summary>
            <param name="value">Input string.</param>
            <remarks>Note: This function decodes value back into a "String". Use the Convert.FromBase64String function to decode a base-64 encoded
            string back into a binary data buffer.</remarks>
            <returns>A <see cref="T:System.String"></see> value representing the decoded input of <paramref name="value"/>.</returns>
        </member>
        <member name="M:TVA.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Converts the provided string into title case (upper case first letter of each word).
            </summary>
            <param name="value">Input string.</param>
            <remarks>Note: This function performs "ToLower" in input string then applies TextInfo.ToTitleCase for CurrentCulture. This way, even
            strings formatted in all-caps will still be properly formatted.</remarks>
            <returns>A <see cref="T:System.String"/> that has the first letter of each word capitalized.</returns>
        </member>
        <member name="M:TVA.StringExtensions.TruncateLeft(System.String,System.Int32)">
            <summary>
            Truncates the provided string from the left if it is longer that specified length.
            </summary>
            <param name="value">A <see cref="T:System.String"/> value that is to be truncated.</param>
            <param name="maxLength">The maximum number of characters that <paramref name="value"/> can be.</param>
            <returns>A <see cref="T:System.String"/> that is the truncated version of the <paramref name="value"/> string.</returns>
        </member>
        <member name="M:TVA.StringExtensions.TruncateRight(System.String,System.Int32)">
            <summary>
            Truncates the provided string from the right if it is longer that specified length.
            </summary>
            <param name="value">A <see cref="T:System.String"/> value that is to be truncated.</param>
            <param name="maxLength">The maximum number of characters that <paramref name="value"/> can be.</param>
            <returns>A <see cref="T:System.String"/> that is the truncated version of the <paramref name="value"/> string.</returns>
        </member>
        <member name="M:TVA.StringExtensions.CenterText(System.String,System.Int32)">
            <summary>
            Centers text within the specified maximum length, biased to the left.
            Text will be padded to the left and right with spaces.
            If value is greater than specified maximum length, value returned will be truncated from the right.
            </summary>
            <remarks>
            Handles multiple lines of text separated by Environment.NewLine.
            </remarks>
            <param name="value">A <see cref="T:System.String"/> to be centered.</param>
            <param name="maxLength">An <see cref="T:System.Int32"/> that is the maximum length of padding.</param>
            <returns>The centered string value.</returns>
        </member>
        <member name="M:TVA.StringExtensions.CenterText(System.String,System.Int32,System.Char)">
            <summary>
            Centers text within the specified maximum length, biased to the left.
            Text will be padded to the left and right with specified padding character.
            If value is greater than specified maximum length, value returned will be truncated from the right.
            </summary>
            <remarks>
            Handles multiple lines of text separated by <c>Environment.NewLine</c>.
            </remarks>
            <param name="value">A <see cref="T:System.String"/> to be centered.</param>
            <param name="maxLength">An <see cref="T:System.Int32"/> that is the maximum length of padding.</param>
            <param name="paddingCharacter">The <see cref="T:System.Char"/> value to pad with.</param>
            <returns>The centered string value.</returns>
        </member>
        <member name="M:TVA.StringExtensions.ReplaceCaseInsensitive(System.String,System.String,System.String)">
            <summary>
            Performs a case insensitive string replacement.
            </summary>
            <param name="value">The string to examine.</param>
            <param name="fromText">The value to replace.</param>
            <param name="toText">The new value to be inserted</param>
            <returns>A string with replacements.</returns>
        </member>
        <member name="M:TVA.StringExtensions.EnsureStart(System.String,System.Char)">
            <summary>
            Ensures a string starts with a specific character.
            </summary>
            <param name="value">Input string to process.</param>
            <param name="startChar">The character desired at string start.</param>
            <returns>The sent string with character at the start.</returns>
        </member>
        <member name="M:TVA.StringExtensions.EnsureStart(System.String,System.Char,System.Boolean)">
            <summary>
            Ensures a string starts with a specific character.
            </summary>
            <param name="value">Input string to process.</param>
            <param name="startChar">The character desired at string start.</param>
            <param name="removeRepeatingChar">Set to <c>true</c> to ensure one and only one instance of <paramref name="startChar"/>.</param>
            <returns>The sent string with character at the start.</returns>
        </member>
        <member name="M:TVA.StringExtensions.EnsureStart(System.String,System.String)">
            <summary>
            Ensures a string starts with a specific string.
            </summary>
            <param name="value">Input string to process.</param>
            <param name="startString">The string desired at string start.</param>
            <returns>The sent string with string at the start.</returns>
        </member>
        <member name="M:TVA.StringExtensions.EnsureEnd(System.String,System.Char)">
            <summary>
            Ensures a string ends with a specific character.
            </summary>
            <param name="value">Input string to process.</param>
            <param name="endChar">The character desired at string's end.</param>
            <returns>The sent string with character at the end.</returns>
        </member>
        <member name="M:TVA.StringExtensions.EnsureEnd(System.String,System.Char,System.Boolean)">
            <summary>
            Ensures a string ends with a specific character.
            </summary>
            <param name="value">Input string to process.</param>
            <param name="endChar">The character desired at string's end.</param>
            <param name="removeRepeatingChar">Set to <c>true</c> to ensure one and only one instance of <paramref name="endChar"/>.</param>
            <returns>The sent string with character at the end.</returns>
        </member>
        <member name="M:TVA.StringExtensions.EnsureEnd(System.String,System.String)">
            <summary>
            Ensures a string ends with a specific string.
            </summary>
            <param name="value">Input string to process.</param>
            <param name="endString">The string desired at string's end.</param>
            <returns>The sent string with string at the end.</returns>
        </member>
        <member name="M:TVA.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses the order of the characters in a string.
            </summary>
            <param name="value">Input string to process.</param>
            <returns>The reversed string.</returns>
        </member>
        <member name="M:TVA.StringExtensions.IndexOfRepeatedChar(System.String,System.Char,System.Int32)">
            <summary>
            Searches a string for a repeated instance of the specified <paramref name="characterToFind"/> from specified <paramref name="startIndex"/>.
            </summary>
            <param name="value">The string to process.</param>
            <param name="characterToFind">The character of interest.</param>
            <param name="startIndex">The index from which to begin the search.</param>
            <returns>The index of the first instance of the character that is repeated or (-1) if no repeated chars found.</returns>
        </member>
        <member name="M:TVA.StringExtensions.IndexOfRepeatedChar(System.String,System.Char)">
            <summary>
            Searches a string for a repeated instance of the specified <paramref name="characterToFind"/>.
            </summary>
            <param name="value">The string to process.</param>
            <param name="characterToFind">The character of interest.</param>
            <returns>The index of the first instance of the character that is repeated or (-1) if no repeated chars found.</returns>
        </member>
        <member name="M:TVA.StringExtensions.IndexOfRepeatedChar(System.String)">
            <summary>
            Searches a string for an instance of a repeated character.
            </summary>
            <param name="value">The string to process.</param>
            <returns>The index of the first instance of any character that is repeated or (-1) if no repeated chars found.</returns>
        </member>
        <member name="M:TVA.StringExtensions.IndexOfRepeatedChar(System.String,System.Int32)">
            <summary>
            Searches a string for an instance of a repeated character from specified <paramref name="startIndex"/>.
            </summary>
            <param name="value">The string to process.</param>
            <param name="startIndex">The index from which to begin the search.</param>
            <returns>The index of the first instance of any character that is repeated or (-1) if no repeated chars found.</returns>
        </member>
        <member name="M:TVA.StringExtensions.LastIndexOfRepeatedChar(System.String,System.Char,System.Int32)">
            <summary>
            Returns the index of the last repeated index of the first group of repeated characters that begin with the <paramref name="characterToFind"/>.
            </summary>
            <param name="value">String to process.</param>
            <param name="characterToFind">The character of interest.</param>
            <param name="startIndex">The index from which to begin the search.</param>
            <returns>The index of the last instance of the character that is repeated or (-1) if no repeated chars found.</returns>
        </member>
        <member name="M:TVA.StringExtensions.TrimWithEllipsisMiddle(System.String,System.Int32)">
            <summary>
            Places an ellipsis in the middle of a string as it is trimmed to length specified.
            </summary>
            <param name="value">The string to process.</param>
            <param name="length">The maximum returned string length; mimimum value is 5.</param>
            <returns>
            A trimmed string of the specified <paramref name="length"/> or empty string if <paramref name="value"/> is null or empty.
            </returns>
            <remarks>
            Returned string is not padded to fill field length if <paramref name="value"/> is shorter than length.
            </remarks>
        </member>
        <member name="M:TVA.StringExtensions.TrimWithEllipsisEnd(System.String,System.Int32)">
            <summary>
            Places an ellipsis at the end of a string as it is trimmed to length specified.
            </summary>
            <param name="value">The string to process.</param>
            <param name="length">The maximum returned string length; mimimum value is 5.</param>
            <returns>
            A trimmed string of the specified <paramref name="length"/> or empty string if <paramref name="value"/> is null or empty.
            </returns>
            <remarks>
            Returned string is not padded to fill field length if <paramref name="value"/> is shorter than length.
            </remarks>
        </member>
        <member name="T:TVA.Security.Cryptography.Random">
            <summary>
            Generates cryptographically strong random numbers.
            </summary>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.Between(System.Double,System.Double)">
            <summary>
            Generates a cryptographically strong random integer between specified values.
            </summary>
            <param name="startNumber">A <see cref="T:System.Double"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="T:System.Double"/> that is the high end of our range.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <returns>A <see cref="T:System.Double"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>, or an excception.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.GetBytes(System.Byte[])">
            <summary>
            Fills an array of bytes with a cryptographically strong sequence of random values.
            </summary>
            <param name="buffer">The array to fill with a cryptographically strong sequence of random values.</param>
            <remarks>
            <para>The length of the byte array determines how many cryptographically strong random bytes are produced.</para>
            <para>This method is thread safe.</para>
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.ByteBetween(System.Byte,System.Byte)">
            <summary>
            Generates a cryptographically strong 8-bit random integer between specified values.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <param name="startNumber">A <see cref="T:System.Byte"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="T:System.Byte"/> that is the high end of our range.</param>
            <returns>A <see cref="T:System.Byte"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.Int16Between(System.Int16,System.Int16)">
            <summary>
            Generates a cryptographically strong 16-bit random integer between specified values.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <param name="startNumber">A <see cref="T:System.Int16"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="T:System.Int16"/> that is the high end of our range.</param>
            <returns>A <see cref="T:System.Int16"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.UInt16Between(System.UInt16,System.UInt16)">
            <summary>
            Generates a cryptographically strong unsigned 16-bit random integer between specified values.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <param name="startNumber">A <see cref="T:System.UInt16"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="T:System.UInt16"/> that is the high end of our range.</param>
            <returns>A <see cref="T:System.UInt16"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.Int24Between(TVA.Int24,TVA.Int24)">
            <summary>
            Generates a cryptographically strong 24-bit random integer between specified values.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <param name="startNumber">A <see cref="P:TVA.Security.Cryptography.Random.Int24"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="P:TVA.Security.Cryptography.Random.Int24"/> that is the high end of our range.</param>
            <returns>A <see cref="P:TVA.Security.Cryptography.Random.Int24"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.Int24Between(TVA.UInt24,TVA.UInt24)">
            <summary>
            Generates a cryptographically strong unsigned 24-bit random integer between specified values.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <param name="startNumber">A <see cref="P:TVA.Security.Cryptography.Random.UInt24"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="P:TVA.Security.Cryptography.Random.UInt24"/> that is the high end of our range.</param>
            <returns>A <see cref="P:TVA.Security.Cryptography.Random.UInt24"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.Int32Between(System.Int32,System.Int32)">
            <summary>
            Generates a cryptographically strong 32-bit random integer between specified values.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <param name="startNumber">A <see cref="T:System.Int32"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="T:System.Int32"/> that is the high end of our range.</param>
            <returns>A <see cref="T:System.Int32"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.UInt32Between(System.UInt32,System.UInt32)">
            <summary>
            Generates a cryptographically strong unsigned 32-bit random integer between specified values.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <param name="startNumber">A <see cref="T:System.UInt32"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="T:System.UInt32"/> that is the high end of our range.</param>
            <returns>A <see cref="T:System.UInt32"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.Int64Between(System.Int64,System.Int64)">
            <summary>
            Generates a cryptographically strong 64-bit random integer between specified values.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <param name="startNumber">A <see cref="T:System.Int64"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="T:System.Int64"/> that is the high end of our range.</param>
            <returns>A <see cref="T:System.Int64"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>.</returns>
        </member>
        <member name="M:TVA.Security.Cryptography.Random.UInt64Between(System.UInt64,System.UInt64)">
            <summary>
            Generates a cryptographically strong unsigned 64-bit random integer between specified values.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
            <param name="startNumber">A <see cref="T:System.UInt64"/> that is the low end of our range.</param>
            <param name="stopNumber">A <see cref="T:System.UInt64"/> that is the high end of our range.</param>
            <returns>A <see cref="T:System.UInt64"/> that is generated between the <paramref name="startNumber"/> and the <paramref name="stopNumber"/>.</returns>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.Number">
            <summary>
            Generates a cryptographically strong double-precision floating-point random number between zero and one.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.Decimal">
            <summary>
            Generates a cryptographically strong random decimal between zero and one.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.Boolean">
            <summary>
            Generates a cryptographically strong random boolean (i.e., a coin toss).
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.Byte">
            <summary>
            Generates a cryptographically strong 8-bit random integer.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.Int16">
            <summary>
            Generates a cryptographically strong 16-bit random integer.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.UInt16">
            <summary>
            Generates a cryptographically strong unsigned 16-bit random integer.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.Int24">
            <summary>
            Generates a cryptographically strong 24-bit random integer.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.UInt24">
            <summary>
            Generates a cryptographically strong unsigned 24-bit random integer.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.Int32">
            <summary>
            Generates a cryptographically strong 32-bit random integer.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.UInt32">
            <summary>
            Generates a cryptographically strong unsigned 32-bit random integer.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.Int64">
            <summary>
            Generates a cryptographically strong 64-bit random integer.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="P:TVA.Security.Cryptography.Random.UInt64">
            <summary>
            Generates a cryptographically strong unsigned 64-bit random integer.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
        </member>
        <member name="T:TVA.Parsing.CommonHeaderBase`1">
            <summary>
            Represents the base class for a common binary image header implementation.
            </summary>
            <remarks>
            Here is an example of a possible derived class constructor that has an integer TypeID as the
            first 4 bytes in the image:
            <code>
            public CommonHeader(object state, byte[] binaryImage, int startIndex, int length)
            {
                if (length > 3)
                {
                    TypeID = EndianOrder.LittleEndian.ToInt32(binaryImage, startIndex);
                    State = state;
                }
                else
                    throw new InvalidOperationException("Malformed image");
            }
            </code>
            </remarks>
            <typeparam name="TTypeIdentifier">Type of identifier used to distinguish output types.</typeparam>
        </member>
        <member name="P:TVA.Parsing.CommonHeaderBase`1.TypeID">
            <summary>
            Gets or sets the identifier used for identifying the <see cref="T:System.Type"/> to be parsed.
            </summary>
        </member>
        <member name="P:TVA.Parsing.CommonHeaderBase`1.State">
            <summary>
            Gets or sets any additional state information that might be needed for parsing.
            </summary>
        </member>
        <member name="T:TVA.Media.NamespaceDoc">
            <summary>
            Contains classes used to create and manipulate waveform audio format (WAV) files.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.Note">
             <summary>
             Defines fundamental musical note frequencies and methods to create them.
             </summary>
             <example>
             This example creates an in-memory wave file and adds notes to create a basic musical scale:
             <code>
             using System;
             using TVA.Media;
             using TVA.Media.Music;
            
             static class Program
             {
                 static void Main()
                  {
                      WaveFile waveFile = new WaveFile();
                      long samplePeriod = 6 * waveFile.SampleRate;   // Compute total sample period
                      int totalNotes = 15;                           // Total notes to traverse
                      string noteID = Note.MiddleC;                  // Start note at middle C
                      double frequency = Note.GetFrequency(noteID);  // Get frequency for middle C
                      bool reverse = false;                          // Traverse notes in reverse order
            
                      for (int sample = 0; sample <![CDATA[<]]> samplePeriod; sample++)
                      {
                          // Change notes at even intervals within the sample period
                          if (sample > 0 <![CDATA[&&]]> (sample % (samplePeriod / totalNotes)) == 0)
                          {
                              if (reverse)
                              {
                                  noteID = Note.GetPreviousID(noteID, false);
                                  frequency = Note.GetFrequency(noteID);
                              }
                              else
                              {
                                  noteID = Note.GetNextID(noteID, false);
                                  frequency = Note.GetFrequency(noteID);
                              }
            
                              // Go back down the scale after C5
                              if (noteID == "C5")
                                  reverse = true;
                          }
            
                          waveFile.AddSample(Timbre.BasicNote(frequency, sample, samplePeriod, waveFile.SampleRate) * 4500);
                      }
            
                      waveFile.Play();
                      Console.ReadKey();
                  }
             }
             </code>
             </example>
        </member>
        <member name="F:TVA.Media.Music.Note.C0">
            <summary>
            Fundamental frequency for note C0.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C0S">
            <summary>
            Fundamental frequency for note C0#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D0">
            <summary>
            Fundamental frequency for note D0.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D0S">
            <summary>
            Fundamental frequency for note D0#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.E0">
            <summary>
            Fundamental frequency for note E0.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F0">
            <summary>
            Fundamental frequency for note F0.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F0S">
            <summary>
            Fundamental frequency for note F0#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G0">
            <summary>
            Fundamental frequency for note G0.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G0S">
            <summary>
            Fundamental frequency for note G0#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A0">
            <summary>
            Fundamental frequency for note A0.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A0S">
            <summary>
            Fundamental frequency for note A0#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.B0">
            <summary>
            Fundamental frequency for note B0.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C1">
            <summary>
            Fundamental frequency for note C1.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C1S">
            <summary>
            Fundamental frequency for note C1#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D1">
            <summary>
            Fundamental frequency for note D1.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D1S">
            <summary>
            Fundamental frequency for note D1#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.E1">
            <summary>
            Fundamental frequency for note E1.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F1">
            <summary>
            Fundamental frequency for note F1.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F1S">
            <summary>
            Fundamental frequency for note F1#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G1">
            <summary>
            Fundamental frequency for note G1.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G1S">
            <summary>
            Fundamental frequency for note G1#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A1">
            <summary>
            Fundamental frequency for note A1.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A1S">
            <summary>
            Fundamental frequency for note A1#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.B1">
            <summary>
            Fundamental frequency for note B1.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C2">
            <summary>
            Fundamental frequency for note C2.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C2S">
            <summary>
            Fundamental frequency for note C2#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D2">
            <summary>
            Fundamental frequency for note D2.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D2S">
            <summary>
            Fundamental frequency for note D2#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.E2">
            <summary>
            Fundamental frequency for note E2.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F2">
            <summary>
            Fundamental frequency for note F2.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F2S">
            <summary>
            Fundamental frequency for note F2#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G2">
            <summary>
            Fundamental frequency for note G2.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G2S">
            <summary>
            Fundamental frequency for note G2#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A2">
            <summary>
            Fundamental frequency for note A2.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A2S">
            <summary>
            Fundamental frequency for note A2#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.B2">
            <summary>
            Fundamental frequency for note B2.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C3">
            <summary>
            Fundamental frequency for note C3.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C3S">
            <summary>
            Fundamental frequency for note C3#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D3">
            <summary>
            Fundamental frequency for note D3.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D3S">
            <summary>
            Fundamental frequency for note D3#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.E3">
            <summary>
            Fundamental frequency for note E3.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F3">
            <summary>
            Fundamental frequency for note F3.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F3S">
            <summary>
            Fundamental frequency for note F3#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G3">
            <summary>
            Fundamental frequency for note G3.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G3S">
            <summary>
            Fundamental frequency for note G3#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A3">
            <summary>
            Fundamental frequency for note A3.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A3S">
            <summary>
            Fundamental frequency for note A3#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.B3">
            <summary>
            Fundamental frequency for note B3.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C4">
            <summary>
            Fundamental frequency for note C4 - Middle C.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C4S">
            <summary>
            Fundamental frequency for note C4#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D4">
            <summary>
            Fundamental frequency for note D4.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D4S">
            <summary>
            Fundamental frequency for note D4#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.E4">
            <summary>
            Fundamental frequency for note E4.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F4">
            <summary>
            Fundamental frequency for note F4.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F4S">
            <summary>
            Fundamental frequency for note F4#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G4">
            <summary>
            Fundamental frequency for note G4.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G4S">
            <summary>
            Fundamental frequency for note G4#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A4">
            <summary>
            Fundamental frequency for note A4.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A4S">
            <summary>
            Fundamental frequency for note A4#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.B4">
            <summary>
            Fundamental frequency for note B4.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C5">
            <summary>
            Fundamental frequency for note C5.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C5S">
            <summary>
            Fundamental frequency for note C5#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D5">
            <summary>
            Fundamental frequency for note D5.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D5S">
            <summary>
            Fundamental frequency for note D5#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.E5">
            <summary>
            Fundamental frequency for note E5.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F5">
            <summary>
            Fundamental frequency for note F5.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F5S">
            <summary>
            Fundamental frequency for note F5#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G5">
            <summary>
            Fundamental frequency for note G5.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G5S">
            <summary>
            Fundamental frequency for note G5#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A5">
            <summary>
            Fundamental frequency for note A5.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A5S">
            <summary>
            Fundamental frequency for note A5#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.B5">
            <summary>
            Fundamental frequency for note B5.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C6">
            <summary>
            Fundamental frequency for note C6.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C6S">
            <summary>
            Fundamental frequency for note C6#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D6">
            <summary>
            Fundamental frequency for note D6.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D6S">
            <summary>
            Fundamental frequency for note D6#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.E6">
            <summary>
            Fundamental frequency for note E6.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F6">
            <summary>
            Fundamental frequency for note F6.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F6S">
            <summary>
            Fundamental frequency for note F6#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G6">
            <summary>
            Fundamental frequency for note G6.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G6S">
            <summary>
            Fundamental frequency for note G6#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A6">
            <summary>
            Fundamental frequency for note A6.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A6S">
            <summary>
            Fundamental frequency for note A6#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.B6">
            <summary>
            Fundamental frequency for note B6.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C7">
            <summary>
            Fundamental frequency for note C7.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C7S">
            <summary>
            Fundamental frequency for note C7#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D7">
            <summary>
            Fundamental frequency for note D7.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D7S">
            <summary>
            Fundamental frequency for note D7#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.E7">
            <summary>
            Fundamental frequency for note E7.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F7">
            <summary>
            Fundamental frequency for note F7.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.F7S">
            <summary>
            Fundamental frequency for note F7#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G7">
            <summary>
            Fundamental frequency for note G7.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.G7S">
            <summary>
            Fundamental frequency for note G7#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A7">
            <summary>
            Fundamental frequency for note A7.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.A7S">
            <summary>
            Fundamental frequency for note A7#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.B7">
            <summary>
            Fundamental frequency for note B7.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C8">
            <summary>
            Fundamental frequency for note C8.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.C8S">
            <summary>
            Fundamental frequency for note C8#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D8">
            <summary>
            Fundamental frequency for note D8.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.D8S">
            <summary>
            Fundamental frequency for note D8#.
            </summary>
        </member>
        <member name="F:TVA.Media.Music.Note.MiddleC">
            <summary>Note ID for "Middle C"</summary>
        </member>
        <member name="M:TVA.Media.Music.Note.#ctor">
            <summary>
            Creates a new note of the specified frequency and length.
            </summary>
            <remarks>
            <para>
            Default note will be rest (zero frequency), quarter note.
            </para>
            <para>
            It is expected that <see cref="T:TVA.Media.Music.Note"/> objects will be constructed using object intializers.
            </para>
            </remarks>
            <example>
            <code>
            // Create a 3/8th length, middle C note
            Note note1 = new Note { Frequency = Note.C4, NamedValue = NoteValue.Quarter, Dots = 1 };
            
            // Create a 1/8th length, E above middle C note
            Note note2 = new Note { ID = "E4", NamedValueBritish = NoteValueBritish.Quaver };
            
            // Create a whole length, F# above middle C note, "p" soft dynamic
            Note note3 = new Note { Frequency = Note.F4S, Value = 1.0, NamedDynamic = Dynamic.Piano };
            </code>
            </example>
        </member>
        <member name="M:TVA.Media.Music.Note.CalculateValueTime(TVA.Media.Music.Tempo)">
            <summary>
            Calculates the actual time duration, in seconds, for the specified tempo that
            the note value will last. For example, if tempo is M.M. 120 quarter-notes per
            minte, then each quarter-note would last a half-second.
            </summary>
            <param name="tempo">Tempo used to calculate note value time.</param>
            <returns>Calculated note value time.</returns>
            <remarks>
            Calculated value is cached and available from <see cref="P:TVA.Media.Music.Note.ValueTime"/> property.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Note.ToString">
            <summary>
            Returns a string representation for the note.
            </summary>
            <returns>A <see cref="T:System.String"/> value representation for the note.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.Equals(TVA.Media.Music.Note)">
            <summary>Returns True if the frequency and value of this note equals the frequency and value of the specified other note.</summary>
            <param name="other">The other <see cref="T:TVA.Media.Music.Note"/> to compare against.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.Equals(System.Object)">
            <summary>Returns True if the frequency and value of this note equals the frequency and value of the specified other note.</summary>
            <param name="obj">The other <see cref="T:System.Object"/> to compare against.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating the result.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.CompareTo(TVA.Media.Music.Note)">
            <summary>Notes are compared by frequency, then by value (i.e., duration).</summary>
            <param name="other">A <see cref="T:TVA.Media.Music.Note"/> that is compared against.</param>
            <returns>An <see cref="T:System.Int32"/> that indicates: this object is greater than if 1, equal to if 0, or less than if -1.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.CompareTo(System.Object)">
            <summary>Notes are compared by frequency, then by value (i.e., duration).</summary>
            <param name="obj">An <see cref="T:System.Object"/> that is compared against.</param>
            <returns>An <see cref="T:System.Int32"/> that indicates: this object is greater than if 1, equal to if 0, or less than if -1.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.GetHashCode">
            <summary>
            Serves as a hash function for the current <see cref="T:TVA.Media.Music.Note"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:TVA.Media.Music.Note"/>.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.op_Equality(TVA.Media.Music.Note,TVA.Media.Music.Note)">
            <summary>
            Compares two <see cref="T:TVA.Media.Music.Note"/> frequencies and values for equality.
            </summary>
            <param name="note1">A <see cref="T:TVA.Media.Music.Note"/> left hand operand.</param>
            <param name="note2">A <see cref="T:TVA.Media.Music.Note"/> right hand operand.</param>
            <returns>A boolean indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.op_Inequality(TVA.Media.Music.Note,TVA.Media.Music.Note)">
            <summary>
            Compares two <see cref="T:TVA.Media.Music.Note"/> frequencies and values for inequality.
            </summary>
            <param name="note1">A <see cref="T:TVA.Media.Music.Note"/> left hand operand.</param>
            <param name="note2">A <see cref="T:TVA.Media.Music.Note"/> right hand operand.</param>
            <returns>A boolean indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.op_GreaterThan(TVA.Media.Music.Note,TVA.Media.Music.Note)">
            <summary>
            Returns true if left <see cref="T:TVA.Media.Music.Note"/> timestamp is greater than right <see cref="T:TVA.Media.Music.Note"/>.
            </summary>
            <param name="note1">A <see cref="T:TVA.Media.Music.Note"/> left hand operand.</param>
            <param name="note2">A <see cref="T:TVA.Media.Music.Note"/> right hand operand.</param>
            <returns>A boolean indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.op_GreaterThanOrEqual(TVA.Media.Music.Note,TVA.Media.Music.Note)">
            <summary>
            Returns true if left <see cref="T:TVA.Media.Music.Note"/> timestamp is greater than or equal to right <see cref="T:TVA.Media.Music.Note"/>.
            </summary>
            <param name="note1">A <see cref="T:TVA.Media.Music.Note"/> left hand operand.</param>
            <param name="note2">A <see cref="T:TVA.Media.Music.Note"/> right hand operand.</param>
            <returns>A boolean indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.op_LessThan(TVA.Media.Music.Note,TVA.Media.Music.Note)">
            <summary>
            Returns true if left <see cref="T:TVA.Media.Music.Note"/> timestamp is less than right <see cref="T:TVA.Media.Music.Note"/>.
            </summary>
            <param name="note1">A <see cref="T:TVA.Media.Music.Note"/> left hand operand.</param>
            <param name="note2">A <see cref="T:TVA.Media.Music.Note"/> right hand operand.</param>
            <returns>A boolean indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.op_LessThanOrEqual(TVA.Media.Music.Note,TVA.Media.Music.Note)">
            <summary>
            Returns true if left <see cref="T:TVA.Media.Music.Note"/> timestamp is less than or equal to right <see cref="T:TVA.Media.Music.Note"/>.
            </summary>
            <param name="note1">A <see cref="T:TVA.Media.Music.Note"/> left hand operand.</param>
            <param name="note2">A <see cref="T:TVA.Media.Music.Note"/> right hand operand.</param>
            <returns>A boolean indicating the result of the comparison.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.NamedValueIndex(System.Double)">
            <summary>
            Returns closest note value index (for <see cref="T:TVA.Media.Music.NoteValue"/> or <see cref="T:TVA.Media.Music.NoteValueBritish"/>)
            given the relative duration of a note.
            </summary>
            <param name="value">Relative duration of the note.</param>
            <returns>Closest note value enumeration index given the relative duration of a note.</returns>
        </member>
        <member name="M:TVA.Media.Music.Note.GetFrequency(System.String)">
            <summary>
            Gets the specified note frequency.
            </summary>
            <param name="noteID">ID of the note to retrieve - expected format is "Note + Octave + S?" (e.g., A2 or C5S)</param>
            <returns>The specified note.</returns>
            <exception cref="T:System.ArgumentNullException">noteID is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid note ID format - expected "Note + Octave + S?" (e.g., A2 or C5S).</exception>
        </member>
        <member name="M:TVA.Media.Music.Note.GetFrequency(System.Char,System.Int32,System.Boolean)">
            <summary>
            Gets the specified note frequency.
            </summary>
            <param name="note">Note (A - G) to retrieve.</param>
            <param name="octave">Octave of the the note to retrieve (0 - 8).</param>
            <param name="sharp">Indicates to get the "sharp" version of the note.</param>
            <returns>The specified note.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Notes must be A - G, octaves must be 0 - 8, first note is C0, last note is D8S.</exception>
            <exception cref="T:System.ArgumentException">Sharps are not defined for notes 'B' and 'E'.</exception>
        </member>
        <member name="M:TVA.Media.Music.Note.GetNextID(System.String,System.Boolean)">
            <summary>
            Gets the next note ID in sequence after the specified note ID.
            </summary>
            <param name="noteID">ID of the current note - expected format is "Note + Octave + S?" (e.g., A2 or C5S)</param>
            <param name="includeSharps">Set to True to include sharp notes in the sequence.</param>
            <returns>The next note ID that is after the specified note ID.</returns>
            <exception cref="T:System.ArgumentNullException">noteID is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid note ID format - expected "Note + Octave + S?" (e.g., A2 or C5S).</exception>
        </member>
        <member name="M:TVA.Media.Music.Note.GetPreviousID(System.String,System.Boolean)">
            <summary>
            Gets the previous note ID in sequence before the specified note ID.
            </summary>
            <param name="noteID">ID of the current note - expected format is "Note + Octave + S?" (e.g., A2 or C5S)</param>
            <param name="includeSharps">Set to True to include sharp notes in the sequence.</param>
            <returns>The previous note ID that is before the specified note ID.</returns>
            <exception cref="T:System.ArgumentNullException">noteID is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid note ID format - expected "Note + Octave + S?" (e.g., A2 or C5S).</exception>
        </member>
        <member name="P:TVA.Media.Music.Note.Frequency">
            <summary>Gets or sets frequency of this note.</summary>
        </member>
        <member name="P:TVA.Media.Music.Note.ID">
            <summary>Gets or sets note ID of the note.</summary>
            <exception cref="T:System.ArgumentNullException">noteID is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid note ID format - expected "Note + Octave + S?" (e.g., A2 or C5S).</exception>
        </member>
        <member name="P:TVA.Media.Music.Note.Value">
            <summary>Get or sets the relative note value representing the length of the note.</summary>
        </member>
        <member name="P:TVA.Media.Music.Note.ValueTime">
            <summary>
            Gets the cached note value time, in seconds, calculated from a call to <see cref="M:TVA.Media.Music.Note.CalculateValueTime(TVA.Media.Music.Tempo)"/>.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Note.NamedValue">
            <summary>Get or sets the note value, expressed in American form, representing the length of the note.</summary>
        </member>
        <member name="P:TVA.Media.Music.Note.NamedValueBritish">
            <summary>Get or sets the note value, expressed in British form, representing the length of the note.</summary>
        </member>
        <member name="P:TVA.Media.Music.Note.Dots">
            <summary>Gets or sets the total dotted note length extensions that apply to this note.</summary>
            <remarks>This is only used in conjunction with the named note values.</remarks>
        </member>
        <member name="P:TVA.Media.Music.Note.Timbre">
            <summary>
            Gets or sets the individual tibre function used to synthesize the sounds
            for this note (i.e., the instrument). If this timbre function is not defined,
            the timbre of the song will be used for the note.
            </summary>
            <remarks>
            Set this value to null to use current timbre function of the song.
            </remarks>
        </member>
        <member name="P:TVA.Media.Music.Note.Damping">
            <summary>
            Gets or sets the individual damping function used to lower the sound volume
            for this note over time. If this damping function is not defined, the
            damping algorithm of the song will be used for the note.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Note.NamedDynamic">
            <summary>
            Gets or sets the named dynamic (i.e., volume) for this note.  If the dynamic
            is undefined, the dynamic of the song will be used.
            </summary>
            <remarks>
            Set this value to undefined to use the current dynamic of the song.
            </remarks>
        </member>
        <member name="P:TVA.Media.Music.Note.Dynamic">
            <summary>
            Gets or sets the dynamic (i.e., volume) expressed as percentage in
            the range of 0 to 1 for this note. If the dynamic is set to -1, the
            dynamic of the song will be used.
            </summary>
            <remarks>
            Set this value to -1 to use the current dynamic of the song.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Value must be expressed as a fractional percentage between zero and one.
            </exception>
        </member>
        <member name="P:TVA.Media.Music.Note.StartTimeIndex">
            <summary>Gets or sets start time index for this note.</summary>
            <remarks>This is typically assigned and used by host <see cref="T:TVA.Media.Music.Song"/></remarks>
        </member>
        <member name="P:TVA.Media.Music.Note.EndTimeIndex">
            <summary>Gets or sets end time index for this note.</summary>
            <remarks>This is typically assigned and used by host <see cref="T:TVA.Media.Music.Song"/></remarks>
        </member>
        <member name="P:TVA.Media.Music.Note.SamplePeriod">
            <summary>Gets or sets the sample period for this note.</summary>
            <remarks>This is typically assigned and used by host <see cref="T:TVA.Media.Music.Song"/></remarks>
        </member>
        <member name="T:TVA.IO.Checksums.NamespaceDoc">
            <summary>
            Contains classes and extension functions used to calculate standard checksums and CRC’s.
            </summary>
        </member>
        <member name="T:TVA.IO.Checksums.Crc32">
            <summary>
            Generates a byte-wise 32-bit CRC calculation.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC-32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:TVA.IO.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the integer value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to use for the update.</param>
        </member>
        <member name="M:TVA.IO.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">buffer an array of bytes</param>
        </member>
        <member name="M:TVA.IO.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name="buffer">The buffer which contains the data</param>
            <param name="offset">The offset in the buffer where the data starts</param>
            <param name="count">The number of data bytes to update the CRC with.</param>
        </member>
        <member name="P:TVA.IO.Checksums.Crc32.Value">
            <summary>
            Returns the CRC-32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:TVA.Endianness">
            <summary>Endian Byte Order Enumeration</summary>
        </member>
        <member name="F:TVA.Endianness.BigEndian">
            <summary>Big-endian byte order.</summary>
        </member>
        <member name="F:TVA.Endianness.LittleEndian">
            <summary>Little-endian byte order.</summary>
        </member>
        <member name="T:TVA.BigEndianOrder">
            <summary>
            Represents a big-endian byte order interoperability class.
            </summary>
        </member>
        <member name="T:TVA.EndianOrder">
            <summary>
            Represents an endian byte order interoperability class.
            </summary>
            <remarks>
            Intel systems use little-endian byte order, other systems, such as Unix, use big-endian byte ordering.
            Little-endian ordering means bits are ordered such that the bit whose in-memory representation is right-most is the most-significant-bit in a byte.
            Big-endian ordering means bits are ordered such that the bit whose in-memory representation is left-most is the most-significant-bit in a byte.
            </remarks>
        </member>
        <member name="M:TVA.EndianOrder.#ctor(TVA.Endianness)">
            <summary>
            Constructs a new instance of the <see cref="T:TVA.EndianOrder"/> class.
            </summary>
            <param name="targetEndianness">Endianness parameter.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBuffer(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies a buffer in the target endian-order of this <see cref="T:TVA.EndianOrder"/> representation.
            </summary>
            <param name="sourceBuffer">The source buffer.</param>
            <param name="sourceIndex">The byte offset into <paramref name="sourceBuffer"/>.</param>
            <param name="destinationBuffer">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationBuffer"/>.</param>
            <param name="length">The number of bytes to copy.</param>
        </member>
        <member name="M:TVA.EndianOrder.CoerceByteOrder(System.Byte[])">
            <summary>
            Changes the order of a buffer (reverse or pass-through) based on the target endian-order of this <see cref="T:TVA.EndianOrder"/> representation.
            </summary>
            <param name="buffer">Byte buffer to be coerced.</param>
            <returns>Coerced byte array.</returns>
        </member>
        <member name="M:TVA.EndianOrder.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToInt24(System.Byte[],System.Int32)">
            <summary>
            Returns a 24-bit signed integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 24-bit signed integer formed by three bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToUInt24(System.Byte[],System.Int32)">
            <summary>
            Returns a 24-bit unsigned integer converted from three bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 24-bit unsigned integer formed by three bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.ToGuid(System.Byte[],System.Int32)">
            <summary>
            Returns a <see cref="T:System.Guid"/> converted from sixteen bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A <see cref="T:System.Guid"/> formed by sixteen bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.Boolean)">
            <summary>
            Returns the specified <see cref="T:System.Boolean"/> value as an array of bytes in the target endian-order.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to convert.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes in the target endian-order.
            </summary>
            <param name="value">The Unicode character value to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes in the target endian-order.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(TVA.Int24)">
            <summary>
            Returns the specified 24-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 3.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes in the target endian-order.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(TVA.UInt24)">
            <summary>
            Returns the specified 24-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 3.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:TVA.EndianOrder.GetBytes(System.Guid)">
            <summary>
            Returns the specified <see cref="T:System.Guid"/> value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified <see cref="T:System.Boolean"/> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The Unicode character value to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(TVA.Int24,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 24-bit signed integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(TVA.UInt24,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 24-bit unsigned integer value as an array of 3 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The number to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="M:TVA.EndianOrder.CopyBytes(System.Guid,System.Byte[],System.Int32)">
            <summary>
            Copies the specified <see cref="T:System.Guid"/> value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> to convert and copy.</param>
            <param name="destinationArray">The destination buffer.</param>
            <param name="destinationIndex">The byte offset into <paramref name="destinationArray"/>.</param>
        </member>
        <member name="F:TVA.EndianOrder.BigEndian">
            <summary>Default instance of the Big-Endian byte order conversion class.</summary>
        </member>
        <member name="F:TVA.EndianOrder.LittleEndian">
            <summary>Default instance of the Little-Endian byte order conversion class.</summary>
        </member>
        <member name="P:TVA.EndianOrder.TargetEndianness">
            <summary>
            Returns the target endian-order of this <see cref="T:TVA.EndianOrder"/> representation.
            </summary>
        </member>
        <member name="M:TVA.BigEndianOrder.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:TVA.BigEndianOrder"/> class.
            </summary>
        </member>
        <member name="P:TVA.BigEndianOrder.Default">
            <summary>
            Returns the default instance of the <see cref="T:TVA.BigEndianOrder"/> class.
            </summary>
        </member>
        <member name="T:TVA.LittleEndianOrder">
            <summary>
            Represents a little-endian byte order interoperability class.
            </summary>
        </member>
        <member name="M:TVA.LittleEndianOrder.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:TVA.LittleEndianOrder"/> class.
            </summary>
        </member>
        <member name="P:TVA.LittleEndianOrder.Default">
            <summary>
            Returns the default instance of the <see cref="T:TVA.LittleEndianOrder"/> class.
            </summary>
        </member>
        <member name="T:TVA.NativeEndianOrder">
            <summary>
            Represents a native-endian byte order interoperability class.
            </summary>
        </member>
        <member name="M:TVA.NativeEndianOrder.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:TVA.NativeEndianOrder"/> class.
            </summary>
        </member>
        <member name="P:TVA.NativeEndianOrder.Default">
            <summary>
            Returns the default instance of the <see cref="T:TVA.NativeEndianOrder"/> class.
            </summary>
        </member>
        <member name="T:TVA.Diagnostics.PerformanceCounter">
             <summary>
             Represents an extension of the basic <see cref="T:System.Diagnostics.PerformanceCounter"/> providing additional statistical logic.
             </summary>
             <example>
             This example shows how to create a performance counter for processor utilization:
             <code>
             using System;
             using System.Threading;
             using TVA.Diagnostics;
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     PerformanceCounter counter = new PerformanceCounter("Processor", "% Processor Time", "_Total");
                     while (true)
                     {
                         Thread.Sleep(1000);
                         counter.Sample();
                         Console.WriteLine(string.Format("Last value: {0}", counter.LastValue));
                         Console.WriteLine(string.Format("Minimum value: {0}", counter.MinimumValue));
                         Console.WriteLine(string.Format("Maximum value: {0}", counter.MaximumValue));
                         Console.WriteLine(string.Format("Average value: {0}", counter.AverageValue));
                         Console.WriteLine(new string('-', 30));
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:TVA.Diagnostics.PerformanceCounter.DefaultValueUnit">
            <summary>
            Default measurement unit of the statistical values.
            </summary>
        </member>
        <member name="F:TVA.Diagnostics.PerformanceCounter.DefaultValueDivisor">
            <summary>
            Default divisor to be applied to the statistical value.
            </summary>
        </member>
        <member name="F:TVA.Diagnostics.PerformanceCounter.DefaultSamplingWindow">
            <summary>
            Default number of samples over which statistical values are to be calculated.
            </summary>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> class.
            </summary>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> class.
            </summary>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
            <param name="aliasName">The alias name for the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> class.
            </summary>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
            <param name="aliasName">The alias name for the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
            <param name="valueUnit">The measurement unit for the statistical values of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String,System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> class.
            </summary>
            <param name="categoryName">The name of the performance counter category (performance object) with which this performance counter is associated.</param>
            <param name="counterName">The name of the performance counter.</param>
            <param name="instanceName">The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.</param>
            <param name="aliasName">The alias name for the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
            <param name="valueUnit">The measurement unit for the statistical values of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
            <param name="valueDivisor">The divisor to be applied to the statistical values of the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceCounter.Finalize">
            <summary>
            Releases the unmanaged resources before the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object is reclaimed by <see cref="T:System.GC"/>.
            </summary>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceCounter.Dispose">
            <summary>
            Releases all the resources used by the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object.
            </summary>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceCounter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object and optionally 
            releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceCounter.Sample">
            <summary>
            Obtains a sample value from the <see cref="P:TVA.Diagnostics.PerformanceCounter.BaseCounter"/>.
            </summary>
        </member>
        <member name="M:TVA.Diagnostics.PerformanceCounter.Reset">
            <summary>
            Resets the <see cref="T:TVA.Diagnostics.PerformanceCounter"/> object to its initial state.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.AliasName">
            <summary>
            Gets or sets an alias name for the <see cref="T:TVA.Diagnostics.PerformanceCounter"/>.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.ValueUnit">
            <summary>
            Gets or sets the measurement unit of <see cref="P:TVA.Diagnostics.PerformanceCounter.LastValue"/>, <see cref="P:TVA.Diagnostics.PerformanceCounter.MinimumValue"/>, 
            <see cref="P:TVA.Diagnostics.PerformanceCounter.MaximumValue"/> and <see cref="P:TVA.Diagnostics.PerformanceCounter.AverageValue"/>
            </summary>
            <exception cref="T:System.ArgumentNullException">The value being assigned is a null or empty string.</exception>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.ValueDivisor">
            <summary>
            Gets or sets the divisor to be applied to the <see cref="P:TVA.Diagnostics.PerformanceCounter.LastValue"/>, <see cref="P:TVA.Diagnostics.PerformanceCounter.MinimumValue"/>, 
            <see cref="P:TVA.Diagnostics.PerformanceCounter.MaximumValue"/> and <see cref="P:TVA.Diagnostics.PerformanceCounter.AverageValue"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value being assigned is not greater than 0.</exception>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.SamplingWindow">
            <summary>
            Gets or sets the number of samples to use to determine the <see cref="P:TVA.Diagnostics.PerformanceCounter.LastValue"/>, 
            <see cref="P:TVA.Diagnostics.PerformanceCounter.MinimumValue"/>, <see cref="P:TVA.Diagnostics.PerformanceCounter.MaximumValue"/> and <see cref="P:TVA.Diagnostics.PerformanceCounter.AverageValue"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The value being assigned is not greater than 0.</exception>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.Samples">
            <summary>
            Gets a list of sampled values from the <see cref="P:TVA.Diagnostics.PerformanceCounter.BaseCounter"/>
            </summary>
            <remarks>
            Thread-safety Warning: Due to the asynchronous nature of <see cref="T:TVA.Diagnostics.PerformanceCounter"/>, a lock must be 
            obtained on <see cref="P:TVA.Diagnostics.PerformanceCounter.Samples"/> before accessing it.
            </remarks>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.LastValue">
            <summary>
            Gets the last sample value from the samples of the <see cref="P:TVA.Diagnostics.PerformanceCounter.BaseCounter"/>.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.MinimumValue">
            <summary>
            Gets the minimum sample value from the samples of the <see cref="P:TVA.Diagnostics.PerformanceCounter.BaseCounter"/>.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.MaximumValue">
            <summary>
            Gets the maximum sample value from the samples of the <see cref="P:TVA.Diagnostics.PerformanceCounter.BaseCounter"/>.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.AverageValue">
            <summary>
            Gets the average value from the samples of the <see cref="P:TVA.Diagnostics.PerformanceCounter.BaseCounter"/>.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.LifetimeMaximumValue">
            <summary>
            Gets the maximum sample value over the entire lifetime of the <see cref="P:TVA.Diagnostics.PerformanceCounter.BaseCounter"/>.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.LifetimeAverageValue">
            <summary>
            Gets the average sample value over the entire lifetime of the <see cref="P:TVA.Diagnostics.PerformanceCounter.BaseCounter"/>.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.LifetimeSampleCount">
            <summary>
            Gets the total values sampled over the entire lifetime of the <see cref="P:TVA.Diagnostics.PerformanceCounter.BaseCounter"/>.
            </summary>
        </member>
        <member name="P:TVA.Diagnostics.PerformanceCounter.BaseCounter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"/> object that this <see cref="T:TVA.Diagnostics.PerformanceCounter"/> objects wraps.
            </summary>
        </member>
        <member name="T:TVA.Collections.KeyedProcessQueue`2">
            <summary>
            Represents a keyed collection of items that get processed on independent threads with
            a consumer provided function.
            </summary>
            <typeparam name="TKey">Type of keys used to reference process items.</typeparam>
            <typeparam name="TValue">Type of values to process.</typeparam>
            <remarks>
            <para>This class acts as a strongly-typed sorted dictionary of objects to be processed.</para>
            <para>
            Consumers are expected to create new instances of this class through the static construction functions (e.g., 
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature)"/>, 
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature)"/>, etc.)
            </para>
            <para>Note that the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> will not start processing until the Start method is called.</para>
            <para>Because this <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> represents a dictionary style collection, all keys must be unique.</para>
            <para>
            Be aware that this class is based on a <see cref="T:TVA.Collections.DictionaryList`2"/> (i.e., a <see cref="T:System.Collections.Generic.SortedList`2"/>
            that implements <see cref="T:System.Collections.Generic.IList`1"/>), and since items in this kind of list are automatically sorted, items will be processed
            in "sorted" order regardless of the order in which they are added to the list.
            </para>
            <para>
            Important note about using an "Integer" as the key for this class: because the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> base class must
            implement IList, a normal dictionary cannot be used for the base class. IDictionary implementations
            do not normally implement the IList interface because of ambiguity that is caused when implementing
            an integer key. For example, if you implement this class with a key of type "Integer," you will not
            be able to access items in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> by index without "casting" the 
            <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> as IList. This is because the Item property in both the IDictionary and IList would
            have the same parameters (see the <see cref="T:TVA.Collections.DictionaryList`2"/> class for more details.).
            </para>
            </remarks>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.#ctor(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a ProcessList based on the generic DictionaryList class.
            </summary>
            <param name="processItemFunction">A delegate <see cref="T:TVA.Collections.KeyedProcessQueue`2.ProcessItemFunctionSignature"/> that defines a function signature to process a key and value one at a time.</param>
            <param name="canProcessItemFunction">A delegate <see cref="T:TVA.Collections.KeyedProcessQueue`2.CanProcessItemFunctionSignature"/> that determines of a key and value can currently be processed.</param>
            <param name="processInterval">A <see cref="T:System.Double"/> which represents the process interval.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> that represents the max number of threads to use.</param>
            <param name="processTimeout">An <see cref="T:System.Int32"/> that represents the amount of time before a process times out.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether the process should requeue the item after a timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether the process should requeue the item after an exception.</param>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.#ctor(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a bulk-item ProcessList based on the generic DictionaryList class.
            </summary>
            <param name="processItemsFunction">A delegate ProcessItemsFunctionSignature that defines a function signature to process multiple items at once.</param>
            <param name="canProcessItemFunction">A delegate <see cref="T:TVA.Collections.KeyedProcessQueue`2.CanProcessItemFunctionSignature"/> that determines of a key and value can currently be processed.</param>
            <param name="processInterval">A <see cref="T:System.Double"/> which represents the process interval.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> that represents the max number of threads to use.</param>
            <param name="processTimeout">An <see cref="T:System.Int32"/> that represents the amount of time before a process times out.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether the process should requeue the item after a timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether the process should requeue the item after an exception.</param>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.Add(`0,`1)">
            <summary>Adds an element with the provided key and value to the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</summary>
            <param name="value">The object to use as the value of the element to add.</param>
            <param name="key">The object to use as the key of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> contains an element with the specified key.</summary>
            <returns>True, if the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> contains an element with the key; otherwise, false.</returns>
            <param name="key">The key to locate in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.ContainsValue(`1)">
            <summary>Determines whether the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> contains an element with the specified value.</summary>
            <returns>True, if the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> contains an element with the value; otherwise, false.</returns>
            <param name="value">The value to locate in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</param>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.IndexOfKey(`0)">
            <summary>
            Searches for the specified key and returns the zero-based index within the entire <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</param>
            <returns>The zero-based index of key within the entire <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.IndexOfValue(`1)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence within the entire <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.
            </summary>
            <param name="value">The value to locate in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of value within the entire <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.Remove(`0)">
            <summary>Removes the element with the specified key from the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <returns>This method returns a <see cref="T:System.Boolean"/> value indicating whether the item was removed.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.TryGetValue(`0,`1@)">
            <summary>Gets the value associated with the specified key.</summary>
            <returns>True, if the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> contains an element with the specified key; otherwise, false.</returns>
            <param name="value">When this method returns, contains the value associated with the specified key, if the
            key is found; otherwise, the default value for the type of the value parameter. This parameter is passed
            uninitialized.</param>
            <param name="key">The key of the value to get.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.BinarySearch(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            This function doesn't have the same meaning in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> as it does in
            <see cref="T:TVA.Collections.ProcessQueue`1"/>, so it is marked as hidden from the editor.  However it returns
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.IndexOfKey(`0)"/> so that it returns a value that at least makes sense
            in case it gets called.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>This method returns an <see cref="T:System.Int32"/> that is the index of the item.Key.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.BinarySearch(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            This function doesn't have the same meaning in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> as it does in
            <see cref="T:TVA.Collections.ProcessQueue`1"/>, so it is marked as hidden from the editor.  However it returns
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.IndexOfKey(`0)"/> so that it returns a value that at least makes sense
            in case it gets called.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The Generic.IComparer implementation to use when comparing elements -or-
            null to use the default comparer: Generic.Comparer(Of T).Default</param>
            <returns>This method returns an <see cref="T:System.Int32"/> that is the index of the item.Key.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.BinarySearch(System.Int32,System.Int32,System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            This function doesn't have the same meaning in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> as it does in
            <see cref="T:TVA.Collections.ProcessQueue`1"/>, so it is marked as hidden from the editor.  However it returns
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.IndexOfKey(`0)"/> so that it returns a value that at least makes sense
            in case it gets called.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The Generic.IComparer implementation to use when comparing elements -or- null to use
            the default comparer: Generic.Comparer(Of T).Default</param>
            <returns>This method returns an <see cref="T:System.Int32"/> that is the index of the item.Key.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.IndexOf(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            This function doesn't have the same meaning in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> as it does in
            <see cref="T:TVA.Collections.ProcessQueue`1"/>, so it is marked as hidden from the editor.  However it returns
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.IndexOfKey(`0)"/> so that it returns a value that at least makes sense
            in case it gets called.
            </summary>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
            <returns>This method returns an <see cref="T:System.Int32"/> that is the index of the item.Key.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.IndexOf(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32,System.Int32)">
            <summary>
            This function doesn't have the same meaning in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> as it does in
            <see cref="T:TVA.Collections.ProcessQueue`1"/>, so it is marked as hidden from the editor.  However it returns
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.IndexOfKey(`0)"/> so that it returns a value that at least makes sense
            in case it gets called.
            </summary>
            <param name="count">The number of elements in the section to search.</param>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search.</param>
            <returns>This method returns an <see cref="T:System.Int32"/> that is the index of the item.Key.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.LastIndexOf(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            This function doesn't have the same meaning in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> as it does in
            <see cref="T:TVA.Collections.ProcessQueue`1"/>, so it is marked as hidden from the editor.  However it returns
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.IndexOfKey(`0)"/> so that it returns a value that at least makes sense
            in case it gets called.
            </summary>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
            <returns>This method returns an <see cref="T:System.Int32"/> that is the index of the item.Key.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.LastIndexOf(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)">
            <summary>
            This function doesn't have the same meaning in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> as it does in
            <see cref="T:TVA.Collections.ProcessQueue`1"/>, so it is marked as hidden from the editor.  However it returns
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.IndexOfKey(`0)"/> so that it returns a value that at least makes sense
            in case it gets called.
            </summary>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>This method returns an <see cref="T:System.Int32"/> that is the index of the item.Key.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.LastIndexOf(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32,System.Int32)">
            <summary>
            This function doesn't have the same meaning in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> as it does in
            <see cref="T:TVA.Collections.ProcessQueue`1"/>, so it is marked as hidden from the editor.  However it returns
            <see cref="M:TVA.Collections.KeyedProcessQueue`2.IndexOfKey(`0)"/> so that it returns a value that at least makes sense
            in case it gets called.
            </summary>
            <param name="item">The object to locate in the <see cref="T:TVA.Collections.ProcessQueue`1"/>. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>This method returns an <see cref="T:System.Int32"/> that is the index of the item.Key.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.Sort">
            <summary>
            <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> is based on a <see cref="T:TVA.Collections.DictionaryList`2"/> which is already
            sorted, so calling this function has no effect.  As a result this function is marked as hidden from the editor.
            </summary>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.Sort(System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> is based on a <see cref="T:TVA.Collections.DictionaryList`2"/> which is already
            sorted, so calling this function has no effect.  As a result this function is marked as hidden from the editor.
            </summary>
            <param name="comparer">The Generic.IComparer implementation to use when comparing elements -or-
            null to use the default comparer: Generic.Comparer(Of T).Default</param>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.Sort(System.Comparison{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> is based on a <see cref="T:TVA.Collections.DictionaryList`2"/> which is already
            sorted, so calling this function has no effect.  As a result this function is marked as hidden from the editor.
            </summary>
            <param name="comparison">The comparison to use when comparing elements.</param>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> is based on a <see cref="T:TVA.Collections.DictionaryList`2"/> which is already
            sorted, so calling this function has no effect.  As a result this function is marked as hidden from the editor.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="comparer">The Generic.IComparer implementation to use when comparing elements -or-
            null to use the default comparer: Generic.Comparer(Of T).Default</param>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature)">
            <summary>
            Creates a new, keyed, asynchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessInterval = 100,
            MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new, keyed, asynchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessInterval = 100,
            MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="canProcessItemFunction">A delegate which defines a method to indicate whether a key and value can be processed at this time.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,System.Int32)">
            <summary>
            Creates a new, keyed, asynchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessInterval = 100,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="maximumThreads">The maximum number of threads for the queue to use.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Int32)">
            <summary>
            Creates a new, keyed, asynchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessInterval = 100,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="canProcessItemFunction">A delegate which defines a method to indicate whether a key and value can be processed at this time.</param>
            <param name="maximumThreads">The maximum number of threads for the queue to use.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new, keyed, asynchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, using specified settings.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="maximumThreads">The maximum number of threads for the queue to use.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new, keyed, asynchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, using specified settings.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="canProcessItemFunction">A delegate which defines a method to indicate whether a key and value can be processed at this time.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="maximumThreads">The maximum number of threads for the queue to use.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature)">
            <summary>
            Creates a new, keyed, synchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> (i.e., single process thread) with the default settings:
            ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new, keyed, synchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> (i.e., single process thread) with the default settings:
            ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="canProcessItemFunction">A delegate which defines a method to indicate whether a key and value can be processed at this time.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new, keyed, synchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> (i.e., single process thread), using specified settings.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new, keyed, synchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> (i.e., single process thread), using specified settings.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="canProcessItemFunction">A delegate which defines a method to indicate whether a key and value can be processed at this time.</param>
            <param name="processInterval">a <see cref="T:System.Double"/> value which represents the process interval in milliseconds.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature)">
            <summary>
            Creates a new, keyed, real-time <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessTimeout = Infinite,
            RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new, keyed, real-time <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessTimeout = Infinite,
            RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="canProcessItemFunction">A delegate which defines a method to indicate whether a key and value can be processed at this time.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new, keyed, real-time <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, using specified settings.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(TVA.Collections.KeyedProcessQueue{`0,`1}.ProcessItemFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new, keyed, real-time <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, using the specified settings.
            </summary>
            <param name="processItemFunction">Delegate which defines a method to process a key and value one at a time.</param>
            <param name="canProcessItemFunction">A delegate which defines a method to indicate whether a key and value can be processed at this time.</param>
            <param name="processTimeout">The number of seconds before a process should timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue KeyedProcessQueue.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature)">
            <summary>
            Creates a new asynchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessInterval = 100,
            MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new asynchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessInterval = 100,
            MaximumThreads = 5, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="canProcessItemFunction">Delegate which defines a method to know if a key and value can currently be processed.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,System.Int32)">
            <summary>
            Creates a new asynchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessInterval = 100,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value indicating the maximum number of threads to use for processing items.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Int32)">
            <summary>
            Creates a new asynchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessInterval = 100,
            ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="canProcessItemFunction">Delegate which defines a method to know if a key and value can currently be processed.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value indicating the maximum number of threads to use for processing items.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new asynchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="processInterval">Number of milliseconds between each process.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value indicating the maximum number of threads to use for processing items.</param>
            <param name="processTimeout">An <see cref="T:System.Int32"/> value indicating the number of seconds to wait for a process timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateAsynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new asynchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="canProcessItemFunction">Delegate which defines a method to know if a key and value can currently be processed.</param>
            <param name="processInterval">Number of milliseconds between each process.</param>
            <param name="maximumThreads">An <see cref="T:System.Int32"/> value indicating the maximum number of threads to use for processing items.</param>
            <param name="processTimeout">An <see cref="T:System.Int32"/> value indicating the number of seconds to wait for a process timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature)">
            <summary>
            Creates a new synchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> (i.e., single process thread) with the default settings:
            ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new synchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> (i.e., single process thread) with the default settings:
            ProcessInterval = 100, ProcessTimeout = Infinite, RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="canProcessItemFunction">Delegate which defines a method to know if a key and value can currently be processed.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new synchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> (i.e., single process thread), using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="processInterval">Number of milliseconds between each process.</param>
            <param name="processTimeout">An <see cref="T:System.Int32"/> value indicating the number of seconds to wait for a process timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateSynchronousQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new synchronous bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> (i.e., single process thread), using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="canProcessItemFunction">Delegate which defines a method to know if a key and value can currently be processed.</param>
            <param name="processInterval">Number of milliseconds between each process.</param>
            <param name="processTimeout">An <see cref="T:System.Int32"/> value indicating the number of seconds to wait for a process timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature)">
            <summary>
            Creates a new real-time bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessTimeout = Infinite,
            RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature)">
            <summary>
            Creates a new real-time bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> with the default settings: ProcessTimeout = Infinite,
            RequeueOnTimeout = False, RequeueOnException = False.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="canProcessItemFunction">Delegate which defines a method to know if a key and value can currently be processed.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new real-time bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="processTimeout">An <see cref="T:System.Int32"/> value indicating the number of seconds to wait for a process timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="M:TVA.Collections.KeyedProcessQueue`2.CreateRealTimeQueue(TVA.Collections.ProcessQueue{System.Collections.Generic.KeyValuePair{`0,`1}}.ProcessItemsFunctionSignature,TVA.Collections.KeyedProcessQueue{`0,`1}.CanProcessItemFunctionSignature,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new real-time bulk-item <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>, using specified settings.
            </summary>
            <param name="processItemsFunction">Delegate which defines a method to process at once.</param>
            <param name="canProcessItemFunction">Delegate which defines a method to know if a key and value can currently be processed.</param>
            <param name="processTimeout">An <see cref="T:System.Int32"/> value indicating the number of seconds to wait for a process timeout.</param>
            <param name="requeueOnTimeout">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue an item on timeout.</param>
            <param name="requeueOnException">A <see cref="T:System.Boolean"/> value that indicates whether a process should requeue after an exception.</param>
            <returns>Returns the process queue <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="P:TVA.Collections.KeyedProcessQueue`2.ProcessItemFunction">
            <summary>
            Gets or sets the user function used to process items in the list one at a time.
            </summary>
            <remarks>
            <para>This function and <see cref="P:TVA.Collections.KeyedProcessQueue`2.ProcessItemFunction"/> cannot be defined at the same time.</para>
            <para>A <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> must be defined to process either a single item at a time or many items at once.</para>
            <para>Implementation of this function makes <see cref="T:TVA.Collections.QueueProcessingStyle"/> = OneAtATime.</para>
            </remarks>
        </member>
        <member name="P:TVA.Collections.KeyedProcessQueue`2.ProcessItemsFunction">
            <summary>
            Gets or sets the user function used to process multiple items in the list at once.
            </summary>
            <remarks>
            <para>This function and <see cref="P:TVA.Collections.KeyedProcessQueue`2.ProcessItemFunction"/> cannot be defined at the same time.</para>
            <para>A <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> must be defined to process either a single item at a time or many items at once.</para>
            <para>Implementation of this function makes <see cref="T:TVA.Collections.QueueProcessingStyle"/> = ManyAtOnce.</para>
            </remarks>
        </member>
        <member name="P:TVA.Collections.KeyedProcessQueue`2.CanProcessItemFunction">
            <summary>
            Gets or sets the user function used to determine if an item is ready to be processed.
            </summary>
        </member>
        <member name="P:TVA.Collections.KeyedProcessQueue`2.Name">
            <summary>
            Gets the class name.
            </summary>
            <returns>Class name.</returns>
            <remarks>
            <para>This name is used for class identification in strings (e.g., used in error message).</para>
            <para>Derived classes should override this method with a proper class name.</para>
            </remarks>
        </member>
        <member name="P:TVA.Collections.KeyedProcessQueue`2.Item(`0)">
            <summary>Gets or sets the value associated with the specified key.</summary>
            <returns>The value associated with the specified key. If the specified key is not found, a get operation
            throws a KeyNotFoundException, and a set operation creates a new element with the specified key.</returns>
            <param name="key">The key of the value to get or set.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key does not exist in the collection.</exception>
        </member>
        <member name="P:TVA.Collections.KeyedProcessQueue`2.Keys">
            <summary>Gets an ICollection containing the keys of the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</summary>
            <returns>An ICollection containing the keys of the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="P:TVA.Collections.KeyedProcessQueue`2.Values">
            <summary>Gets an ICollection containing the values of the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</summary>
            <returns>An ICollection containing the values of the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>.</returns>
        </member>
        <member name="P:TVA.Collections.KeyedProcessQueue`2.InternalDictionary">
            <summary>
            Gets the internal sorted dictionary for direct use by derived classes.
            </summary>
        </member>
        <member name="T:TVA.Collections.KeyedProcessQueue`2.ProcessItemFunctionSignature">
            <summary>
            Function signature that defines a method to process a key and value one at a time.
            </summary>
            <param name="key">key to be processed.</param>
            <param name="value">value to be processed.</param>
            <remarks>
            <para>Required unless <see cref="P:TVA.Collections.KeyedProcessQueue`2.ProcessItemsFunction"/> is implemented.</para>
            <para>Used when creating a <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> to process one item at a time.</para>
            <para>Asynchronous <see cref="T:TVA.Collections.KeyedProcessQueue`2"/> will process individual items on multiple threads</para>
            </remarks>
        </member>
        <member name="T:TVA.Collections.KeyedProcessQueue`2.CanProcessItemFunctionSignature">
            <summary>
            Function signature that determines if a key and value can be currently processed.
            </summary>
            <param name="key">key to be checked for processing availablity.</param>
            <param name="value">value to be checked for processing availablity.</param>
            <returns>True, if key and value can be processed.</returns>
            <remarks>
            <para>Implementation of this function is optional. It will be assumed that an item can be processed if this
            function is not defined</para>
            <para>Items must eventually get to a state where they can be processed or they will remain in the <see cref="T:TVA.Collections.KeyedProcessQueue`2"/>
            indefinitely.</para>
            <para>
            Note that when this function is implemented and <see cref="T:TVA.Collections.QueueProcessingStyle"/> = ManyAtOnce (i.e., 
            <see cref="P:TVA.Collections.KeyedProcessQueue`2.ProcessItemsFunction"/> is defined), then each item presented
            for processing must evaluate as "CanProcessItem = True" before any items are processed.
            </para>
            </remarks>
        </member>
        <member name="T:TVA.UnixTimeTag">
            <summary>
            Represents a standard Unix timetag.
            </summary>
        </member>
        <member name="M:TVA.UnixTimeTag.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.UnixTimeTag"/>, given number of seconds since 1/1/1970.
            </summary>
            <param name="seconds">Number of seconds since 1/1/1970.</param>
        </member>
        <member name="M:TVA.UnixTimeTag.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:TVA.UnixTimeTag"/>, given number of seconds since 1/1/1970.
            </summary>
            <param name="seconds">Number of seconds since 1/1/1970.</param>
        </member>
        <member name="M:TVA.UnixTimeTag.#ctor(TVA.Ticks)">
            <summary>
            Creates a new <see cref="T:TVA.UnixTimeTag"/>, given specified <see cref="T:TVA.Ticks"/>.
            </summary>
            <param name="timestamp">Timestamp in <see cref="T:TVA.Ticks"/> to create Unix timetag from (minimum valid date is 1/1/1970).</param>
            <remarks>
            This constructor will accept a <see cref="T:System.DateTime"/> parameter since <see cref="T:TVA.Ticks"/> is implicitly castable to a <see cref="T:System.DateTime"/>.
            </remarks>
        </member>
        <member name="M:TVA.UnixTimeTag.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:TVA.UnixTimeTag"/> from serialization parameters.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with populated with data.</param>
            <param name="context">The source <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this deserialization.</param>
        </member>
        <member name="T:TVA.Units.Energy">
            <summary>Represents an energy measurement, in joules (i.e., watt-seconds), as a double-precision floating-point number.</summary>
            <remarks>
            This class behaves just like a <see cref="T:System.Double"/> representing an energy in joules; it is implictly
            castable to and from a <see cref="T:System.Double"/> and therefore can be generally used "as" a double, but it
            has the advantage of handling conversions to and from other energy representations, specifically
            watt-hours, BTU, Celsius heat unit, liter-atmosphere, calorie, horsepower-hour, barrel of oil and ton of coal.
            Metric conversions are handled simply by applying the needed <see cref="T:TVA.Units.SI"/> conversion factor, for example:
            <example>
            Convert energy in joules to megajoules:
            <code>
            public double GetMegajoules(Energy joules)
            {
                return joules / SI.Mega;
            }
            </code>
            This example converts megajoules to kilowatt-hours:
            <code>
            public double GetKilowattHours(double megajoules)
            {
                return (new Energy(megajoules * SI.Mega)).ToWattHours() / SI.Kilo;
            }
            </code>
            This example converts kilowatt-hours to megawatt-hours:
            <code>
            public double GetMegawattHours(double kilowattHours)
            {
                return (kilowattHours * SI.Kilo) / SI.Mega;
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:TVA.Units.Energy.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Energy"/>.
            </summary>
            <param name="value">New energy value in joules.</param>
        </member>
        <member name="M:TVA.Units.Energy.ToCoulombs(TVA.Units.Voltage)">
            <summary>
            Gets the <see cref="T:TVA.Units.Charge"/> value in coulombs given the specified <paramref name="volts"/>.
            </summary>
            <param name="volts">Source <see cref="T:TVA.Units.Voltage"/> used to calculate <see cref="T:TVA.Units.Charge"/> value.</param>
            <returns><see cref="T:TVA.Units.Charge"/> value in coulombs given the specified <paramref name="volts"/>.</returns>
        </member>
        <member name="M:TVA.Units.Energy.ToWattHours">
            <summary>
            Gets the <see cref="T:TVA.Units.Energy"/> value in watt-hours.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Energy"/> in watt-hours.</returns>
        </member>
        <member name="M:TVA.Units.Energy.ToBTU">
            <summary>
            Gets the <see cref="T:TVA.Units.Energy"/> value in BTU (International Table).
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Energy"/> in BTU.</returns>
        </member>
        <member name="M:TVA.Units.Energy.ToCelsiusHeatUnits">
            <summary>
            Gets the <see cref="T:TVA.Units.Energy"/> value in Celsius heat units (International Table).
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Energy"/> in Celsius heat units.</returns>
        </member>
        <member name="M:TVA.Units.Energy.ToLitersAtmosphere">
            <summary>
            Gets the <see cref="T:TVA.Units.Energy"/> value in liters-atmosphere.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Energy"/> in liters-atmosphere.</returns>
        </member>
        <member name="M:TVA.Units.Energy.ToCalories">
            <summary>
            Gets the <see cref="T:TVA.Units.Energy"/> value in calories (International Table).
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Energy"/> in calories.</returns>
        </member>
        <member name="M:TVA.Units.Energy.ToHorsepowerHours">
            <summary>
            Gets the <see cref="T:TVA.Units.Energy"/> value in horsepower-hours.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Energy"/> in horsepower-hours.</returns>
        </member>
        <member name="M:TVA.Units.Energy.ToBarrelsOfOil">
            <summary>
            Gets the <see cref="T:TVA.Units.Energy"/> value in equivalent barrels of oil.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Energy"/> in equivalent barrels of oil.</returns>
        </member>
        <member name="M:TVA.Units.Energy.ToTonsOfCoal">
            <summary>
            Gets the <see cref="T:TVA.Units.Energy"/> value in equivalent tons of coal.
            </summary>
            <returns>Value of <see cref="T:TVA.Units.Energy"/> in equivalent tons of coal.</returns>
        </member>
        <member name="M:TVA.Units.Energy.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Energy"/>.</exception>
        </member>
        <member name="M:TVA.Units.Energy.CompareTo(TVA.Units.Energy)">
            <summary>
            Compares this instance to a specified <see cref="T:TVA.Units.Energy"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">An <see cref="T:TVA.Units.Energy"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.CompareTo(System.Double)">
            <summary>
            Compares this instance to a specified <see cref="T:System.Double"/> and returns an indication of their
            relative values.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. Returns less than zero
            if this instance is less than value, zero if this instance is equal to value, or greater than zero
            if this instance is greater than value.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            True if obj is an instance of <see cref="T:System.Double"/> or <see cref="T:TVA.Units.Energy"/> and equals the value of this instance;
            otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.Equals(TVA.Units.Energy)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:TVA.Units.Energy"/> value.
            </summary>
            <param name="obj">An <see cref="T:TVA.Units.Energy"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.Equals(System.Double)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="obj">A <see cref="T:System.Double"/> value to compare to this instance.</param>
            <returns>
            True if obj has the same value as this instance; otherwise, False.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            The string representation of the value of this instance, consisting of a minus sign if
            the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using
            the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            The string representation of the value of this instance as specified by format.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified culture-specific format information.
            </summary>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation using the
            specified format and culture-specific format information.
            </summary>
            <param name="format">A format specification.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as specified by format and provider.
            </returns>
        </member>
        <member name="M:TVA.Units.Energy.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Energy"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <returns>
            An <see cref="T:TVA.Units.Energy"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Energy.MinValue"/> or greater than <see cref="F:TVA.Units.Energy.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Energy.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its <see cref="T:TVA.Units.Energy"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <returns>
            An <see cref="T:TVA.Units.Energy"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Energy.MinValue"/> or greater than <see cref="F:TVA.Units.Energy.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Energy.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its <see cref="T:TVA.Units.Energy"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            An <see cref="T:TVA.Units.Energy"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Energy.MinValue"/> or greater than <see cref="F:TVA.Units.Energy.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in the correct format.</exception>
        </member>
        <member name="M:TVA.Units.Energy.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:TVA.Units.Energy"/> equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about s.
            </param>
            <returns>
            An <see cref="T:TVA.Units.Energy"/> equivalent to the number contained in s.
            </returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than <see cref="F:TVA.Units.Energy.MinValue"/> or greater than <see cref="F:TVA.Units.Energy.MaxValue"/>.
            </exception>
            <exception cref="T:System.FormatException">s is not in a format compliant with style.</exception>
        </member>
        <member name="M:TVA.Units.Energy.TryParse(System.String,TVA.Units.Energy@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:TVA.Units.Energy"/> equivalent. A return value
            indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Energy"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parajoule is null,
            is not of the correct format, or represents a number less than <see cref="F:TVA.Units.Energy.MinValue"/> or greater than <see cref="F:TVA.Units.Energy.MaxValue"/>.
            This parajoule is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TVA.Units.Energy.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TVA.Units.Energy@)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:TVA.Units.Energy"/> equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates the permitted format of s.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:TVA.Units.Energy"/> value equivalent to the number contained in s,
            if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parajoule is null,
            is not in a format compliant with style, or represents a number less than <see cref="F:TVA.Units.Energy.MinValue"/> or
            greater than <see cref="F:TVA.Units.Energy.MaxValue"/>. This parajoule is passed uninitialized.
            </param>
            <param name="provider">
            A <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting information about s.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is not a combination of
            System.Globalization.NumberStyles.AllowHexSpecifier and System.Globalization.NumberStyles.HexNumber values.
            </exception>
        </member>
        <member name="M:TVA.Units.Energy.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:System.Double"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.Double"/>.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Equality(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Compares the two values for equality.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Inequality(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Compares the two values for inequality.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_LessThan(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns true if left value is less than right value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_LessThanOrEqual(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns true if left value is less or equal to than right value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_GreaterThan(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns true if left value is greater than right value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_GreaterThanOrEqual(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns true if left value is greater than or equal to right value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Boolean"/> as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Implicit(System.Double)~TVA.Units.Energy">
            <summary>
            Implicitly converts value, represented in joules, to an <see cref="T:TVA.Units.Energy"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>An <see cref="T:TVA.Units.Energy"/> object.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Implicit(TVA.Units.Energy)~System.Double">
            <summary>
            Implicitly converts <see cref="T:TVA.Units.Energy"/>, represented in joules, to a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">An <see cref="T:TVA.Units.Energy"/> object.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Modulus(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns computed remainder after dividing first value by the second.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Energy"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Addition(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns computed sum of values.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Energy"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Subtraction(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns computed difference of values.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Energy"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Multiply(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns computed product of values.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Energy"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Division(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns computed division of values.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>An <see cref="T:TVA.Units.Energy"/> object as the result of the operation.</returns>
        </member>
        <member name="M:TVA.Units.Energy.op_Exponent(TVA.Units.Energy,TVA.Units.Energy)">
            <summary>
            Returns result of first value raised to power of second value.
            </summary>
            <param name="value1">An <see cref="T:TVA.Units.Energy"/> object as the left hand operand.</param>
            <param name="value2">An <see cref="T:TVA.Units.Energy"/> object as the right hand operand.</param>
            <returns>A <see cref="T:System.Double"/> value as the result of the operation.</returns>
        </member>
        <member name="F:TVA.Units.Energy.MaxValue">
            <summary>Represents the largest possible value of an <see cref="T:TVA.Units.Energy"/>. This field is constant.</summary>
        </member>
        <member name="F:TVA.Units.Energy.MinValue">
            <summary>Represents the smallest possible value of an <see cref="T:TVA.Units.Energy"/>. This field is constant.</summary>
        </member>
        <member name="M:TVA.Units.Energy.FromWattHours(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Energy"/> value from the specified <paramref name="value"/> in watt-hours.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Energy"/> value in watt-hours.</param>
            <returns>New <see cref="T:TVA.Units.Energy"/> object from the specified <paramref name="value"/> in watt-hours.</returns>
        </member>
        <member name="M:TVA.Units.Energy.FromBTU(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Energy"/> value from the specified <paramref name="value"/> in BTU (International Table).
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Energy"/> value in BTU.</param>
            <returns>New <see cref="T:TVA.Units.Energy"/> object from the specified <paramref name="value"/> in BTU.</returns>
        </member>
        <member name="M:TVA.Units.Energy.FromCelsiusHeatUnits(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Energy"/> value from the specified <paramref name="value"/> in Celsius heat units (International Table).
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Energy"/> value in Celsius heat units.</param>
            <returns>New <see cref="T:TVA.Units.Energy"/> object from the specified <paramref name="value"/> in Celsius heat units.</returns>
        </member>
        <member name="M:TVA.Units.Energy.FromLitersAtmosphere(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Energy"/> value from the specified <paramref name="value"/> in liters-atmosphere.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Energy"/> value in liters-atmosphere.</param>
            <returns>New <see cref="T:TVA.Units.Energy"/> object from the specified <paramref name="value"/> in liters-atmosphere.</returns>
        </member>
        <member name="M:TVA.Units.Energy.FromCalories(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Energy"/> value from the specified <paramref name="value"/> in calories (International Table).
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Energy"/> value in calories.</param>
            <returns>New <see cref="T:TVA.Units.Energy"/> object from the specified <paramref name="value"/> in calories.</returns>
        </member>
        <member name="M:TVA.Units.Energy.FromHorsepowerHours(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Energy"/> value from the specified <paramref name="value"/> in horsepower-hours.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Energy"/> value in horsepower-hours.</param>
            <returns>New <see cref="T:TVA.Units.Energy"/> object from the specified <paramref name="value"/> in horsepower-hours.</returns>
        </member>
        <member name="M:TVA.Units.Energy.FromBarrelsOfOil(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Energy"/> value from the specified <paramref name="value"/> in equivalent barrels of oil.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Energy"/> value in equivalent barrels of oil.</param>
            <returns>New <see cref="T:TVA.Units.Energy"/> object from the specified <paramref name="value"/> in equivalent barrels of oil.</returns>
        </member>
        <member name="M:TVA.Units.Energy.FromTonOfCoal(System.Double)">
            <summary>
            Creates a new <see cref="T:TVA.Units.Energy"/> value from the specified <paramref name="value"/> in equivalent tons of coal.
            </summary>
            <param name="value">New <see cref="T:TVA.Units.Energy"/> value in equivalent tons of coal.</param>
            <returns>New <see cref="T:TVA.Units.Energy"/> object from the specified <paramref name="value"/> in equivalent tons of coal.</returns>
        </member>
        <member name="T:TVA.ProcessProgress`1">
            <summary>
            Represents current process progress for an operation.
            </summary>
            <remarks>
            Used to track total progress of an identified operation.
            </remarks>
            <typeparam name="TUnit">Unit of progress used (long, double, int, etc.)</typeparam>
        </member>
        <member name="M:TVA.ProcessProgress`1.#ctor(System.String)">
            <summary>
            Constructs a new instance of the <see cref="T:TVA.ProcessProgress`1"/> class using specified process name.
            </summary>
            <param name="processName">Name of process for which progress is being monitored.</param>
        </member>
        <member name="M:TVA.ProcessProgress`1.#ctor(System.String,System.String,`0,`0)">
            <summary>
            Constructs a new instance of the <see cref="T:TVA.ProcessProgress`1"/> class using specified parameters.
            </summary>
            <param name="processName">Name of process for which progress is being monitored.</param>
            <param name="processMessage">Current processing message, if any.</param>
            <param name="total">Total number of units to be processed.</param>
            <param name="complete">Number of units completed processing so far.</param>
        </member>
        <member name="P:TVA.ProcessProgress`1.ProcessName">
            <summary>
            Gets or sets name of process for which progress is being monitored.
            </summary>
        </member>
        <member name="P:TVA.ProcessProgress`1.ProgressMessage">
            <summary>
            Gets or sets current progress message (e.g., current file being copied, etc.)
            </summary>
        </member>
        <member name="P:TVA.ProcessProgress`1.Total">
            <summary>
            Gets or sets total number of units to be processed.
            </summary>
        </member>
        <member name="P:TVA.ProcessProgress`1.Complete">
            <summary>
            Gets or sets number of units completed processing so far.
            </summary>
        </member>
        <member name="T:TVA.NumericalAnalysis.NumericalAnalysisExtensions">
            <summary>Defines extension functions related to numerical analysis over a sequence of data.</summary>
        </member>
        <member name="M:TVA.NumericalAnalysis.NumericalAnalysisExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Computes the standard deviation over a sequence of double values.</summary>
            <param name="source">Source data sample.</param>
            <returns>The standard deviation of the sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:TVA.NumericalAnalysis.NumericalAnalysisExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>Computes the standard deviation over a sequence of decimal values.</summary>
            <param name="source">Source data sample.</param>
            <returns>The standard deviation of the sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:TVA.NumericalAnalysis.NumericalAnalysisExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Computes the standard deviation over a sequence of float values.</summary>
            <param name="source">Source data sample.</param>
            <returns>The standard deviation of the sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="T:TVA.Net.Ftp.NamespaceDoc">
            <summary>
            Contains classes used to create client connections to FTP servers for uploading and downloading files.
            </summary>
        </member>
        <member name="T:TVA.Net.Ftp.FtpFileWatcher">
            <summary>
            FTP File Watcher
            </summary>
            <remarks>
            Monitors for file changes over an FTP session.
            </remarks>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.#ctor">
            <summary>
            Constructs a new FTP file watcher using the default settings.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructs a new FTP file watcher using the specified settings.
            </summary>
            <param name="caseInsensitive">Set to true to not be case sensitive with FTP file and directory names.</param>
            <param name="notifyOnComplete">Set to true to notify after file has completed uploading -or- set to false for immediate notification of new file.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:TVA.Net.Ftp.FtpFileWatcher"/> class.
            </summary>
            <param name="container"><see cref="T:System.ComponentModel.IContainer"/> object that contains the <see cref="T:TVA.Net.Ftp.FtpFileWatcher"/>.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:TVA.Net.Ftp.FtpFileWatcher"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.Close">
            <summary>
            Closes FTP session and clears resources used by the <see cref="T:TVA.Net.Ftp.FtpFileWatcher"/>.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.Connect(System.String,System.String)">
            <summary>
            Connects to FTP server and enables file watching if <see cref="P:TVA.Net.Ftp.FtpFileWatcher.Enabled"/> is true.
            </summary>
            <param name="userName">A <see cref="T:System.String"/> value as the username.</param>
            <param name="password">A <see cref="T:System.String"/> value as the password.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.CloneFtpSession">
            <summary>
            Clones FTP session used by file watcher so it can be used for other purposes.
            </summary>
            <returns>New connected FTP session matching settings defined for FTP file watcher.</returns>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.Reset">
            <summary>
            Resets and restarts FTP session used by FTP file watcher.
            </summary>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.OnStatus(System.String)">
            <summary>
            Raises <see cref="E:TVA.Net.Ftp.FtpFileWatcher.Status"/> event.
            </summary>
            <param name="status">A <see cref="T:System.String"/> status message.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.OnFileAdded(TVA.Net.Ftp.FtpFile)">
            <summary>
            Raises <see cref="E:TVA.Net.Ftp.FtpFileWatcher.FileAdded"/> event.
            </summary>
            <param name="file">A <see cref="T:TVA.Net.Ftp.FtpFile"/> file.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.OnFileDeleted(TVA.Net.Ftp.FtpFile)">
            <summary>
            Raises <see cref="E:TVA.Net.Ftp.FtpFileWatcher.FileDeleted"/> event.
            </summary>
            <param name="file">A <see cref="T:TVA.Net.Ftp.FtpFile"/> file.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.OnCommandSent(System.String)">
            <summary>
            Raises <see cref="E:TVA.Net.Ftp.FtpFileWatcher.CommandSent"/> event.
            </summary>
            <param name="command">A <see cref="T:System.String"/> command.</param>
        </member>
        <member name="M:TVA.Net.Ftp.FtpFileWatcher.OnResponseReceived(System.String)">
            <summary>
            Raises <see cref="E:TVA.Net.Ftp.FtpFileWatcher.ResponseReceived"/> event.
            </summary>
            <param name="response">A <see cref="T:System.String"/> response.</param>
        </member>
        <member name="E:TVA.Net.Ftp.FtpFileWatcher.FileAdded">
            <summary>
            Raised when new file is added to monitored FTP directory.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is reference to newly added file.
            </remarks>
        </member>
        <member name="E:TVA.Net.Ftp.FtpFileWatcher.FileDeleted">
            <summary>
            Raised when file is deleted from monitored FTP directory.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is reference to file that was removed.
            </remarks>
        </member>
        <member name="E:TVA.Net.Ftp.FtpFileWatcher.Status">
            <summary>
            Raised when new status messages come from the FTP file watcher.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is status message from FTP file watcher.
            </remarks>
        </member>
        <member name="E:TVA.Net.Ftp.FtpFileWatcher.CommandSent">
            <summary>
            Raised when FTP command has been sent.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is sent FTP command.
            </remarks>
        </member>
        <member name="E:TVA.Net.Ftp.FtpFileWatcher.ResponseReceived">
            <summary>
            Raised when FTP response has been received.
            </summary>
            <remarks>
            <see cref="F:TVA.EventArgs`1.Argument"/> is received FTP response.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFileWatcher.Server">
            <summary>
            Gets or sets FTP server name (DNS name or IP) to watch.
            </summary>
            <remarks>
            FTP server name should not be prefixed with FTP://.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFileWatcher.Port">
            <summary>
            Gets or sets FTP server port to use, defaults to 21.
            </summary>
            <remarks>
            This only needs to be changed if the FTP server is established on a non-standard port number.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFileWatcher.CaseInsensitive">
            <summary>
            Gets or sets FTP case sensitivity of file and directory names.
            </summary>
            <remarks>
            Set to true to not be case sensitive with FTP file and directory names.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFileWatcher.WatchInterval">
            <summary>
            Gets or sets interval, in seconds, to scan for file changes on monitored FTP directory.
            </summary>
            <remarks>
            Specify interval in seconds to poll FTP directory for file changes.
            </remarks>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFileWatcher.Directory">
            <summary>
            Gets or sets name of FTP directory name to monitor. Leave blank to monitor initial FTP session directory.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFileWatcher.NotifyOnComplete">
            <summary>
            Sets flag for notification time. Set to true to only notify when a file is finished uploading, set to False to get an immediate notification when a new file is detected.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFileWatcher.Enabled">
            <summary>
            Gets or sets enabled state of the <see cref="T:TVA.Net.Ftp.FtpFileWatcher"/> object.
            </summary>
        </member>
        <member name="P:TVA.Net.Ftp.FtpFileWatcher.IsConnected">
            <summary>
            Returns true if FTP file watcher session is connected.
            </summary>
        </member>
        <member name="T:TVA.Media.Music.Tempo">
            <summary>
            Defines the tempo of song as the total number of note values in one minute.
            </summary>
            <remarks>
            This defined tempo of the music assigns absolute durations to all the
            note values within a score.
            </remarks>
        </member>
        <member name="M:TVA.Media.Music.Tempo.#ctor(System.Int32,System.Double)">
            <summary>
            Contructs a new <see cref="T:TVA.Media.Music.Tempo"/> object.
            </summary>
            <param name="totalNoteValues">Total note values for <see cref="T:TVA.Media.Music.Tempo"/>.</param>
            <param name="noteValue">Note value used for <see cref="T:TVA.Media.Music.Tempo"/>.</param>
        </member>
        <member name="M:TVA.Media.Music.Tempo.#ctor(System.Int32,TVA.Media.Music.NoteValue)">
            <summary>
            Contructs a new <see cref="T:TVA.Media.Music.Tempo"/> object.
            </summary>
            <param name="totalNoteValues">Total note values for <see cref="T:TVA.Media.Music.Tempo"/>.</param>
            <param name="noteValue">Named note value used for <see cref="T:TVA.Media.Music.Tempo"/>.</param>
        </member>
        <member name="M:TVA.Media.Music.Tempo.#ctor(System.Int32,TVA.Media.Music.NoteValueBritish)">
            <summary>
            Contructs a new <see cref="T:TVA.Media.Music.Tempo"/> object.
            </summary>
            <param name="totalNoteValues">A <see cref="T:System.Int32"/> indicating the total note values.</param>
            <param name="noteValue">Named note value used for <see cref="T:TVA.Media.Music.Tempo"/>.</param>
        </member>
        <member name="M:TVA.Media.Music.Tempo.CalculateNoteValueTime(System.Double)">
            <summary>
            Calculates the actual time duration, in seconds, for the given tempo that the specified
            source note value will last. For example, if tempo is M.M. 120 quarter-notes per minute,
            then each quarter-note would last a half-second.
            </summary>
            <param name="value">Relative value of note.</param>
            <returns>Actual duration of note value in seconds.</returns>
        </member>
        <member name="M:TVA.Media.Music.Tempo.CalculateNoteValueTime(TVA.Media.Music.NoteValue,System.Int32)">
            <summary>
            Calculates the actual time duration, in seconds, for the given tempo that the specified
            source note value will last. For example, if tempo is M.M. 120 quarter-notes per minute,
            then each quarter-note would last a half-second.
            </summary>
            <param name="source">Source note value.</param>
            <param name="dots">Total dotted note length extensions to apply.</param>
            <returns>Actual duration of note value in seconds.</returns>
        </member>
        <member name="M:TVA.Media.Music.Tempo.CalculateNoteValueTime(TVA.Media.Music.NoteValueBritish,System.Int32)">
            <summary>
            Calculates the actual time duration, in seconds, for the given tempo that the specified
            source note value will last. For example, if tempo is M.M. 120 crotchets per minute,
            then each crotchet would last a half-second.
            </summary>
            <param name="source">Source note value.</param>
            <param name="dots">Total dotted note length extensions to apply.</param>
            <returns>Actual duration of note value in seconds.</returns>
        </member>
        <member name="P:TVA.Media.Music.Tempo.TotalNoteValues">
            <summary>
            Total number of reference note values that occur in one minute - thus defining
            the tempo for a score.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Tempo.NoteValue">
            <summary>
            Returns relative value for reference note value.  For example, if tempo is
            M.M. 120 quarter-notes per minute, then time is referenced in quarter-notes
            and this function would return 0.25.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Tempo.NoteValueTime">
            <summary>
            Total time, in seconds, for reference note value.  For example, if tempo is
            M.M. 120 quarter-notes per minute, then time is referenced in quarter-notes
            and this function would return 0.5 seconds.
            </summary>
        </member>
        <member name="P:TVA.Media.Music.Tempo.NamedNoteValue">
            <summary>Get or sets the note value, expressed in American form, representing the length of the note.</summary>
        </member>
        <member name="P:TVA.Media.Music.Tempo.NamedNoteValueBritish">
            <summary>Get or sets the note value, expressed in British form, representing the length of the note.</summary>
        </member>
        <member name="T:TVA.IO.Compression.FileCompressor">
            <summary>Performs basic compression and decompression on a file.</summary>
        </member>
        <member name="M:TVA.IO.Compression.FileCompressor.Compress(System.String,System.String)">
            <summary>
            Compress a file using default compression strength (not PKZip compatible...)
            </summary>
            <param name="sourceFileName">Source file name.</param>
            <param name="destinationFileName">Destination file name.</param>
        </member>
        <member name="M:TVA.IO.Compression.FileCompressor.Compress(System.String,System.String,TVA.IO.Compression.CompressionStrength)">
            <summary>
            Compress a file using specified compression strength (not PKZip compatible...)
            </summary>
            <param name="sourceFileName">Source file name.</param>
            <param name="destinationFileName">Destination file name.</param>
            <param name="strength">Stength of compression to apply.</param>
        </member>
        <member name="M:TVA.IO.Compression.FileCompressor.Compress(System.String,System.String,TVA.IO.Compression.CompressionStrength,System.Action{TVA.ProcessProgress{System.Int64}})">
            <summary>
            Compress a file using specified compression strength (not PKZip compatible...)
            </summary>
            <param name="sourceFileName">Source file name.</param>
            <param name="destinationFileName">Destination file name.</param>
            <param name="strength">Stength of compression to apply.</param>
            <param name="progressHandler">User function to call with compression progress updates.</param>
        </member>
        <member name="M:TVA.IO.Compression.FileCompressor.Decompress(System.String,System.String)">
            <summary>
            Uncompress a file compressed with CompressFile (not PKZip compatible...)
            </summary>
            <param name="sourceFileName">Source file name.</param>
            <param name="destinationFileName">Destination file name.</param>
        </member>
        <member name="M:TVA.IO.Compression.FileCompressor.Decompress(System.String,System.String,System.Action{TVA.ProcessProgress{System.Int64}})">
            <summary>
            Uncompress a file compressed with CompressFile given progress event handler (not PKZip compatible...)
            </summary>
            <param name="sourceFileName">Source file name.</param>
            <param name="destinationFileName">Destination file name.</param>
            <param name="progressHandler">User function to call with decompression progress updates.</param>
        </member>
        <member name="T:TVA.Collections.NamespaceDoc">
            <summary>
            Contains classes and type extension functions related to any fundamental collection including thread based processing queues.
            </summary>
        </member>
        <member name="T:TVA.Collections.CollectionExtensions">
            <summary>
            Defines extension functions related to manipulation of arrays and collections.
            </summary>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Majority``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the majority value in the collection, or default value if no item represents the majority.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of elements in the <paramref name="source"/>.</typeparam>
            <param name="source">An enumeration over which to find the majority element.</param>
            <returns>The majority value in the collection.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Minority``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minority value in the collection, or default value if no item represents the minority.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of elements in the <paramref name="source"/>.</typeparam>
            <param name="source">An enumeration over which to find the minority element.</param>
            <returns>The minority value in the collection.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified <paramref name="items"/> to the <paramref name="collection"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection to which the <paramref name="items"/> are to be added.</param>
            <param name="items">The elements to be added to the <paramref name="collection"/>.</param>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.UpdateRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates <paramref name="collection"/> starting at the <paramref name="index"/> with the specified <paramref name="items"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection whose elements are to be updated with the specified <paramref name="items"/>.</param>
            <param name="index">The zero-based index in the <paramref name="collection"/> at which elements are to be updated.</param>
            <param name="items">The elements that will replace the <paramref name="collection"/> elements starting at the <paramref name="index"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="index"/> is present in the <paramref name="collection"/>.</exception>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.GetRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Returns elements in the specified range from the <paramref name="collection"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection from which elements are to be retrieved.</param>
            <param name="index">The 0-based index position in the <paramref name="collection"/> from which elements are to be retrieved.</param>
            <param name="count">The number of elements to be retrieved from the <paramref name="collection"/> starting at the <paramref name="index"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> object.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index of the first element of the sequence that satisfies a condition or <c>-1</c> if no such element is found.
            </summary>
            <param name="source">A <see cref="T:System.Collections.Generic.IList`1"/> to find an index in.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>Index of the first element in <paramref name="source"/> that matches the specified <paramref name="predicate"/>; otherwise, <c>-1</c>.</returns>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Copy``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a copy of the <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to be copied.</typeparam>
            <param name="source">The source <see cref="T:System.Array"/> whose elements are to be copied.</param>
            <param name="startIndex">The source array index from where the elements are to be copied.</param>
            <param name="length">The number of elements to be copied starting from the startIndex.</param>
            <returns>An <see cref="T:System.Array"/> of elements copied from the specified portion of the source <see cref="T:System.Array"/>.</returns>
            <remarks>
            Returned <see cref="T:System.Array"/> will be extended as needed to make it the specified <paramref name="length"/>, but
            it will never be less than the source <see cref="T:System.Array"/> length - <paramref name="startIndex"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes for the source <see cref="T:System.Array"/> -or-
            <paramref name="length"/> is less than 0.
            </exception>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>Returns the smallest item from the enumeration.</summary>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="source">An enumeration that is compared against.</param>
            <param name="comparer">A delegate that takes two generic types to compare, and returns an integer based on the comparison.</param>
            <returns>Returns a generic type.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Returns the smallest item from the enumeration.</summary>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="source">An enumeration that is compared against.</param>
            <param name="comparer">A comparer object.</param>
            <returns>Returns a generic type.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
            <summary>Returns the largest item from the enumeration.</summary>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="source">An enumeration that is compared against.</param>
            <param name="comparer">A delegate that takes two generic types to compare, and returns an integer based on the comparison.</param>
            <returns>Returns a generic type.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Returns the largest item from the enumeration.</summary>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="source">An enumeration that is compared against.</param>
            <param name="comparer">A comparer object.</param>
            <returns>Returns a generic type.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts an enumeration to a string, using the default delimeter ("|") that can later be
            converted back to a list using LoadDelimitedString.</summary>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="source">The source object to be converted into a delimited string.</param>
            <returns>Returns a <see cref="T:System.String"/> that is result of combining all elements in the list delimited by the '|' character.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>Converts an enumeration to a string that can later be converted back to a list using
            LoadDelimitedString.</summary>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="source">The source object to be converted into a delimited string.</param>
            <param name="delimiter">The delimiting character used.</param>
            <returns>Returns a <see cref="T:System.String"/> that is result of combining all elements in the list delimited by <paramref name="delimiter"/>.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Converts an enumeration to a string that can later be converted back to a list using
            LoadDelimitedString.</summary>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="source">The source object to be converted into a delimited string.</param>
            <param name="delimiter">The delimiting <see cref="T:System.String"/> used.</param>
            <returns>Returns a <see cref="T:System.String"/> that is result of combining all elements in the list delimited by <paramref name="delimiter"/>.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.ToDelimitedString``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>Converts an enumeration to a string that can later be converted back to a list using
            LoadDelimitedString.</summary>
            <typeparam name="TSource">The generic enumeration type used.</typeparam>
            <typeparam name="TDelimiter">The generic delimiter type used.</typeparam>
            <param name="source">The source object to be converted into a delimited string.</param>
            <param name="delimiter">The delimeter of type TDelimiter used.</param>
            <returns>Returns a <see cref="T:System.String"/> that is result of combining all elements in the list delimited by <paramref name="delimiter"/>.</returns>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.LoadDelimitedString``1(System.Collections.Generic.IList{``0},System.String,System.Func{System.String,``0})">
            <summary>Appends items parsed from delimited string, created with ToDelimitedString, using the default
            delimeter ("|") into the given list.</summary>
            <remarks>Items that are converted are added to list. The list is not cleared in advance.</remarks>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="destination">The list we are adding items to.</param>
            <param name="delimitedString">The delimited string to parse for items.</param>
            <param name="convertFromString">Delegate that takes one parameter and converts from string to type TSource.</param>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.LoadDelimitedString``1(System.Collections.Generic.IList{``0},System.String,System.Char,System.Func{System.String,``0})">
            <summary>Appends items parsed from delimited string, created with ToDelimitedString, into the given list.</summary>
            <remarks>Items that are converted are added to list. The list is not cleared in advance.</remarks>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="destination">The list we are adding items to.</param>
            <param name="delimitedString">The delimited string to parse for items.</param>
            <param name="delimeter">The <see cref="T:System.Char"/> value to look for in the <paramref name="delimitedString"/> as the delimiter.</param>
            <param name="convertFromString">Delegate that takes one parameter and converts from string to type TSource.</param>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.LoadDelimitedString``1(System.Collections.Generic.IList{``0},System.String,System.String[],System.Func{System.String,``0})">
            <summary>Appends items parsed from delimited string, created with ToDelimitedString, into the given list.</summary>
            <remarks>Items that are converted are added to list. The list is not cleared in advance.</remarks>
            <typeparam name="TSource">The generic type used.</typeparam>
            <param name="destination">The list we are adding items to.</param>
            <param name="delimitedString">The delimited string to parse for items.</param>
            <param name="delimiters">An array of delimiters to look for in the <paramref name="delimitedString"/> as the delimiter.</param>
            <param name="convertFromString">Delegate that takes a <see cref="T:System.String"/> and converts to type TSource.</param>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0})">
            <summary>
            Rearranges all the elements in the list into a random order.
            </summary>
            <typeparam name="TSource">The generic type of the list.</typeparam>
            <param name="source">The input list of generic types to scramble.</param>
            <remarks>This function uses a cryptographically strong random number generator to perform the scramble.</remarks>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Rearranges all the elements in the list into a repeatable pseudo-random order.
            </summary>
            <param name="source">The input list of generic types to scramble.</param>
            <param name="seed">A number used to calculate a starting value for the pseudo-random number sequence.</param>
            <typeparam name="TSource">The generic type of the list.</typeparam>
            <remarks>This function uses the <see cref="T:System.Random"/> generator to perform the scramble using a sequence that is repeatable.</remarks>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.Unscramble``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Rearranges all the elements in the list previously scrambled with <see cref="M:TVA.Collections.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0},System.Int32)"/> back into their original order.
            </summary>
            <param name="source">The input list of generic types to unscramble.</param>
            <param name="seed">The same number used in <see cref="M:TVA.Collections.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0},System.Int32)"/> call to scramble original list.</param>
            <typeparam name="TSource">The generic type of the list.</typeparam>
            <remarks>This function uses the <see cref="T:System.Random"/> generator to perform the unscramble using a sequence that is repeatable.</remarks>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.CompareTo``1(``0[],``0[])">
            <summary>Compares two arrays.</summary>
            <param name="array1">The first type array to compare to.</param>
            <param name="array2">The second type array to compare against.</param>
            <returns>An <see cref="T:System.Int32"/> which returns 0 if they are equal, 1 if <paramref name="array1"/> is larger, or -1 if <paramref name="array2"/> is larger.</returns>
            <typeparam name="TSource">The generic type of the list.</typeparam>
        </member>
        <member name="M:TVA.Collections.CollectionExtensions.CompareTo(System.Array,System.Array,System.Collections.IComparer)">
            <summary>Compares two arrays.</summary>
            <param name="array1">The first <see cref="T:System.Array"/> to compare to.</param>
            <param name="array2">The second <see cref="T:System.Array"/> to compare against.</param>
            <param name="comparer">An interface <see cref="T:System.Collections.IComparer"/> that exposes a method to compare the two arrays.</param>
            <returns>An <see cref="T:System.Int32"/> which returns 0 if they are equal, 1 if <paramref name="array1"/> is larger, or -1 if <paramref name="array2"/> is larger.</returns>
            <remarks>This is a default comparer to make arrays comparable.</remarks>
        </member>
    </members>
</doc>
